@model ERPIndia.Controllers.StudentMarksViewModel
@{
    ViewBag.Title = "Student Marks Entry";
}

<style>
    .filter-card {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .filter-dropdown {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        padding: 8px 12px;
        width: 100%;
        font-size: 14px;
    }

    .show-button {
        background: #28a745;
        color: white;
        padding: 10px 30px;
        font-size: 14px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        width: 100%;
    }

    .show-button:hover {
        background: #218838;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    /* DataTable custom styling */
    .product-style-table {
        width: 100%;
        border-collapse: collapse;
    }

    .product-style-table thead th {
        background: linear-gradient(to bottom, #69c1f7, #39a9f2);
        color: #212529;
        font-weight: bold;
        text-align: center;
        padding: 10px;
        border: 1px solid #dee2e6 !important;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .product-style-table tbody tr:nth-child(odd) {
        background-color: #e3e8ed !important;
    }

    .product-style-table tbody tr:nth-child(even) {
        background-color: #ffffff !important;
    }

    .product-style-table tbody tr:hover {
        background-color: #f8f9fa !important;
    }

    .product-style-table tbody tr.selected {
        background-color: #e7f3ff !important;
    }

    .product-style-table tbody td {
        padding: 8px 10px;
        border: 1px solid #dee2e6;
        text-align: left;
    }

    

    .marks-input {
        width: 100px;
        padding: 5px 8px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 13px;
        text-align: center;
    }

    .marks-input:focus {
        border-color: #80bdff;
        outline: none;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .marks-input.invalid {
        border-color: #dc3545;
        background: #fff5f5;
    }

    .marks-input.absent {
        background: #f0f0f0;
        color: #666;
    }

    .save-btn {
        background: linear-gradient(to right, #28a745, #20c997);
        color: white;
        padding: 12px 40px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        margin: 20px 0;
        transition: all 0.3s ease;
        font-size: 16px;
    }

    .save-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(40,167,69,0.3);
    }

    .save-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .subject-badge {
        background: #007bff;
        color: white;
        padding: 3px 8px;
        border-radius: 3px;
        font-size: 12px;
        font-weight: 500;
    }

    .max-marks-badge {
        background: #6c757d;
        color: white;
        padding: 3px 8px;
        border-radius: 3px;
        font-size: 12px;
        font-weight: 500;
    }

    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 99999;
        max-width: 400px;
    }

    .toast {
        min-width: 300px;
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease;
        font-size: 14px;
        font-weight: 500;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .toast-success {
        background: #d4edda;
        border-left: 4px solid #28a745;
        color: #155724;
    }

    .toast-error {
        background: #f8d7da;
        border-left: 4px solid #dc3545;
        color: #721c24;
    }

    .toast-warning {
        background: #fff3cd;
        border-left: 4px solid #ffc107;
        color: #856404;
    }

    .toast-info {
        background: #d1ecf1;
        border-left: 4px solid #17a2b8;
        color: #0c5460;
    }

    .spinner-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .spinner-box {
        background: white;
        padding: 30px;
        border-radius: 10px;
        text-align: center;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 15px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .form-check {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .form-check-input {
        margin-right: 5px;
    }
    .marks-info {
        display: inline-block;
        padding: 6px 12px;
        margin-top: 6px;
        font-size: 14px;
        font-weight: 500;
        background: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 6px;
    }

        .marks-info b.absent {
            color: orangered;
            font-weight: 700;
        }

        .marks-info b.medical {
            color: navy;
            font-weight: 700;
        }

</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-edit me-2"></i>Marks Entry
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-2">
                            <label class="form-label">Class <span style="color:red">*</span></label>
                            @Html.DropDownListFor(x => x.Classes, Model.Classes, "Select Class", new { @class = "filter-dropdown", id = "ddlClass" })
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Section <span style="color:red">*</span></label>
                            @Html.DropDownListFor(x => x.Sections, Model.Sections, "Select Section", new { @class = "filter-dropdown", id = "ddlSection" })
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Subject <span style="color:red">*</span></label>
                            <select class="filter-dropdown" id="ddlSubject">
                                <option value="">Select Subject</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Exam <span style="color:red">*</span></label>
                            @Html.DropDownListFor(x => x.ExamTypes, Model.ExamTypes, "Select Exam", new { @class = "filter-dropdown", id = "ddlExam" })
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="show-button" id="btnShow">
                                <i class="fas fa-search"></i> Show
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Table Section -->
    <div id="dataTableContainer" style="display:none;">
        <div class="card">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="fas fa-users me-2"></i>Students List
                </h5>
            </div>
            <div class="card-body">
                <!-- Legend -->
                <div id="marksLegend" class="alert alert-info" style="font-size: 13px;">
                    <strong>Guideline:</strong>
                    <span id="maxMarksSpan" style="display:none">100</span>
                    <div class="marks-info">
                        Enter <b class="absent">-1</b> for <b>Absent</b>  |
                        Enter <b class="medical">-2</b> for <b>Medical</b>
                    </div>

                </div>

                <!-- Data Table -->
                <div class="table-responsive">
                    <table class="table product-style-table mb-0" id="marksTable">
                        <thead>
                            <tr>
                                <th width="50">
                                    <input type="checkbox" id="selectAll" class="form-check-input">
                                </th>
                                <th width="80">Class</th>
                                <th width="60">Sr.No</th>
                                <th width="60">Roll</th>
                                <th>Subject</th>
                                <th>Student</th>
                                <th align="center" style="text-align:center">Father</th>
                                <th width="80"  align="center">Max Marks</th>
                                <th width="150" align="center">Obt. Marks</th>
                            </tr>
                        </thead>
                        <tbody id="marksTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>

                <!-- Save Button -->
                <div class="text-center">
                    <button class="save-btn" id="btnSave">
                        <i class="fas fa-save"></i> Save Marks
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container" id="toastContainer"></div>

<!-- Spinner Overlay -->
<div class="spinner-overlay" id="spinnerOverlay">
    <div class="spinner-box">
        <div class="spinner"></div>
        <div>Loading...</div>
    </div>
</div>

<script>
$(document).ready(function() {
    var dataTable = null;
    var allStudentsData = [];
    var gradeConfig = null;
    var currentSubject = null;
    var maxMarks = 100;

    console.log('Page loaded, initializing Student Marks Entry system with DataTables...');

    // Load subjects when class and section are selected
    $('#ddlClass, #ddlSection').change(function() {
        var classId = $('#ddlClass').val();
        var sectionId = $('#ddlSection').val();

        if (classId && sectionId) {
            loadSubjects(classId, sectionId);
        }

        // Hide table when filters change
        $('#dataTableContainer').hide();
        if (dataTable) {
            dataTable.destroy();
            dataTable = null;
        }
        allStudentsData = [];
    });

    // Hide table when exam or subject changes
    $('#ddlExam, #ddlSubject').change(function() {
        $('#dataTableContainer').hide();
        if (dataTable) {
            dataTable.destroy();
            dataTable = null;
        }
        allStudentsData = [];
    });

    // Load subjects
    function loadSubjects(classId, sectionId) {
        $('#ddlSubject').html('<option value="">Loading subjects...</option>');

        $.ajax({
            url: '@Url.Action("GetSubjects", "StudentMarks")',
            type: 'POST',
            data: { classId: classId, sectionId: sectionId },
            success: function(data) {
                var $dropdown = $('#ddlSubject');
                $dropdown.empty().append('<option value="">Select Subject</option>');

                if (data && data.success) {
                    if (data.subjects && data.subjects.length > 0) {
                        $.each(data.subjects, function(i, subject) {
                            $dropdown.append('<option value="' + subject.SubjectID + '">' + subject.SubjectName + '</option>');
                        });
                    } else {
                        showToast('No subjects found for selected class and section', 'warning');
                    }
                } else {
                    showToast(data.message || 'Failed to load subjects', 'error');
                }
            },
            error: function(xhr, status, error) {
                $('#ddlSubject').html('<option value="">Select Subject</option>');
                showToast('Error loading subjects: ' + (error || 'Unknown error'), 'error');
                console.error('Error loading subjects:', error);
            }
        });
    }

    // Show button click
    $('#btnShow').click(function() {
        var classId = $('#ddlClass').val();
        var sectionId = $('#ddlSection').val();
        var examId = $('#ddlExam').val();
        var subjectId = $('#ddlSubject').val();

        // Clear any existing toasts
        $('#toastContainer').empty();

        // Validate fields
        if (!classId || classId === '' || classId === '0') {
            showToast('Please select Class', 'warning');
            $('#ddlClass').focus();
            return false;
        }

        if (!sectionId || sectionId === '' || sectionId === '0') {
            showToast('Please select Section', 'warning');
            $('#ddlSection').focus();
            return false;
        }

        if (!subjectId || subjectId === '' || subjectId === '0') {
            showToast('Please select Subject', 'warning');
            $('#ddlSubject').focus();
            return false;
        }

        if (!examId || examId === '' || examId === '0') {
            showToast('Please select Exam Type', 'warning');
            $('#ddlExam').focus();
            return false;
        }

        loadStudentMarks(classId, sectionId, examId, subjectId);
    });

    // Load student marks
    function loadStudentMarks(classId, sectionId, examId, subjectId) {
        if (!classId || !sectionId || !examId || !subjectId) {
            showToast('All fields are required. Please select all options.', 'error');
            return false;
        }

        showSpinner();

        $.ajax({
            url: '@Url.Action("GetStudentMarksForSubject", "StudentMarks")',
            type: 'POST',
            data: {
                classId: classId,
                sectionId: sectionId,
                examTypeId: examId,
                subjectId: subjectId
            },
            success: function(data) {
                hideSpinner();

                if (data && data.success) {
                    if (data.students && data.students.length > 0) {
                        allStudentsData = data.students;
                        gradeConfig = data.gradeConfig;
                        currentSubject = data.subject;

                        // Set max marks
                        if (gradeConfig && gradeConfig.MaxMarks) {
                            maxMarks = gradeConfig.MaxMarks;
                        } else {
                            maxMarks = 100;
                            showToast('Using default max marks: 100', 'info');
                        }

                        // Update legend
                        $('#maxMarksSpan').text(maxMarks);

                        // Show table
                        $('#dataTableContainer').show();

                        // Render table
                        renderTable();

                        showToast('Data loaded successfully! Total students: ' + data.students.length, 'success');
                    } else {
                        showToast('No students found for selected criteria', 'warning');
                        $('#dataTableContainer').hide();
                    }
                } else {
                    showToast(data.message || 'Failed to load student data', 'error');
                    $('#dataTableContainer').hide();
                }
            },
            error: function(xhr, status, error) {
                hideSpinner();
                var errorMsg = 'Error loading student data';
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMsg = xhr.responseJSON.message;
                } else if (error) {
                    errorMsg += ': ' + error;
                }
                showToast(errorMsg, 'error');
                console.error('Load error:', xhr, status, error);
                $('#dataTableContainer').hide();
            }
        });
    }

    // Render table with DataTables
    function renderTable() {
        var $tbody = $('#marksTableBody');
        $tbody.empty();

        // Populate table body
        for (var i = 0; i < allStudentsData.length; i++) {
            var student = allStudentsData[i];
            var marks = '';
            var additionalClass = '';

            if (student.MarksObtained !== null && student.MarksObtained !== undefined) {
                marks = student.MarksObtained;
                if (marks >= -9 && marks <= -1) {
                    additionalClass = ' absent';
                }
            }

            var row = '<tr data-studentid="' + student.StudentID + '">' +
                     '<td class="text-center"><input type="checkbox" class="form-check-input row-checkbox"></td>' +
                     '<td>' + student.ClassName + '-' + student.SectionName + '</td>' +
                     '<td>' + (i + 1) + '</td>' +
                     '<td>' + (student.RollNumber || '-') + '</td>' +
                     '<td><span class="subject-badge">' + currentSubject.SubjectName + '</span></td>' +
                     '<td><b>' + student.StudentName + '</b></td>' +
                     '<td>' + student.FatherName + '</td>' +
                     '<td align="center" style="text-align:center"><span class="max-marks-badge">' + maxMarks + '</span></td>' +
                     '<td align="center">' +
                        '<input type="tel" ' +
                        'class="marks-input' + additionalClass + '" ' +
                        'data-studentid="' + student.StudentID + '" ' +
                        'data-original="' + marks + '" ' +
                        'value="' + marks + '" ' +
                        'inputmode="numeric" ' +
                        'pattern="-?[0-9]*" ' +
                        'maxlength="4" ' +
                        'placeholder="0-' + maxMarks + '">' +
                     '</td>' +
                     '</tr>';

            $tbody.append(row);
        }

        // Initialize DataTable
        initializeDataTable();
    }

    // Initialize DataTable
    function initializeDataTable() {
        // Destroy existing DataTable if exists
        if (dataTable) {
            dataTable.destroy();
        }

        // Initialize new DataTable
        dataTable = $('#marksTable').DataTable({
            "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
            "pageLength": 25,
            "order": [[2, "asc"]], // Order by Sr.No
            "scrollX": false,
            "responsive": true,
            "dom": 'Blfrtip',
            "buttons": [
                {
                    extend: 'copy',
                    text: 'Copy',
                    className: 'dt-button',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7, 8]
                    }
                },
                {
                    extend: 'csv',
                    text: 'CSV',
                    className: 'dt-button',
                    title: 'StudentMarks_' + new Date().getTime(),
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7, 8]
                    }
                },
                {
                    extend: 'excel',
                    text: 'Excel',
                    className: 'dt-button',
                    title: 'StudentMarks_' + new Date().getTime(),
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7, 8]
                    }
                },
                {
                    extend: 'pdf',
                    text: 'PDF',
                    className: 'dt-button',
                    title: 'Student Marks Report',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7, 8]
                    }
                },
                {
                    extend: 'print',
                    text: 'Print',
                    className: 'dt-button',
                    title: 'Student Marks Report',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7, 8]
                    }
                }
            ],
            "language": {
                "search": "Search:",
                "lengthMenu": "Show _MENU_ entries",
                "info": "Showing _START_ to _END_ of _TOTAL_ entries",
                "paginate": {
                    "first": "First",
                    "last": "Last",
                    "next": "Next",
                    "previous": "Previous"
                }
            },
            "columnDefs": [
                {
                    "orderable": false,
                    "targets": [0, 8] // Disable ordering for checkbox and marks columns
                }
            ],
            "drawCallback": function(settings) {
                // Re-bind events after DataTable redraw
                bindTableEvents();
            }
        });

        // Initial binding
        bindTableEvents();
    }

    // Bind table events
    function bindTableEvents() {
        // Numeric validation for marks input
        $('.marks-input').off('input').on('input', function(e) {
            var $input = $(this);
            var value = $input.val().trim();

            // Allow minus sign only at the beginning
            var isNegative = value.charAt(0) === '-';
            var numericPart = isNegative ? value.substring(1) : value;

            // Remove non-numeric characters
            numericPart = numericPart.replace(/[^0-9]/g, '');

            // Reconstruct value
            var cleanValue = isNegative ? '-' + numericPart : numericPart;

            if (value !== cleanValue) {
                $input.val(cleanValue);
                value = cleanValue;

                if (!$input.data('warned')) {
                    showToast('Only numbers allowed! Use -1 to -9 for absent/medical', 'warning');
                    $input.data('warned', true);
                    setTimeout(function() {
                        $input.data('warned', false);
                    }, 3000);
                }
            }

            // Validate numeric value
            if (value !== '' && value !== '-') {
                var marks = parseInt(value);
                if (!isNaN(marks)) {
                    if (marks < 0) {
                        if (marks < -9) {
                            $input.addClass('invalid');
                            $input.val('-9');
                            showToast('For absent/medical, use only -1 to -9', 'error');
                        } else {
                            $input.removeClass('invalid').addClass('absent');
                        }
                    } else if (marks > maxMarks) {
                        $input.addClass('invalid');
                        showToast('Marks cannot exceed ' + maxMarks, 'warning');
                    } else {
                        $input.removeClass('invalid absent');
                    }
                }
            } else {
                $input.removeClass('invalid absent');
            }
        });

        // Prevent non-numeric input
        $('.marks-input').off('keypress').on('keypress', function(e) {
            var charCode = (e.which) ? e.which : e.keyCode;
            var currentValue = $(this).val();
            var cursorPosition = this.selectionStart;

            // Allow control keys
            if ([8, 9, 13, 46].indexOf(charCode) !== -1) {
                return true;
            }

            // Allow Ctrl combinations
            if (e.ctrlKey && [65, 67, 86, 88].indexOf(charCode) !== -1) {
                return true;
            }

            // Allow minus sign only at beginning
            if (charCode === 45) {
                if (cursorPosition === 0 && !currentValue.includes('-')) {
                    return true;
                }
                e.preventDefault();
                return false;
            }

            // Only allow numbers
            if (charCode < 48 || charCode > 57) {
                e.preventDefault();
                return false;
            }

            // Check for minus sign restrictions
            if (currentValue.charAt(0) === '-' && cursorPosition > 0 && currentValue.length >= 2) {
                e.preventDefault();
                return false;
            }

            return true;
        });

        // Handle paste
        $('.marks-input').off('paste').on('paste', function(e) {
            var $input = $(this);
            e.preventDefault();

            var pastedData = '';
            if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.getData) {
                pastedData = e.originalEvent.clipboardData.getData('text');
            } else if (window.clipboardData && window.clipboardData.getData) {
                pastedData = window.clipboardData.getData('Text');
            }

            pastedData = pastedData.trim();
            var isNegative = pastedData.charAt(0) === '-';
            var numericPart = isNegative ? pastedData.substring(1) : pastedData;
            numericPart = numericPart.replace(/[^0-9]/g, '');

            var cleanValue = isNegative ? '-' + numericPart : numericPart;

            if (cleanValue !== '' && cleanValue !== '-') {
                var value = parseInt(cleanValue);
                if (!isNaN(value)) {
                    if (value < -9) {
                        cleanValue = '-9';
                        showToast('Pasted value adjusted to -9', 'warning');
                    } else if (value > maxMarks) {
                        cleanValue = maxMarks.toString();
                        showToast('Pasted value adjusted to maximum marks', 'warning');
                    }
                }
            }

            $input.val(cleanValue);
            $input.trigger('input');
        });

        // Enter key navigation
        $('.marks-input').off('keydown').on('keydown', function(e) {
            if (e.key === 'Enter' || e.keyCode === 13) {
                e.preventDefault();
                var $inputs = $('.marks-input:visible');
                var index = $inputs.index(this);
                if (index < $inputs.length - 1) {
                    $inputs.eq(index + 1).focus().select();
                }
            }

            // Block arrow keys
            if (e.keyCode === 38 || e.keyCode === 40) {
                e.preventDefault();
                return false;
            }
        });

        // Focus event
        $('.marks-input').off('focus').on('focus', function() {
            $(this).select();
        });

        // Select all checkbox
        $('#selectAll').off('change').on('change', function() {
            var isChecked = $(this).prop('checked');
            if (dataTable) {
                dataTable.$('.row-checkbox').prop('checked', isChecked);
            } else {
                $('.row-checkbox').prop('checked', isChecked);
            }
        });

        // Individual row checkbox
        $('.row-checkbox').off('change').on('change', function() {
            var $row = $(this).closest('tr');
            if ($(this).is(':checked')) {
                $row.addClass('selected');
            } else {
                $row.removeClass('selected');
            }
        });
    }

    // Save marks
    $('#btnSave').click(function() {
        var marksToSave = [];
        var hasValidMark = false;
        var hasAnyEntry = false;

        if (!$('#dataTableContainer').is(':visible')) {
            alert('Please load student data first by clicking Show button');
            return false;
        }

        // Collect all marks data across all pages
        var $allInputs = dataTable ? dataTable.$('.marks-input') : $('.marks-input');

        $allInputs.each(function() {
            var $input = $(this);
            var studentId = $input.data('studentid');
            var value = $input.val().trim();
            var marks = null;

            if (value !== '' && value !== '-') {
                marks = parseInt(value);
                if (!isNaN(marks)) {
                    hasAnyEntry = true;

                    if (marks >= -9 && marks <= -1) {
                        hasAnyEntry = true;
                    } else if (marks > 0) {
                        hasValidMark = true;

                        if (marks > maxMarks) {
                            var studentName = $input.closest('tr').find('td:nth-child(6)').text();
                            alert('Marks for ' + studentName + ' exceeds maximum marks (' + maxMarks + ')');
                            $input.focus();
                            return false;
                        }
                    } else if (marks === 0) {
                        hasAnyEntry = true;
                    }
                }
            }

            marksToSave.push({
                StudentID: studentId,
                SubjectID: currentSubject.SubjectID,
                ExamTypeID: $('#ddlExam').val(),
                MarksObtained: marks
            });
        });

        if (!hasAnyEntry) {
            alert('Please enter marks for at least one student');
            $('.marks-input').first().focus();
            return false;
        }

        var confirmMsg = 'Do you want to save marks for all students?';
        if (!hasValidMark) {
            confirmMsg = 'Do you want to continue?';
        }

        if (confirm(confirmMsg)) {
            performSave(marksToSave);
        }
    });

    // Perform save
    function performSave(marksToSave) {
        showSpinner();

        console.log('Sending marks data:', {
            marks: marksToSave,
            classId: $('#ddlClass').val(),
            sectionId: $('#ddlSection').val(),
            examTypeId: $('#ddlExam').val()
        });

        $.ajax({
            url: '@Url.Action("SaveStudentMarks", "StudentMarks")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                marks: marksToSave,
                classId: $('#ddlClass').val(),
                sectionId: $('#ddlSection').val(),
                examTypeId: $('#ddlExam').val()
            }),
            success: function(result) {
                hideSpinner();

                if (result && result.success) {
                    showToast('Marks saved successfully!', 'success');

                    setTimeout(function() {
                        location.reload();
                    }, 2000);
                } else {
                    showToast(result.message || 'Failed to save marks', 'error');
                }
            },
            error: function(xhr, status, error) {
                hideSpinner();

                console.error('Save error details:', {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    responseText: xhr.responseText,
                    error: error
                });

                var errorMsg = 'Error saving marks: ';
                if (xhr.status === 0) {
                    errorMsg += 'Network error - Check your connection';
                } else if (xhr.status === 404) {
                    errorMsg += 'Save endpoint not found';
                } else if (xhr.status === 500) {
                    errorMsg += 'Server error - Check server logs';
                } else if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMsg += xhr.responseJSON.message;
                } else if (xhr.responseText) {
                    try {
                        var response = JSON.parse(xhr.responseText);
                        errorMsg += response.message || 'Unknown server error';
                    } catch(e) {
                        errorMsg += 'Server returned invalid response';
                    }
                } else {
                    errorMsg += error || 'Unknown error';
                }

                showToast(errorMsg, 'error');
            }
        });
    }

    // Helper functions
    function showSpinner() {
        $('#spinnerOverlay').css('display', 'flex');
    }

    function hideSpinner() {
        $('#spinnerOverlay').hide();
    }

    function showToast(message, type) {
        var icons = {
            success: 'check',
            error: 'times',
            warning: 'exclamation',
            info: 'info'
        };

        var toastId = 'toast_' + Date.now();

        var toastHtml = '<div class="toast toast-' + type + '" id="' + toastId + '" style="display:none;">' +
                       '<i class="fas fa-' + icons[type] + '-circle me-2"></i>' +
                       message +
                       '</div>';

        var $toast = $(toastHtml);
        $('#toastContainer').append($toast);

        $toast.fadeIn(300);

        setTimeout(function() {
            $('#' + toastId).fadeOut(300, function() {
                $(this).remove();
            });
        }, 4000);
    }

}); // Document ready closing
</script>