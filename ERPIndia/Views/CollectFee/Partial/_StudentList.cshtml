@model IEnumerable<ERPIndia.Models.CollectFee.DTOs.FeeCollectionDto>
@using ERPIndia.Class.Helper
@{
    Layout = null;
}
<link href="/Content/model.css" rel="stylesheet" />
<style>

    .btn-payfee {
        background-color: darkgreen;
        color: white;
        border: none;
        border-radius: 3px;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 5px;
        padding-bottom: 5px;
        text-decoration: none;
        display: inline-block;
        text-align: center;
    }

    .btn-ledger {
        background-color: darkred;
        color: white;
        border: none;
        border-radius: 3px;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 5px;
        padding-bottom: 5px;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        cursor: pointer;
    }
    .btn-sibling {
        background-color: navy;
        color: white;
        border: none;
        border-radius: 3px;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 5px;
        padding-bottom: 5px;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        cursor: pointer;
    }
    #feeDefaultersTable th {
        background-color: #ffeb3b; /* Yellow background for headers */
        position: sticky;
        color: black;
        top: 0;
        z-index: 10;
        font-weight: bold;
        text-align: center;
        border: 1px solid black;
    }

    #feeDefaultersTable td {
        border: 1px solid black;
    }

    #feeDefaultersTable {
        width: 100%;
    }
    
</style>

@if (Model != null && Model.Any())
{
    <div class="card">
        <div class="card-header bg-light">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="card-title mb-0">Fee Collection</h5>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="feeDefaultersTable" class="table table-bordered display" style="width:100%">
                    <thead>
                        <tr>
                            <th>Collect</th>
                            <th>Ledger</th>
                            <th>Cls</th>
                            <th width="5%">Sec</th>
                            <th>Student</th>
                            <th>Father</th>
                            <th>Gender</th>
                            <th>Cat</th>
                            <th>Mobile</th>
                            <th>Sibling</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in Model)
                        {
                            <tr data-student-id="@student.StudentId">
                                <td>
                                    <a href="@Url.Action("Collection", "collectfee", new { studentid = student.StudentId })" style="font-weight:bold; color:white" class="btn-payfee">
                                        ₹ &nbsp; Pay Fee
                                    </a>
                                </td>
                                <td>
                                    <a href="javascript:void(0)" style="font-weight:bold; color:white"
                                       onclick="openModal('@student.StudentId', '@Url.Action("StudentLedger", "Student", new { id = student.StudentId })', '@student.FirstName', 'ledger')"
                                       class="btn-ledger">
                                        <i class="fas fa-book"></i> Ledger
                                    </a>
                                </td>
                                <td>@student.ClassName</td>
                                <td>@student.SectionName</td>
                                <td>@student.FirstName</td>
                                <td>@(student.FatherName ?? "")</td>
                                <td>@(student.Gender ?? "")</td>
                                <td>@(student.CategoryName ?? "")</td>
                                <td>@student.Mobile</td>
                                <td>
                                    <a href="javascript:void(0)" class="btn-sibling" style="font-weight:bold; color:white"
                                       onclick="openModal('@student.StudentId', '@Url.Action("SiblingLedger", "CollectFee", new { id = student.StudentId, SessionID = student.SessionID, TenantID = student.TenantID })', '@student.FirstName', 'sibling')">
                                        <i class="fas fa-users"></i> Sibling
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
<script>
    $(function () {
        // Initialize DataTable
        var table = $('#feeDefaultersTable').DataTable({
            "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
            "pageLength": 10,
            "order": [[2, "asc"], [3, "asc"]], // Order by Class and Section
            "scrollX": false,
            "responsive": true,
            "dom": 'Blfrtip',
            "buttons": [
                {
                    extend: 'copy',
                    className: 'btn btn-sm btn-secondary'
                },
                {
                    extend: 'csv',
                    title: 'StudentList',
                    className: 'btn btn-sm btn-secondary'
                },
                {
                    extend: 'excel',
                    title: 'StudentList',
                    className: 'btn btn-sm btn-secondary'
                },
                {
                    extend: 'pdf',
                    title: 'StudentList',
                    className: 'btn btn-sm btn-secondary',
                    orientation: 'landscape'
                },
                {
                    extend: 'print',
                    title: 'StudentList',
                    className: 'btn btn-sm btn-secondary'
                }
            ]
        });
    });

    // Function to open modal with ledger view
    function openLedgerModal(studentId, url, studentName) {
        // Show loading indicator
        showLoadingIndicator("Loading " + studentName + "'s details...");

        // Set iframe source
        document.getElementById('contentIframe').src = url;

        // Display modal
        showModal();
    }

    // Function to open modal with sibling ledger view
    function openSiblingLedgerModal(studentId, url, studentName) {
        // Update modal title
        // Show loading indicator
        showLoadingIndicator("Loading " + studentName + "'s sibling details...");

        // Set iframe source
        document.getElementById('contentIframe').src = url;

        // Display modal
        showModal();
    }

    // Function to show loading indicator with custom message
    function showLoadingIndicator(message) {
        var loadingIndicator = document.getElementById('loadingIndicator');
        var loadingText = loadingIndicator.querySelector('.loading-text');

        // Update loading message if provided
        if (message) {
            loadingText.textContent = message;
        }

        // Show loading indicator
        loadingIndicator.style.display = 'flex';
    }

    // Function to hide loading indicator
    function hideLoadingIndicator() {
        var loadingIndicator = document.getElementById('loadingIndicator');
        loadingIndicator.style.display = 'none';
    }

    // Print function
    function printContent() {
        var iframe = document.getElementById('contentIframe');
        iframe.contentWindow.print();
    }

    // Calculate scrollbar width (to prevent layout shift)
    function getScrollbarWidth() {
        // Create a temporary div with a scrollbar
        const outer = document.createElement('div');
        outer.style.visibility = 'hidden';
        outer.style.overflow = 'scroll';
        document.body.appendChild(outer);

        // Create an inner div
        const inner = document.createElement('div');
        outer.appendChild(inner);

        // Calculate the width difference
        const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;

        // Clean up
        outer.parentNode.removeChild(outer);

        return scrollbarWidth;
    }

    // Function to show the modal - updated
    function showModal() {
        var modal = document.getElementById('ledgerModal');
        var body = document.body;
        var scrollbarWidth = getScrollbarWidth();

        // Store original body padding
        var originalPadding = parseInt(window.getComputedStyle(body).paddingRight, 10) || 0;

        // Add modal-open class to body to disable scrolling
        body.classList.add('modal-open');

        // Prevent layout shift from scrollbar disappearing
        body.style.paddingRight = (originalPadding + scrollbarWidth) + 'px';

        // Create backdrop if it doesn't exist
        if (!document.getElementById('modal-backdrop')) {
            var backdrop = document.createElement('div');
            backdrop.id = 'modal-backdrop';
            backdrop.className = 'modal-backdrop';
            document.body.appendChild(backdrop);
        }

        // Display modal with animation
        modal.style.display = 'block';

        // Force reflow before adding the show class
        modal.offsetHeight;

        setTimeout(function () {
            modal.classList.add('show');
        }, 50);

        // Disable all interactive elements behind the modal
        var allElements = document.querySelectorAll('button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])');
        allElements.forEach(function (element) {
            if (!modal.contains(element)) {
                element.setAttribute('data-original-tabindex', element.getAttribute('tabindex') || '0');
                element.setAttribute('tabindex', '-1');
                if (!element.hasAttribute('data-original-aria-hidden')) {
                    element.setAttribute('data-original-aria-hidden', element.getAttribute('aria-hidden') || 'false');
                }
                element.setAttribute('aria-hidden', 'true');
            }
        });

        // Set up iframe loading events
        var iframe = document.getElementById('contentIframe');

        // Create a timeout to handle cases where iframe might not load properly
        var loadTimeout = setTimeout(function () {
            hideLoadingIndicator();
        }, 15000); // 15 seconds timeout

        // Add load event listener to iframe
        iframe.onload = function () {
            // Clear the timeout
            clearTimeout(loadTimeout);

            // Hide loading indicator when iframe is loaded
            hideLoadingIndicator();

            try {
                // Try to access iframe content (may fail due to cross-origin policy)
                var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

                // Add event listener for iframe content changes if possible
                if (iframeDoc && iframeDoc.body) {
                    var observer = new MutationObserver(function (mutations) {
                        adjustIframeHeight();
                    });

                    observer.observe(iframeDoc.body, {
                        childList: true,
                        subtree: true,
                        attributes: true
                    });
                }
            } catch (e) {
                console.log("Cannot access iframe content due to cross-origin policy");
            }

            // Adjust iframe height initially
            adjustIframeHeight();
        };

        // Handle iframe loading errors
        iframe.onerror = function () {
            clearTimeout(loadTimeout);
            hideLoadingIndicator();
            alert("Error loading content. Please try again.");
        };
    }

    // Function to adjust iframe height
    function adjustIframeHeight() {
        var iframe = document.getElementById('contentIframe');
        var modalBody = iframe.closest('.modal-body');

        if (iframe && modalBody) {
            // Set iframe to fill the modal body
            iframe.style.height = '100%';
        }
    }

    // Function to close the modal - updated
    function closeModal() {
        var modal = document.getElementById('ledgerModal');
        var body = document.body;

        // Remove show class first (for animation)
        modal.classList.remove('show');

        // Hide modal after animation completes
        setTimeout(function () {
            modal.style.display = 'none';

            // Remove modal-open class from body
            body.classList.remove('modal-open');

            // Reset body padding
            body.style.paddingRight = '';

            // Remove backdrop
            var backdrop = document.getElementById('modal-backdrop');
            if (backdrop) {
                backdrop.parentNode.removeChild(backdrop);
            }

            // Re-enable all interactive elements
            var allElements = document.querySelectorAll('[data-original-tabindex]');
            allElements.forEach(function (element) {
                var originalTabIndex = element.getAttribute('data-original-tabindex');
                if (originalTabIndex === 'null') {
                    element.removeAttribute('tabindex');
                } else {
                    element.setAttribute('tabindex', originalTabIndex);
                }
                element.removeAttribute('data-original-tabindex');

                var originalAriaHidden = element.getAttribute('data-original-aria-hidden');
                if (originalAriaHidden) {
                    element.setAttribute('aria-hidden', originalAriaHidden);
                    element.removeAttribute('data-original-aria-hidden');
                }
            });

            // Show loading indicator for the next time the modal opens
            document.getElementById('loadingIndicator').style.display = 'flex';

            // Clear iframe to stop loading
            document.getElementById('contentIframe').src = '';
        }, 300);
    }

    // Close modal when clicking outside of it
    window.onclick = function (event) {
        var modal = document.getElementById('ledgerModal');
        if (event.target == modal) {
            closeModal();
        }
    }

    // Add window resize handler
    window.addEventListener('resize', function () {
        if (document.getElementById('ledgerModal').style.display === 'block') {
            adjustIframeHeight();
        }
    });
</script>