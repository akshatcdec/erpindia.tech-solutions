@model ERPIndia.TeacherManagement.Models.TeacherViewModel
@{
    ViewBag.Title = "Add Employee";
}

<style>
    .frames {
        background-color: #f8f9fa;
        cursor: pointer;
        min-height: 120px;
    }

        .frames:hover {
            background-color: #e9ecef;
        }

    .profile-upload {
        flex: 1;
    }

    .drag-upload-btn {
        position: relative;
        display: inline-block;
        cursor: pointer;
        background-color: #4a86e8;
        color: white;
        padding: 8px 16px;
        border-radius: 4px;
    }

        .drag-upload-btn input[type="file"] {
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

    .bootstrap-tagsinput {
        width: 100%;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        padding: 0.375rem 0.75rem;
        min-height: 38px;
    }

        .bootstrap-tagsinput .tag {
            background-color: #007bff;
            color: white;
            padding: 2px 8px;
            margin: 2px;
            border-radius: 3px;
            display: inline-block;
        }

            .bootstrap-tagsinput .tag [data-role="remove"] {
                margin-left: 5px;
                cursor: pointer;
            }

                .bootstrap-tagsinput .tag [data-role="remove"]:after {
                    content: "×";
                    padding: 0px 2px;
                    color: white;
                    font-weight: bold;
                }

        .bootstrap-tagsinput input {
            border: none;
            box-shadow: none;
            outline: none;
            background-color: transparent;
            padding: 0;
            margin: 0;
            width: auto !important;
            max-width: inherit;
        }

    .required:after {
        content: " *";
        color: red;
    }

    .input-icon {
        position: relative;
    }

    .input-icon-addon {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        pointer-events: none;
        color: #6c757d;
    }

    .form-control.datetimepicker {
        padding-right: 35px;
    }

    .avatar {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .avatar-sm {
        width: 32px;
        height: 32px;
    }

    .avatar-xxl {
        width: 120px;
        height: 120px;
    }

    .fs-16 {
        font-size: 16px;
    }

    .fs-12 {
        font-size: 12px;
    }

    /* Strong validation error styles */
    input.is-invalid,
    select.is-invalid,
    textarea.is-invalid,
    .form-control.is-invalid,
    .form-select.is-invalid {
        border: 2px solid #dc3545 !important;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
        background-color: #fff5f5 !important;
    }

        input.is-invalid:focus,
        select.is-invalid:focus,
        textarea.is-invalid:focus,
        .form-control.is-invalid:focus,
        .form-select.is-invalid:focus {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25) !important;
            outline: none !important;
        }

    .invalid-feedback {
        display: block;
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
        font-weight: 600;
    }

    /* Error icon in input */
    .form-control.is-invalid,
    .form-select.is-invalid {
        padding-right: calc(1.5em + 0.75rem);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }

    /* Salary Breakdown Styles */
    #salaryBreakdown {
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

        #salaryBreakdown:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        #salaryBreakdown strong {
            font-size: 14px;
        }

    #Payroll_BasicSalary:focus + .text-danger + #salaryBreakdown {
        border-color: #4a86e8 !important;
    }

    /* Animation for the breakdown values */
    #perDayAmount, #perHourAmount {
        transition: all 0.3s ease;
    }
</style>

<!-- Webcam Modal -->
<div class="modal fade" id="webcamModal" tabindex="-1" aria-labelledby="webcamModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="webcamModalLabel">Capture Photo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="camera-selection mb-3 text-center" style="display: none;">
                    <div class="btn-group" role="group" aria-label="Camera Selection">
                        <button type="button" class="btn btn-outline-primary" id="frontCameraBtn">Front Camera</button>
                        <button type="button" class="btn btn-outline-primary" id="backCameraBtn">Back Camera</button>
                    </div>
                </div>
                <div class="webcam-container">
                    <video id="webcam" autoplay playsinline width="100%" height="auto"></video>
                    <canvas id="webcamCanvas" style="display: none;"></canvas>
                    <img id="capturedImage" style="display: none; width: 100%;" alt="Captured photo" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="captureBtn" class="btn btn-primary">Capture</button>
                <button type="button" id="recaptureBtn" class="btn btn-outline-primary" style="display: none;">Recapture</button>
                <button type="button" id="saveImageBtn" class="btn btn-success" style="display: none;">Use Photo</button>
            </div>
        </div>
    </div>
</div>

<div class="content content-two">
    <div class="d-md-flex d-block align-items-center justify-content-between mb-3">
        <div class="my-auto mb-2">
            <h3 class="mb-1">Add Employee</h3>
        </div>
        <div class="d-flex align-items-center gap-2">
            <a href="@Url.Action("Index", "Teacher")" class="btn btn-secondary">
                <i class="ti ti-list"></i> View List
            </a>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm("Create", "Teacher", FormMethod.Post, new { enctype = "multipart/form-data", id = "employeeForm" }))
            {
                @Html.AntiForgeryToken()

                <!-- Test Button for Validation Styling -->
                <div class="alert alert-info mb-3" style="display:none">
                    <button type="button" class="btn btn-warning" onclick="testValidationStyles()">Test Red Borders (Click Me)</button>
                    <span class="ms-2">Click this button to test if red borders are working</span>
                </div>

                <!-- Validation Summary -->
                <div id="validation-summary" class="alert alert-danger mb-4" style="display: none;">
                    <strong>Please fix the following errors:</strong>
                    <ul id="validation-errors"></ul>
                </div>

                <!-- Academic Details -->
                <div class="card">
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <span class="bg-white avatar avatar-sm me-2 text-gray-7 flex-shrink-0">
                                <i class="ti ti-school fs-16"></i>
                            </span>
                            <h4 class="text-dark">Academic Details</h4>
                        </div>
                    </div>
                    <div class="card-body pb-1">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label required">Employee ID</label>
                                    @Html.TextBoxFor(m => m.Basic.TeacherCode, new { @class = "form-control", @readonly = "readonly", placeholder = "Auto-generated" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label required">Designation</label>
                                    @Html.DropDownListFor(x => x.Basic.DesignationId, Model.Basic.DesignationList, new { @class = "form-select", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.DesignationId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.DateOfJoining, "Joining Date", new { @class = "form-label required" })
                                    <div class="input-icon position-relative">
                                        @Html.TextBoxFor(m => m.Basic.DateOfJoining, new { @class = "form-control", @type = "date", placeholder = "DD/MM/YYYY", required = "required" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Basic.DateOfJoining, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.Qualification, "Qualification", new { @class = "form-label required" })
                                    @Html.TextBoxFor(m => m.Basic.Qualification, new { @class = "form-control", maxlength = "100", placeholder = "e.g., B.Ed, M.A.", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.Qualification, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.WorkExperience, "Work Experience", new { @class = "form-label required" })
                                    @Html.TextBoxFor(m => m.Basic.WorkExperience, new { @class = "form-control", maxlength = "50", placeholder = "e.g., 5 Years", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.WorkExperience, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Experience Details</label>
                                    @Html.TextBoxFor(m => m.Basic.ExperienceDetails, new { @class = "form-control", maxlength = "200", placeholder = "Previous experience details" })
                                </div>
                            </div>
                            <div class="col-md-4 teacher-fields" style="display:none;">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.ClassId, "Class", new { @class = "form-label required" })
                                    @Html.DropDownListFor(m => m.Basic.ClassId, Model.Basic.ClassList ?? new List<SelectListItem>(), "Select Class", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.Basic.ClassId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4 teacher-fields" style="display:none;">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.SubjectId, "Subject", new { @class = "form-label required" })
                                    @Html.DropDownListFor(m => m.Basic.SubjectId, Model.Basic.SubjectList ?? new List<SelectListItem>(), "Select Subject", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.Basic.SubjectId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4 teacher-fields" style="display:none;">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.OtherSubject, "Other Subject", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Basic.OtherSubject, new { @class = "form-control", placeholder = "Additional subjects", maxlength = "500" })
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Note</label>
                                    @Html.TextBoxFor(m => m.Basic.Notes, new { @class = "form-control", placeholder = "Additional notes about academic background", rows = "3", maxlength = "200" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Employee Details -->
                <div class="card">
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <span class="bg-white avatar avatar-sm me-2 text-gray-7 flex-shrink-0">
                                <i class="ti ti-user fs-16"></i>
                            </span>
                            <h4 class="text-dark">Employee Details</h4>
                        </div>
                    </div>
                    <div class="card-body pb-1">
                        <!-- Photo Upload Section -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Photo</label>
                                    <div class="d-flex align-items-center flex-wrap row-gap-3">
                                        <div class="d-flex align-items-center justify-content-center avatar avatar-xxl border border-dashed me-2 flex-shrink-0 text-dark frames" id="photoPreview">
                                            <i class="ti ti-photo-plus fs-16"></i>
                                        </div>
                                        <div class="profile-upload">
                                            <div class="profile-uploader d-flex align-items-center">
                                                <div class="drag-upload-btn mb-3">
                                                    Upload
                                                    <input type="file" name="photoFile" id="photoFile" class="form-control image-sign" accept="image/*">
                                                </div>
                                                <button type="button" class="btn btn-secondary mb-3 ms-2" data-bs-toggle="modal" data-bs-target="#webcamModal">
                                                    <i class="ti ti-camera"></i> Use Camera
                                                </button>
                                                <a href="javascript:void(0);" class="btn btn-primary mb-3 ms-2" id="removePhotoBtn">Remove</a>
                                            </div>
                                            <p class="fs-12">Upload image size less than 100KB Format JPG or use camera</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label required">Employee Name</label>
                                    @Html.TextBoxFor(m => m.Basic.FirstName, new { @class = "form-control", maxlength = "50", placeholder = "Enter full name", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.FirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.FatherName, "Father's Name", new { @class = "form-label required" })
                                    @Html.TextBoxFor(m => m.Basic.FatherName, new { @class = "form-control", maxlength = "50", placeholder = "Enter father's name", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.FatherName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.MotherName, "Mother's Name", new { @class = "form-label required" })
                                    @Html.TextBoxFor(m => m.Basic.MotherName, new { @class = "form-control", maxlength = "50", placeholder = "Enter mother's name", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.MotherName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.Gender, "Gender", new { @class = "form-label required" })
                                    @Html.DropDownListFor(m => m.Basic.Gender, Model.Basic.GenderList ?? new List<SelectListItem>(), new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.Gender, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label required">Religion</label>
                                    @Html.DropDownListFor(m => m.Basic.Religion, new List<SelectListItem> {
                                        new SelectListItem { Value = "", Text = "Select Religion" },
                                        new SelectListItem { Value = "Hindu", Text = "Hindu" },
                                        new SelectListItem { Value = "Muslim", Text = "Muslim" },
                                        new SelectListItem { Value = "Christian", Text = "Christian" },
                                        new SelectListItem { Value = "Sikh", Text = "Sikh" },
                                        new SelectListItem { Value = "Buddhist", Text = "Buddhist" },
                                        new SelectListItem { Value = "Jain", Text = "Jain" },
                                        new SelectListItem { Value = "Other", Text = "Other" }
                                    }, new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.Religion, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.BloodGroup, "Blood Group", new { @class = "form-label" })
                                    @Html.DropDownListFor(m => m.Basic.BloodGroup, Model.Basic.BloodGroupList ?? new List<SelectListItem>(), new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.DateOfBirth, "Date of Birth", new { @class = "form-label required" })
                                    <div class="input-icon position-relative">
                                        @Html.TextBoxFor(m => m.Basic.DateOfBirth, new { @class = "form-control", @type = "date", placeholder = "DD/MM/YYYY", required = "required" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Basic.DateOfBirth, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.MaritalStatus, "Marital Status", new { @class = "form-label required" })
                                    @Html.DropDownListFor(m => m.Basic.MaritalStatus, Model.Basic.MaritalStatusList ?? new List<SelectListItem>(), new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.MaritalStatus, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.PrimaryContactNumber, "Mobile No", new { @class = "form-label required" })
                                    @Html.TextBoxFor(m => m.Basic.PrimaryContactNumber, new { @class = "form-control numeric-only", maxlength = "10", placeholder = "10-digit mobile", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.PrimaryContactNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.Email, "Email", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Basic.Email, new { @class = "form-control", type = "email", maxlength = "100", placeholder = "employee@example.com" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.PANNumber, "PAN Number", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Basic.PANNumber, new { @class = "form-control", maxlength = "20", placeholder = "PAN number" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.AadharNumber, "Aadhar Number", new { @class = "form-label required" })
                                    @Html.TextBoxFor(m => m.Basic.AadharNumber, new { @class = "form-control numeric-only", maxlength = "12", placeholder = "12-digit Aadhar", required = "required" })
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.CurrentAddress, "Address", new { @class = "form-label required" })
                                    @Html.TextBoxFor(m => m.Basic.CurrentAddress, new { @class = "form-control", maxlength = "150", placeholder = "Complete address", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Basic.CurrentAddress, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Government IDs -->
                <div class="card" style="display:none">
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <span class="bg-white avatar avatar-sm me-2 text-gray-7 flex-shrink-0">
                                <i class="ti ti-id fs-16"></i>
                            </span>
                            <h4 class="text-dark">Government IDs</h4>
                        </div>
                    </div>
                    <div class="card-body pb-1">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.UANNo, "UAN Number", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Basic.UANNo, new { @class = "form-control", maxlength = "50", placeholder = "UAN number" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.PFNO, "PF Number", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Basic.PFNO, new { @class = "form-control", maxlength = "50", placeholder = "PF number" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Basic.NPSNo, "NPS Number", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Basic.NPSNo, new { @class = "form-control", maxlength = "50", placeholder = "NPS number" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Payroll.EPFNo, "EPF Number", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Payroll.EPFNo, new { @class = "form-control", maxlength = "30", placeholder = "EPF number" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Payroll -->
                <div class="card">
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <span class="bg-white avatar avatar-sm me-2 text-gray-7 flex-shrink-0">
                                <i class="ti ti-cash fs-16"></i>
                            </span>
                            <h4 class="text-dark">Payroll</h4>
                        </div>
                    </div>
                    <div class="card-body pb-1">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Payroll.BasicSalary, "Basic Salary", new { @class = "form-label required" })
                                    <div class="input-group">
                                        <span class="input-group-text">₹</span>
                                        @Html.TextBoxFor(m => m.Payroll.BasicSalary, new { @class = "form-control numeric-only", maxlength = "6", required = "required", placeholder = "Enter monthly salary" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Payroll.BasicSalary, "", new { @class = "text-danger" })

                                    <!-- Salary Breakdown Display -->
                                    <div id="salaryBreakdown" class="mt-2 p-2 bg-light rounded" style="display: none; border: 1px solid #dee2e6;">
                                        <small class="text-muted d-block">
                                            <i class="ti ti-calculator me-1"></i>
                                            <strong>Salary Breakdown:</strong>
                                        </small>
                                        <div class="row mt-1">
                                            <div class="col-6">
                                                <small class="text-primary">
                                                    <i class="ti ti-calendar-due me-1"></i>
                                                    Per Day: <strong>₹<span id="perDayAmount">0</span></strong>
                                                </small>
                                            </div>
                                            <div class="col-6">
                                                <small class="text-info">
                                                    <i class="ti ti-clock me-1"></i>
                                                    Per Hour: <strong>₹<span id="perHourAmount">0</span></strong>
                                                </small>
                                            </div>
                                        </div>
                                        <small class="text-muted mt-1 d-block" style="font-size: 11px;">
                                            <em>Based on 30 days/month & 8 hours/day</em>
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4" style="display:none">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Payroll.WorkLocation, "Work Location", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Payroll.WorkLocation, new { @class = "form-control", maxlength = "100", placeholder = "Work location" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Late Fine (Per Hour)</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₹</span>
                                        @Html.TextBoxFor(m => m.Payroll.LateFinePerHour, new { @class = "form-control numeric-only", maxlength = "3" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label required">Time-in</label>
                                    @Html.TextBoxFor(m => m.Basic.TimeIn, new { @class = "form-control", type = "time", Value = "09:00", required = "required" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label required">Time-Out</label>
                                    @Html.TextBoxFor(m => m.Basic.TimeOut, new { @class = "form-control", type = "time", Value = "17:00", required = "required" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Payroll.DateOfLeaving, "Date of Leaving", new { @class = "form-label" })
                                    <div class="input-icon position-relative">
                                        @Html.TextBoxFor(m => m.Payroll.DateOfLeaving, new { @class = "form-control", @type = "date", placeholder = "DD/MM/YYYY" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Note</label>
                                    <div class="input-icon position-relative">
                                        @Html.TextBoxFor(m => m.Payroll.PayrollNote, new { @class = "form-control", maxlength = "100", placeholder = "Additional payroll notes" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Leaves -->
                <div class="card" style="display:none">
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <span class="bg-white avatar avatar-sm me-2 text-gray-7 flex-shrink-0">
                                <i class="ti ti-calendar-off fs-16"></i>
                            </span>
                            <h4 class="text-dark">Leaves</h4>
                        </div>
                    </div>
                    <div class="card-body pb-1">
                        <div class="row">
                            <div class="col-md-2">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Leaves.MedicalLeaves, "Medical", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Leaves.MedicalLeaves, new { @class = "form-control numeric-only", placeholder = "0", Value = "0" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Leaves.CasualLeaves, "Casual", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Leaves.CasualLeaves, new { @class = "form-control numeric-only", placeholder = "0", Value = "0" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Leaves.MaternityLeaves, "Maternity", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Leaves.MaternityLeaves, new { @class = "form-control numeric-only", placeholder = "0", Value = "0" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Leaves.SickLeaves, "Sick", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Leaves.SickLeaves, new { @class = "form-control numeric-only", placeholder = "0", Value = "0" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Leaves.EarnedLeaves, "Earned", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Leaves.EarnedLeaves, new { @class = "form-control numeric-only", placeholder = "0", Value = "0" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bank Details -->
                <div class="card">
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <span class="bg-white avatar avatar-sm me-2 text-gray-7 flex-shrink-0">
                                <i class="ti ti-building-bank fs-16"></i>
                            </span>
                            <h4 class="text-dark">Bank Details</h4>
                        </div>
                    </div>
                    <div class="card-body pb-1">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.BankDetails.BankName, "Bank Name", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.BankDetails.BankName, new { @class = "form-control", maxlength = "50", placeholder = "Bank name" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.BankDetails.AccountName, "Holder Name", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.BankDetails.AccountName, new { @class = "form-control", maxlength = "50", placeholder = "Account holder name" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.BankDetails.AccountNumber, "Account No", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.BankDetails.AccountNumber, new { @class = "form-control numeric-only", maxlength = "30", placeholder = "Account number" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.BankDetails.IFSCCode, "IFSC Code", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.BankDetails.IFSCCode, new { @class = "form-control", maxlength = "15", placeholder = "IFSC code" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.BankDetails.BranchName, "Bank Branch", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.BankDetails.BranchName, new { @class = "form-control", maxlength = "30", placeholder = "Branch name" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">UPI ID</label>
                                    @Html.TextBoxFor(m => m.BankDetails.UPIID, new { @class = "form-control", maxlength = "50", placeholder = "name@upi" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Documents -->
                <div class="card">
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <span class="bg-white avatar avatar-sm me-2 text-gray-7 flex-shrink-0">
                                <i class="ti ti-file fs-16"></i>
                            </span>
                            <h4 class="text-dark">Documents</h4>
                        </div>
                    </div>
                    <div class="card-body pb-1">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <p class="text-muted">Upload PDF document only – Max. Size 5MB</p>
                                    <div class="d-flex align-items-center flex-wrap">
                                        <div class="btn btn-primary drag-upload-btn mb-2 me-2">
                                            <i class="ti ti-file-upload me-1"></i>Upload Documents
                                            <input type="file" name="documentFiles" id="documentFiles" class="form-control" multiple accept=".pdf,.doc,.docx,.jpg,.png">
                                        </div>
                                        <p class="mb-2" id="documentFileNames">No files selected</p>
                                    </div>
                                    <div id="selectedFilesList" class="mt-2"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Social Links -->
                <div class="card">
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <span class="bg-white avatar avatar-sm me-2 text-gray-7 flex-shrink-0">
                                <i class="ti ti-social fs-16"></i>
                            </span>
                            <h4 class="text-dark">Social Links</h4>
                        </div>
                    </div>
                    <div class="card-body pb-1">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.SocialMedia.Facebook, "Facebook", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.SocialMedia.Facebook, new { @class = "form-control", maxlength = "150", placeholder = "https://facebook.com/username" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.SocialMedia.Twitter, "Twitter", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.SocialMedia.Twitter, new { @class = "form-control", maxlength = "150", placeholder = "https://twitter.com/username" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.SocialMedia.Instagram, "Instagram", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.SocialMedia.Instagram, new { @class = "form-control", maxlength = "150", placeholder = "https://instagram.com/username" })
                                </div>
                            </div>
                            <div class="col-md-6" style="display:none">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.SocialMedia.LinkedIn, "LinkedIn", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.SocialMedia.LinkedIn, new { @class = "form-control", maxlength = "150", placeholder = "https://linkedin.com/in/username" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.SocialMedia.YouTube, "Youtube", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.SocialMedia.YouTube, new { @class = "form-control", maxlength = "150", placeholder = "https://youtube.com/@username" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Status and Submit -->
                <div class="card">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <div class="mb-3 mb-md-0">
                                    @Html.LabelFor(m => m.Basic.Status, "Status", new { @class = "form-label" })
                                    @Html.DropDownListFor(m => m.Basic.Status, Model.Basic.StatusList ?? new List<SelectListItem> {
                                        new SelectListItem { Value = "Active", Text = "Active", Selected = true },
                                         new SelectListItem { Value = "Inactive", Text = "Inactive" },
                                    }, new { @class = "form-select" })
                                </div>
                            </div>
                            <div class="col-md-6 text-end">
                                <button type="button" class="btn btn-light me-2" onclick="window.location.href='@Url.Action("Index", "Teacher")'">Cancel</button>
                                <button type="button" class="btn btn-primary" onclick="validateAndSubmit()">Save Employee</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    // Webcam functionality with improved compression
    let stream = null;

    // Improved image compression function
    function compressImage(canvas, maxSizeKB = 100) {
        return new Promise((resolve) => {
            let quality = 0.9;
            let width = canvas.width;
            let height = canvas.height;

            function attemptCompression() {
                // Create a temporary canvas for resizing if needed
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');

                // Calculate new dimensions if image is too large
                const maxDimension = 800;
                let newWidth = width;
                let newHeight = height;

                if (width > maxDimension || height > maxDimension) {
                    if (width > height) {
                        newHeight = (maxDimension / width) * height;
                        newWidth = maxDimension;
                    } else {
                        newWidth = (maxDimension / height) * width;
                        newHeight = maxDimension;
                    }
                }

                tempCanvas.width = newWidth;
                tempCanvas.height = newHeight;
                tempCtx.drawImage(canvas, 0, 0, newWidth, newHeight);

                tempCanvas.toBlob((blob) => {
                    const sizeKB = blob.size / 1024;

                    if (sizeKB <= maxSizeKB || quality <= 0.1) {
                        resolve(blob);
                    } else {
                        quality -= 0.1;
                        if (quality > 0.1) {
                            attemptCompression();
                        } else {
                            // If still too large, reduce dimensions further
                            width = width * 0.8;
                            height = height * 0.8;
                            quality = 0.5;
                            attemptCompression();
                        }
                    }
                }, 'image/jpeg', quality);
            }

            attemptCompression();
        });
    }

    // Webcam modal handlers
    $('#webcamModal').on('shown.bs.modal', async function () {
        try {
            stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    width: { ideal: 640 },
                    height: { ideal: 480 }
                }
            });
            document.getElementById('webcam').srcObject = stream;
        } catch (err) {
            console.error('Error accessing webcam:', err);
            alert('Unable to access camera. Please ensure camera permissions are granted.');
        }
    });

    $('#webcamModal').on('hidden.bs.modal', function () {
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
            stream = null;
        }
        $('#capturedImage').hide();
        $('#webcam').show();
        $('#captureBtn').show();
        $('#recaptureBtn').hide();
        $('#saveImageBtn').hide();
    });

    // Capture photo
    $('#captureBtn').on('click', function () {
        const video = document.getElementById('webcam');
        const canvas = document.getElementById('webcamCanvas');
        const context = canvas.getContext('2d');

        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0);

        const imageUrl = canvas.toDataURL('image/jpeg');
        $('#capturedImage').attr('src', imageUrl).show();
        $('#webcam').hide();
        $('#captureBtn').hide();
        $('#recaptureBtn').show();
        $('#saveImageBtn').show();
    });

    // Recapture
    $('#recaptureBtn').on('click', function () {
        $('#capturedImage').hide();
        $('#webcam').show();
        $('#captureBtn').show();
        $('#recaptureBtn').hide();
        $('#saveImageBtn').hide();
    });

    // Save compressed image
    $('#saveImageBtn').on('click', async function () {
        const canvas = document.getElementById('webcamCanvas');

        // Compress the image to under 100KB
        const compressedBlob = await compressImage(canvas, 100);

        // Show compression result
        const sizeKB = (compressedBlob.size / 1024).toFixed(2);
        console.log('Compressed image size:', sizeKB + 'KB');

        // Convert blob to file
        const compressedFile = new File([compressedBlob], 'employee_photo.jpg', {
            type: 'image/jpeg',
            lastModified: Date.now()
        });

        // Create a DataTransfer to update the file input
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(compressedFile);

        // Update the file input
        const fileInput = document.getElementById('photoFile');
        fileInput.files = dataTransfer.files;

        // Update preview
        const reader = new FileReader();
        reader.onload = function (e) {
            $('#photoPreview').html(`<img src="${e.target.result}" style="width:100%; height:100%; object-fit:cover; border-radius: 4px;" />`);
        };
        reader.readAsDataURL(compressedFile);

        // Close modal
        $('#webcamModal').modal('hide');
    });

    $(document).ready(function () {
        // Salary breakdown calculation
        function calculateSalaryBreakdown() {
            const salaryInput = $('#Payroll_BasicSalary');
            const salary = parseFloat(salaryInput.val()) || 0;

            if (salary > 0) {
                // Calculate per day (salary / 30 days)
                const perDay = salary / 30;

                // Calculate per hour (per day / 8 hours)
                const perHour = perDay / 8;

                // Update the display
                $('#perDayAmount').text(perDay.toFixed(2));
                $('#perHourAmount').text(perHour.toFixed(2));

                // Automatically populate the Late Fine Per Hour field
                $('#Payroll_LateFinePerHour').val(Math.round(perHour));

                // Add visual feedback to Late Fine field
                $('#Payroll_LateFinePerHour').css({
                    'background-color': '#f0f8ff',
                    'border-color': '#4a86e8'
                });

                setTimeout(function () {
                    $('#Payroll_LateFinePerHour').css({
                        'background-color': '',
                        'border-color': ''
                    });
                }, 500);

                // Show the breakdown div with animation
               // $('#salaryBreakdown').slideDown(300);

                // Add some visual feedback
                $('#salaryBreakdown').css({
                    'background-color': '#f0f8ff',
                    'border-color': '#4a86e8'
                });

                // Reset colors after animation
                setTimeout(function () {
                    $('#salaryBreakdown').css({
                        'background-color': '#f8f9fa',
                        'border-color': '#dee2e6'
                    });
                }, 500);
            } else {
                // Hide the breakdown if salary is 0 or empty
                //$('#salaryBreakdown').slideUp(300);
                // Clear the Late Fine Per Hour field
                $('#Payroll_LateFinePerHour').val('');
            }
        }

        // Trigger calculation on input
        $('#Payroll_BasicSalary').on('input', function () {
            calculateSalaryBreakdown();
        });

        // Also trigger on blur for better UX
        $('#Payroll_BasicSalary').on('blur', function () {
            calculateSalaryBreakdown();
        });

        // Check on page load if there's already a value
        if ($('#Payroll_BasicSalary').val()) {
            calculateSalaryBreakdown();
        }

        // Form validation with enhanced visual feedback
        $('#employeeForm').on('submit', function (e) {
            console.log('Form submit triggered'); // Debug log

            let isValid = true;
            let errors = [];

            // Clear previous errors
            $('.is-invalid').removeClass('is-invalid');
            $('.invalid-feedback').remove();
            // Clear inline styles from previous validation
            $('input, select, textarea').each(function () {
                $(this).removeAttr('style');
            });

            // Required field validation
            const requiredFields = [
                { field: '#Basic_FirstName', name: 'Employee Name' },
                { field: '#Basic_DesignationId', name: 'Designation' },
                { field: '#Basic_DateOfJoining', name: 'Joining Date' },
                { field: '#Basic_Qualification', name: 'Qualification' },
                { field: '#Basic_WorkExperience', name: 'Work Experience' },
                { field: '#Basic_FatherName', name: "Father's Name" },
                { field: '#Basic_MotherName', name: "Mother's Name" },
                { field: '#Basic_Gender', name: 'Gender' },
                { field: '#Basic_Religion', name: 'Religion' },
                { field: '#Basic_DateOfBirth', name: 'Date of Birth' },
                { field: '#Basic_MaritalStatus', name: 'Marital Status' },
                { field: '#Basic_PrimaryContactNumber', name: 'Mobile Number' },
                { field: '#Basic_AadharNumber', name: 'Aadhar Number' },
                { field: '#Basic_CurrentAddress', name: 'Address' },
                { field: '#Payroll_BasicSalary', name: 'Basic Salary' },
                { field: '#Basic_TimeIn', name: 'Time-in' },
                { field: '#Basic_TimeOut', name: 'Time-out' }
            ];

            console.log('Checking required fields...'); // Debug log

            requiredFields.forEach(item => {
                const element = $(item.field);
                const domElement = element[0]; // Get the DOM element

                if (!element.val() || element.val().trim() === '' || element.val() === 'Select') {
                    // Method 1: Add class
                    element.addClass('is-invalid');

                    // Method 2: Force inline styles using setAttribute (highest priority)
                    if (domElement) {
                        domElement.setAttribute('style',
                            'border: 1px solid #dc3545 !important;' +
                            'background-color: #ffebee !important;' +
                            'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;' +
                            'outline: 2px solid #dc3545 !important;' +
                            'outline-offset: -1px !important;'
                        );
                    }

                    // Add error message
                    element.after(`<div class="invalid-feedback" style="display: block !important; color: #dc3545;font-size: 12px;">${item.name} is required</div>`);
                    errors.push(`${item.name} is required`);
                    isValid = false;
                }
            });

            // Teacher-specific validation
            const designationText = $('#Basic_DesignationId option:selected').text().toLowerCase();
            if (designationText.includes('teacher')) {
                if (!$('#Basic_ClassId').val() || $('#Basic_ClassId').val() === 'Select Class') {
                    const classElement = $('#Basic_ClassId')[0];
                    $('#Basic_ClassId').addClass('is-invalid');
                    if (classElement) {
                        classElement.setAttribute('style',
                            'border: 1px solid #dc3545 !important;' +
                            'background-color: #ffebee !important;' +
                            'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                        );
                    }
                    $('#Basic_ClassId').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Class is required for teachers</div>');
                    errors.push('Class is required for teachers');
                    isValid = false;
                }
                if (!$('#Basic_SubjectId').val() || $('#Basic_SubjectId').val() === 'Select Subject') {
                    const subjectElement = $('#Basic_SubjectId')[0];
                    $('#Basic_SubjectId').addClass('is-invalid');
                    if (subjectElement) {
                        subjectElement.setAttribute('style',
                            'border: 1px solid #dc3545 !important;' +
                            'background-color: #ffebee !important;' +
                            'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                        );
                    }
                    $('#Basic_SubjectId').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Subject is required for teachers</div>');
                    errors.push('Subject is required for teachers');
                    isValid = false;
                }
            }

            // Mobile number validation
            const mobile = $('#Basic_PrimaryContactNumber').val();
            if (mobile && mobile.length !== 10) {
                const mobileElement = $('#Basic_PrimaryContactNumber')[0];
                $('#Basic_PrimaryContactNumber').addClass('is-invalid');
                if (mobileElement) {
                    mobileElement.setAttribute('style',
                        'border: 1px solid #dc3545 !important;' +
                        'background-color: #ffebee !important;' +
                        'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                    );
                }
                $('#Basic_PrimaryContactNumber').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Mobile number must be exactly 10 digits</div>');
                errors.push('Mobile number must be exactly 10 digits');
                isValid = false;
            }

            // Aadhar validation
            const aadhar = $('#Basic_AadharNumber').val();
            if (aadhar && aadhar.length !== 12) {
                const aadharElement = $('#Basic_AadharNumber')[0];
                $('#Basic_AadharNumber').addClass('is-invalid');
                if (aadharElement) {
                    aadharElement.setAttribute('style',
                        'border: 1px solid #dc3545 !important;' +
                        'background-color: #ffebee !important;' +
                        'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                    );
                }
                $('#Basic_AadharNumber').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Aadhar number must be exactly 12 digits</div>');
                errors.push('Aadhar number must be exactly 12 digits');
                isValid = false;
            }

            // Email validation
            const email = $('#Basic_Email').val();
            if (email) {
                const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                if (!emailRegex.test(email)) {
                    const emailElement = $('#Basic_Email')[0];
                    $('#Basic_Email').addClass('is-invalid');
                    if (emailElement) {
                        emailElement.setAttribute('style',
                            'border: 1px solid #dc3545 !important;' +
                            'background-color: #ffebee !important;' +
                            'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                        );
                    }
                    $('#Basic_Email').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Please enter a valid email address</div>');
                    errors.push('Invalid email format');
                    isValid = false;
                }
            }

            // PAN validation
            const pan = $('#Basic_PANNumber').val();
            if (pan) {
                const panRegex = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/;
                if (!panRegex.test(pan.toUpperCase())) {
                    const panElement = $('#Basic_PANNumber')[0];
                    $('#Basic_PANNumber').addClass('is-invalid');
                    if (panElement) {
                        panElement.setAttribute('style',
                            'border: 1px solid #dc3545 !important;' +
                            'background-color: #ffebee !important;' +
                            'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                        );
                    }
                    $('#Basic_PANNumber').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Invalid PAN format (e.g., ABCDE1234F)</div>');
                    errors.push('Invalid PAN format');
                    isValid = false;
                }
            }
            const basicSalary = $('#Payroll_BasicSalary').val();
            if (basicSalary !== '' && (parseFloat(basicSalary) === 0 || parseInt(basicSalary) === 0)) {
                const salaryElement = $('#Payroll_BasicSalary')[0];
                $('#Payroll_BasicSalary').addClass('is-invalid');
                if (salaryElement) {
                    salaryElement.setAttribute('style',
                        'border: 2px solid #dc3545 !important;' +
                        'box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;' +
                        'background-color: #fff5f5 !important;'
                    );
                }
                $('#Payroll_BasicSalary').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; font-size: 12px;">Basic Salary cannot be zero</div>');
                errors.push('Basic Salary cannot be zero');
                isValid = false;
            }
            // IFSC validation
            const ifsc = $('#BankDetails_IFSCCode').val();
            if (ifsc) {
                const ifscRegex = /^[A-Z]{4}0[A-Z0-9]{6}$/;
                if (!ifscRegex.test(ifsc.toUpperCase())) {
                    const ifscElement = $('#BankDetails_IFSCCode')[0];
                    $('#BankDetails_IFSCCode').addClass('is-invalid');
                    if (ifscElement) {
                        ifscElement.setAttribute('style',
                            'border: 1px solid #dc3545 !important;' +
                            'background-color: #ffebee !important;' +
                            'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                        );
                    }
                    $('#BankDetails_IFSCCode').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Invalid IFSC code format</div>');
                    errors.push('Invalid IFSC format');
                    isValid = false;
                }
            }

            console.log('Error count:', errors.length); // Debug log

            if (!isValid) {
                e.preventDefault();
                e.stopPropagation(); // Stop event bubbling

                console.log('Validation failed, preventing submit'); // Debug log

                // Show validation summary
                const errorList = errors.map(err => `<li>${err}</li>`).join('');
                $('#validation-errors').html(errorList);
                //$('#validation-summary').show();

                // Scroll to first error
                const firstError = $('.is-invalid:first');
                if (firstError.length) {
                    $('html, body').animate({
                        scrollTop: firstError.offset().top - 100
                    }, 500);
                }

                return false;
            }

            console.log('Validation passed, form will submit'); // Debug log
            // If validation passes, form will submit normally
        });

        // Status change handler for Date of Leaving requirement
        $('#Basic_Status').change(function () {
            const status = $(this).val();
            const dateOfLeavingLabel = $('label[for="Payroll_DateOfLeaving"]');

            if (status === 'Inactive') {
                // Make Date of Leaving required
                dateOfLeavingLabel.addClass('required');
                $('#Payroll_DateOfLeaving').attr('required', 'required');

                // Add visual indicator
                $('#Payroll_DateOfLeaving').css({
                    'border': '1px solid #ffc107',
                    'background-color': '#fff8e1'
                });

                // Show a tooltip message
                if (!$('#dateOfLeavingNote').length) {
                    $('#Payroll_DateOfLeaving').after('<small id="dateOfLeavingNote" class="text-warning">Required when status is Inactive</small>');
                }
            } else {
                // Remove required status
                dateOfLeavingLabel.removeClass('required');
                $('#Payroll_DateOfLeaving').removeAttr('required');

                // Remove visual indicator
                $('#Payroll_DateOfLeaving').css({
                    'border': '',
                    'background-color': ''
                });

                // Remove tooltip
                $('#dateOfLeavingNote').remove();
            }
        });

        // Show/Hide Teacher fields
        $('#Basic_DesignationId').change(function () {
            var selectedText = $(this).find('option:selected').text().toLowerCase();
            if (selectedText.includes('teacher')) {
                $('.teacher-fields').fadeIn();
            } else {
                $('.teacher-fields').fadeOut();
                $('#Basic_ClassId').val('');
                $('#Basic_SubjectId').val('');
            }
        });

        // Check on page load
        var initialDesignationText = $('#Basic_DesignationId').find('option:selected').text().toLowerCase();
        if (initialDesignationText.includes('teacher')) {
            $('.teacher-fields').show();
        }

        // Enhanced photo file upload with better compression
        $('#photoFile').change(function () {
            const file = this.files[0];
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                const input = this;
                const maxSizeKB = 100;
                const sizeKB = file.size / 1024;

                reader.onload = function (e) {
                    const img = new Image();
                    img.onload = function () {
                        const canvas = document.createElement('canvas');
                        const ctx = canvas.getContext('2d');

                        // Start with original dimensions
                        canvas.width = img.width;
                        canvas.height = img.height;
                        ctx.drawImage(img, 0, 0);

                        // Compress the image
                        compressImage(canvas, 100).then(function (compressedBlob) {
                            const compressedFile = new File([compressedBlob], file.name, {
                                type: 'image/jpeg',
                                lastModified: Date.now()
                            });

                            const dataTransfer = new DataTransfer();
                            dataTransfer.items.add(compressedFile);
                            input.files = dataTransfer.files;

                            const compressedReader = new FileReader();
                            compressedReader.onload = function (e) {
                                $('#photoPreview').html('<img src="' + e.target.result + '" style="width:100%; height:100%; object-fit:cover; border-radius: 4px;" />');
                            };
                            compressedReader.readAsDataURL(compressedFile);

                            // Log compression result
                            const finalSizeKB = (compressedFile.size / 1024).toFixed(2);
                            console.log('Photo compressed from', sizeKB.toFixed(2) + 'KB to', finalSizeKB + 'KB');
                        });
                    };
                    img.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });

        // Remove Photo
        $('#removePhotoBtn').click(function () {
            $('#photoFile').val('');
            $('#photoPreview').html('<i class="ti ti-photo-plus fs-16"></i>');
        });

        // Enhanced document file handling with size validation
        $('#documentFiles').change(function () {
            var files = $(this)[0].files;
            var fileList = $('#selectedFilesList');
            var validFiles = [];
            var invalidFiles = [];
            const maxSizeMB = 5; // 5MB max size

            fileList.empty();

            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var fileSizeMB = file.size / 1024 / 1024;

                if (fileSizeMB > maxSizeMB) {
                    invalidFiles.push({
                        name: file.name,
                        size: fileSizeMB.toFixed(2)
                    });
                } else {
                    validFiles.push(file);
                }
            }

            // Show invalid files alert
            if (invalidFiles.length > 0) {
                var alertMsg = 'The following files exceed 5MB limit and will not be uploaded:\n';
                invalidFiles.forEach(function (file) {
                    alertMsg += '\n• ' + file.name + ' (' + file.size + ' MB)';
                });
                alert(alertMsg);

                // Create new FileList with only valid files
                if (validFiles.length > 0) {
                    const dataTransfer = new DataTransfer();
                    validFiles.forEach(file => dataTransfer.items.add(file));
                    this.files = dataTransfer.files;
                } else {
                    this.value = ''; // Clear input if no valid files
                }
            }

            // Update display
            if (validFiles.length > 0) {
                $('#documentFileNames').text(validFiles.length + ' file(s) selected');
                validFiles.forEach(function (file) {
                    var fileSize = (file.size / 1024 / 1024).toFixed(2);
                    fileList.append('<div class="badge bg-light text-dark me-2 mb-1">' +
                        file.name + ' (' + fileSize + ' MB)</div>');
                });
            } else {
                $('#documentFileNames').text('No files selected');
            }
        });

        // Numeric only
        $('.numeric-only').on('input', function () {
            this.value = this.value.replace(/[^0-9]/g, '');
        });

        // Clear validation on input
        $(document).on('input change', 'input.is-invalid, select.is-invalid, textarea.is-invalid', function () {
            const $this = $(this);
            const val = $this.val();

            // Special handling for Basic Salary
            if ($this.attr('id') === 'Payroll_BasicSalary') {
                if (val && val.trim() !== '' && parseFloat(val) > 0) {
                    $this.removeClass('is-invalid');
                    this.removeAttribute('style');
                    $this.next('.invalid-feedback').remove();
                }
            } else {
                // Standard validation clearing for other fields
                if (val && val.trim() !== '' && val !== 'Select') {
                    $this.removeClass('is-invalid');
                    this.removeAttribute('style');
                    $this.next('.invalid-feedback').remove();
                }
            }

            // Update validation summary if all errors are cleared
            if ($('.is-invalid').length === 0) {
                $('#validation-summary').hide();
            }
        });

        // Convert PAN and IFSC to uppercase
        $('#Basic_PANNumber, #BankDetails_IFSCCode').on('blur', function () {
            if ($(this).val()) {
                $(this).val($(this).val().toUpperCase());
            }
        });
    });

    // Test function to verify red borders are working
    function testValidationStyles() {
        // Test on first 3 text inputs
        const testFields = ['#Basic_FirstName', '#Basic_FatherName', '#Basic_MotherName'];

        testFields.forEach(function (fieldId) {
            const element = $(fieldId)[0];
            if (element) {
                // Apply the exact same styles as validation
                element.setAttribute('style',
                    'border: 1px solid #dc3545 !important;' +
                    'background-color: #ffebee !important;' +
                    'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;' +
                    'outline: 2px solid #dc3545 !important;' +
                    'outline-offset: -1px !important;'
                );
                $(element).after('<div class="invalid-feedback" style="display: block !important; color: #dc3545;  font-size: 14px;">TEST: This field shows red border</div>');
            }
        });

        alert('Red borders applied to first 3 fields. If you see red borders, validation styling is working. If not, there may be a browser or CSS issue.');

        // Remove test styles after 5 seconds
        setTimeout(function () {
            testFields.forEach(function (fieldId) {
                const element = $(fieldId)[0];
                if (element) {
                    element.removeAttribute('style');
                    $(element).next('.invalid-feedback').remove();
                }
            });
        }, 5000);
    }

    // Main validation and submit function
    function validateAndSubmit() {
        console.log('ValidateAndSubmit called');

        let isValid = true;
        let errors = [];

        // Clear previous errors
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').remove();
        $('input, select, textarea').each(function () {
            $(this).removeAttr('style');
        });

        // Required field validation
        const requiredFields = [
            { field: '#Basic_FirstName', name: 'Employee Name' },
            { field: '#Basic_DesignationId', name: 'Designation' },
            { field: '#Basic_DateOfJoining', name: 'Joining Date' },
            { field: '#Basic_Qualification', name: 'Qualification' },
            { field: '#Basic_WorkExperience', name: 'Work Experience' },
            { field: '#Basic_FatherName', name: "Father's Name" },
            { field: '#Basic_MotherName', name: "Mother's Name" },
            { field: '#Basic_Gender', name: 'Gender' },
            { field: '#Basic_Religion', name: 'Religion' },
            { field: '#Basic_DateOfBirth', name: 'Date of Birth' },
            { field: '#Basic_MaritalStatus', name: 'Marital Status' },
            { field: '#Basic_PrimaryContactNumber', name: 'Mobile Number' },
            { field: '#Basic_AadharNumber', name: 'Aadhar Number' },
            { field: '#Basic_CurrentAddress', name: 'Address' },
            { field: '#Payroll_BasicSalary', name: 'Basic Salary' },
            { field: '#Basic_TimeIn', name: 'Time-in' },
            { field: '#Basic_TimeOut', name: 'Time-out' }
        ];

        // Check each required field
        requiredFields.forEach(item => {
            const element = $(item.field);
            const domElement = element[0];

            if (!element.val() || element.val().trim() === '' || element.val() === '' || element.val() === null) {
                console.log('Invalid field found:', item.field, 'Value:', element.val());

                // Add class
                element.addClass('is-invalid');

                // Force inline styles - same as test function that works
                if (domElement) {
                    domElement.setAttribute('style',
                        'border: 1px solid #dc3545 !important;' +
                        'background-color: #ffebee !important;' +
                        'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;' +
                        'outline: 2px solid #dc3545 !important;' +
                        'outline-offset: -1px !important;'
                    );
                }

                // Add error message
                element.after(`<div class="invalid-feedback" style="display: block !important; color: #dc3545;  font-size: 14px;">${item.name} is required</div>`);
                errors.push(`${item.name} is required`);
                isValid = false;
            }
        });

        // Status-based validation for Date of Leaving
        const status = $('#Basic_Status').val();
        if (status === 'Inactive') {
            const dateOfLeaving = $('#Payroll_DateOfLeaving').val();
            if (!dateOfLeaving || dateOfLeaving.trim() === '') {
                const leavingElement = $('#Payroll_DateOfLeaving')[0];
                $('#Payroll_DateOfLeaving').addClass('is-invalid');
                if (leavingElement) {
                    leavingElement.setAttribute('style',
                        'border: 1px solid #dc3545 !important;' +
                        'background-color: #ffebee !important;' +
                        'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;' +
                        'outline: 2px solid #dc3545 !important;' +
                        'outline-offset: -1px !important;'
                    );
                }
                $('#Payroll_DateOfLeaving').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; font-size: 14px;">Date of Leaving is required when status is Inactive</div>');
                errors.push('Date of Leaving is required when status is Inactive');
                isValid = false;
            }
        }

        // Teacher-specific validation
        const designationText = $('#Basic_DesignationId option:selected').text().toLowerCase();
        if (designationText.includes('teacher')) {
            if (!$('#Basic_ClassId').val() || $('#Basic_ClassId').val() === '' || $('#Basic_ClassId').val() === 'Select Class') {
                const classElement = $('#Basic_ClassId')[0];
                $('#Basic_ClassId').addClass('is-invalid');
                if (classElement) {
                    classElement.setAttribute('style',
                        'border: 1px solid #dc3545 !important;' +
                        'background-color: #ffebee !important;' +
                        'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                    );
                }
                $('#Basic_ClassId').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Class is required for teachers</div>');
                errors.push('Class is required for teachers');
                isValid = false;
            }
            if (!$('#Basic_SubjectId').val() || $('#Basic_SubjectId').val() === '' || $('#Basic_SubjectId').val() === 'Select Subject') {
                const subjectElement = $('#Basic_SubjectId')[0];
                $('#Basic_SubjectId').addClass('is-invalid');
                if (subjectElement) {
                    subjectElement.setAttribute('style',
                        'border: 1px solid #dc3545 !important;' +
                        'background-color: #ffebee !important;' +
                        'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                    );
                }
                $('#Basic_SubjectId').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Subject is required for teachers</div>');
                errors.push('Subject is required for teachers');
                isValid = false;
            }
        }

        // Mobile number validation
        const mobile = $('#Basic_PrimaryContactNumber').val();
        if (mobile && mobile.length !== 10) {
            const mobileElement = $('#Basic_PrimaryContactNumber')[0];
            $('#Basic_PrimaryContactNumber').addClass('is-invalid');
            if (mobileElement) {
                mobileElement.setAttribute('style',
                    'border: 1px solid #dc3545 !important;' +
                    'background-color: #ffebee !important;' +
                    'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                );
            }
            $('#Basic_PrimaryContactNumber').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Mobile number must be exactly 10 digits</div>');
            errors.push('Mobile number must be exactly 10 digits');
            isValid = false;
        }

        // Aadhar validation
        const aadhar = $('#Basic_AadharNumber').val();
        if (aadhar && aadhar.length !== 12) {
            const aadharElement = $('#Basic_AadharNumber')[0];
            $('#Basic_AadharNumber').addClass('is-invalid');
            if (aadharElement) {
                aadharElement.setAttribute('style',
                    'border: 1px solid #dc3545 !important;' +
                    'background-color: #ffebee !important;' +
                    'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                );
            }
            $('#Basic_AadharNumber').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Aadhar number must be exactly 12 digits</div>');
            errors.push('Aadhar number must be exactly 12 digits');
            isValid = false;
        }

        // Email validation
        const email = $('#Basic_Email').val();
        if (email) {
            const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            if (!emailRegex.test(email)) {
                const emailElement = $('#Basic_Email')[0];
                $('#Basic_Email').addClass('is-invalid');
                if (emailElement) {
                    emailElement.setAttribute('style',
                        'border: 1px solid #dc3545 !important;' +
                        'background-color: #ffebee !important;' +
                        'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                    );
                }
                $('#Basic_Email').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Please enter a valid email address</div>');
                errors.push('Invalid email format');
                isValid = false;
            }
        }

        // PAN validation
        const pan = $('#Basic_PANNumber').val();
        if (pan) {
            const panRegex = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/;
            if (!panRegex.test(pan.toUpperCase())) {
                const panElement = $('#Basic_PANNumber')[0];
                $('#Basic_PANNumber').addClass('is-invalid');
                if (panElement) {
                    panElement.setAttribute('style',
                        'border: 1px solid #dc3545 !important;' +
                        'background-color: #ffebee !important;' +
                        'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                    );
                }
                $('#Basic_PANNumber').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Invalid PAN format (e.g., ABCDE1234F)</div>');
                errors.push('Invalid PAN format');
                isValid = false;
            }
        }
        const basicSalary = $('#Payroll_BasicSalary').val();
        if (basicSalary !== '' && (parseFloat(basicSalary) === 0 || parseInt(basicSalary) === 0)) {
            const salaryElement = $('#Payroll_BasicSalary')[0];
            $('#Payroll_BasicSalary').addClass('is-invalid');
            if (salaryElement) {
                salaryElement.setAttribute('style',
                    'border: 1px solid #dc3545 !important;' +
                    'background-color: #ffebee !important;' +
                    'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;' +
                    'outline: 2px solid #dc3545 !important;' +
                    'outline-offset: -1px !important;'
                );
            }
            $('#Payroll_BasicSalary').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; font-size: 14px;">Basic Salary cannot be zero</div>');
            errors.push('Basic Salary cannot be zero');
            isValid = false;
        }

        // IFSC validation
        const ifsc = $('#BankDetails_IFSCCode').val();
        if (ifsc) {
            const ifscRegex = /^[A-Z]{4}0[A-Z0-9]{6}$/;
            if (!ifscRegex.test(ifsc.toUpperCase())) {
                const ifscElement = $('#BankDetails_IFSCCode')[0];
                $('#BankDetails_IFSCCode').addClass('is-invalid');
                if (ifscElement) {
                    ifscElement.setAttribute('style',
                        'border: 1px solid #dc3545 !important;' +
                        'background-color: #ffebee !important;' +
                        'box-shadow: 0 0 8px rgba(220, 53, 69, 0.5) !important;'
                    );
                }
                $('#BankDetails_IFSCCode').after('<div class="invalid-feedback" style="display: block !important; color: #dc3545; ">Invalid IFSC code format</div>');
                errors.push('Invalid IFSC format');
                isValid = false;
            }
        }

        console.log('Validation complete. Is valid:', isValid, 'Errors:', errors);

        if (!isValid) {
            // Show validation summary
            const errorList = errors.map(err => `<li>${err}</li>`).join('');
            $('#validation-errors').html(errorList);
            //$('#validation-summary').show();

            // Scroll to first error
            const firstError = $('.is-invalid:first');
            if (firstError.length) {
                $('html, body').animate({
                    scrollTop: firstError.offset().top - 100
                }, 500);
            }
        } else {
            // If validation passes, submit the form
            console.log('All validation passed, submitting form...');
            $('#employeeForm').submit();
        }
    }
</script>