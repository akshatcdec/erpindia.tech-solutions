@model ERPK12Models.ViewModel.Enquiry.EnquiryListViewModel
@{
    ViewBag.Title = "Student Enquiry Register";
}
<style>
    .cc {
        font-weight: bold;
    }

    .student-link-excel {
        color: blue;
        text-decoration: none;
        font-weight: bold;
        font-size: 14px;
    }

    .payment-status.paid {
        color: #28a745;
        font-weight: bold;
    }

    .payment-status.unpaid {
        color: #dc3545;
        font-weight: bold;
    }

    .interest-pending {
        background-color: #6c757d;
    }

    .interest-hot {
        background-color: #dc3545;
    }

    .interest-excellent {
        background-color: #28a745;
    }

    .interest-verygood {
        background-color: #20c997;
    }

    .interest-normal {
        background-color: #17a2b8;
    }

    .interest-notinterested {
        background-color: #ffc107;
    }

    .interest-negative {
        background-color: #fd7e14;
    }

    .interest-bad {
        background-color: #dc3545;
    }

    .interest-completed {
        background-color: #343a40;
    }
</style>
<style>
    /* CSS for your PDF Modal */
    #PdfModal .modal-dialog {
        max-width: 90%;
        width: 90%;
        height: 90%;
        margin: 2% auto;
    }

    #PdfModal .modal-content {
        height: 100%;
        border: 5px;
        border-radius: 8px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    #PdfModal .modal-body {
        padding: 10px;
        height: 100%;
        position: relative;
        overflow: hidden;
    }

    /* Iframe styling */
    .modal-iframe {
        width: 100%;
        height: 99vh;
        border: none;
        display: none; /* Hidden by default until loaded */
    }

    /* Loading indicator styling */
    .loading-container {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        z-index: 10;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 0 auto 15px auto;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .loading-text {
        color: #6c757d;
        font-size: 16px;
        font-weight: 500;
    }

    /* Close button styling */
    .modal-close {
        z-index: 1050;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        border: none;
    }

        .modal-close:hover {
            background-color: #dc3545 !important;
            transform: scale(1.1);
            transition: all 0.2s ease;
        }

    /* Error message styling */
    #pdfError {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        #PdfModal .modal-dialog {
            max-width: 95%;
            width: 95%;
            margin: 1% auto;
        }

        .modal-iframe {
            height: 70vh;
        }

        .modal-close {
            width: 35px;
            height: 35px;
            font-size: 18px;
        }
    }

    @@media (max-width: 576px) {
        #PdfModal .modal-dialog {
            max-width: 100%;
            width: 100%;
            margin: 0;
            height: 100%;
        }

        #PdfModal .modal-content {
            height: 100vh;
            border-radius: 0;
        }

        .modal-iframe {
            height: calc(100vh - 60px);
        }
    }

    /* Print styles */
    @@media print {
        #PdfModal {
            display: none !important;
        }
    }

    /* Animation for modal appearance */
    #PdfModal.fade .modal-dialog {
        transition: transform 0.3s ease-out;
        transform: scale(0.9);
    }

    #PdfModal.show .modal-dialog {
        transform: scale(1);
    }

    PdfModal .modal-dialog {
        /* Keep your existing: max-width: 90%; width: 90%; */
        height: 96vh !important; /* 96% instead of 90% */
        margin: 2vh auto !important; /* 2vh top/bottom instead of 2% */
    }

    #PdfModal .modal-content {
        height: 100% !important;
    }

    #PdfModal .modal-body {
        /* Keep your existing: padding: 10px; */
        height: calc(100% - 20px) !important;
    }

    .modal-iframe {
        height: 100% !important; /* Instead of 99vh */
    }
</style>
<style>
@@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
}

@@keyframes bounceIn {
    0% {
        transform: scale(0.3);
        opacity: 0;
    }
    50% {
        transform: scale(1.05);
    }
    70% {
        transform: scale(0.9);
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}

@@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.loading-spinner {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 3px solid #ffffff;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s ease-in-out infinite;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}
</style>
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-light">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <span class="bg-white avatar avatar-sm me-2 text-gray-7 flex-shrink-0">
                                <i class="fas fa-graduation-cap fs-16"></i>
                            </span>
                            <h4 class="text-dark mb-0">
                                Student Enquiry Register
                            </h4>
                        </div>
                        <div>
                            <a class="btn" href="javascript:void(0)" onclick="openPopup('-1', 'form')">
                                <i class="fa fa-download"></i>
                                Download Form
                            </a>
                            <strong class="student-link-word">|</strong>
                            <a class="btn" style="background-color: #003366; color: white;" href="javascript:void(0)"
                               onclick="openCreateModal()">
                                <i class="fas fa-user-plus me-1"></i>
                                Add Enquiry
                            </a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <h5 class="card-title mb-3">Search Criteria</h5>

                    <div id="validationMessage" class="alert alert-warning d-none">
                        Please fill in at least one search criteria before searching.
                    </div>

                    <!-- AJAX Search Form -->
                    @using (Html.BeginForm("Search", "Enquiry", FormMethod.Post, new { id = "searchForm", @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        <div class="row g-2">
                            <div class="col-md-1" style="flex-grow: 1.5;">
                                <label class="form-label">From Date</label>
                                @Html.TextBoxFor(m => m.Filters.FromDate, new { @class = "form-control form-control-sm", @type = "date" })
                            </div>
                            <div class="col-md-1" style="flex-grow: 1.5;">
                                <label class="form-label">To Date</label>
                                @Html.TextBoxFor(m => m.Filters.EndDate, new { @class = "form-control form-control-sm", @type = "date" })
                            </div>
                            <div class="col-md-1" style="flex-grow: 2;">
                                <label class="form-label">Class</label>
                                @Html.DropDownListFor(m => m.Filters.SelectedClass, Model.Filters.ClassList, new { @class = "form-control form-control-sm" })
                            </div>
                            <div class="col-md-1" style="flex-grow: 2;">
                                <label class="form-label">Interest Level</label>
                                @Html.DropDownListFor(m => m.Filters.InterestLevel, new SelectList(new[]
                                {
                                    "Hot", "Excellent", "Very Good", "Normal", "Not Interested", "Negative", "Bad", "Completed", "Pending"
                                }), "All", new { @class = "form-control form-control-sm" })
                            </div>
                            <div class="col-md-1" style="flex-grow: 1.5;">
                                <label class="form-label">Follow-up</label>
                                @Html.TextBoxFor(m => m.Filters.FollowupDate, new { @class = "form-control form-control-sm", @type = "date" })
                            </div>
                            <div class="col-md-1" style="flex-grow: 1.5;">
                                <label class="form-label">Next Follow-up</label>
                                @Html.TextBoxFor(m => m.Filters.NextFollowup, new { @class = "form-control form-control-sm", @type = "date" })
                            </div>
                            <div class="col-md-1">
                                <label class="form-label">&nbsp;</label>
                                <button type="submit" class="btn btn-primary btn-sm w-100">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                            <div class="col-md-1">
                                <label class="form-label">&nbsp;</label>
                                <button type="button" class="btn btn-secondary btn-sm w-100" onclick="clearFilters()">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Success/Error Messages -->
    <div id="alertContainer">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show mt-3">
                @TempData["SuccessMessage"]
                <button type="button" class="close" data-dismiss="alert">&times;</button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show mt-3">
                @TempData["ErrorMessage"]
                <button type="button" class="close" data-dismiss="alert">&times;</button>
            </div>
        }
    </div>

    <!-- Search Results Container -->
    <div id="searchResultContainer" class="mt-4">
        @if (Model.Enquiries != null && Model.Enquiries.Any())
        {
            @Html.Partial("_EnquirySearchResults", Model)
        }
        else
        {
            <div class="card">
                <div class="card-body text-center py-5">
                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Use the search criteria above to find student enquiries</h5>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal Container -->
<div class="modal fade" id="enquiryModal" tabindex="-1" role="dialog" aria-labelledby="enquiryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="enquiryModalLabel"></h5>
            </div>
            <div id="modalContent">
                <!-- Dynamic content will be loaded here -->
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="PdfModal" tabindex="-1" role="dialog" aria-labelledby="PdfModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <!-- Close button with proper styling -->
                <button type="button" class="modal-close btn btn-danger" data-dismiss="modal" aria-label="Close" onclick="closepdfModal()" style="position: absolute; top: 10px; right: 10px; background-color: red; color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center;">
                    <span aria-hidden="true">&times;</span>
                </button>
                <div id="loadingIndicator" class="loading-container">
                    <div class="spinner"></div>
                    <div class="loading-text">Loading data...</div>
                </div>
                <iframe id="contentIframe" class="modal-iframe" src="" scrolling="no" frameborder="0" style="overflow: hidden;"></iframe>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="admissionConfirmModal" tabindex="-1" aria-labelledby="admissionConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="border-radius: 15px; border: none; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);">
            <div class="modal-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px 15px 0 0; border: none;">
                <h5 class="modal-title" id="admissionConfirmModalLabel">
                    <i class="fas fa-graduation-cap me-2"></i>
                    Confirm Admission
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="padding: 2rem; text-align: center;">
                <div style="font-size: 4rem; color: #ffc107; margin-bottom: 1rem; animation: pulse 2s infinite;">
                    <i class="fas fa-question-circle"></i>
                </div>
                <h4 class="mb-3">Confirm Student Admission</h4>
                <p class="lead mb-4">Do you want to save the admission for <strong id="studentNameConfirm"></strong>?</p>
                <p class="text-muted">This action will finalize the admission process, and after this you can edit the student from the list.</p>

                <div class="d-flex justify-content-center gap-3 mt-4">
                    <button type="button" class="btn btn-success btn-lg px-4" id="confirmAdmissionBtn" onclick="processAdmission()">
                        <i class="fas fa-check me-2"></i>
                        Yes, Save Admission
                    </button>
                    <button type="button" class="btn btn-secondary btn-lg px-4" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Admission Success Modal -->
<div class="modal fade" id="admissionSuccessModal" tabindex="-1" aria-labelledby="admissionSuccessModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="border-radius: 20px; border: none; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-align: center; padding: 2rem; box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);">
            <div style="width: 80px; height: 80px; background: #4CAF50; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 1.5rem; animation: bounceIn 0.8s ease-out;">
                <i class="fas fa-check" style="font-size: 2.5rem; color: white;"></i>
            </div>

            <h2 style="font-size: 2.5rem; font-weight: bold; margin-bottom: 1rem; animation: fadeInUp 0.8s ease-out 0.3s both;">Congratulations!</h2>

            <p style="font-size: 1.2rem; margin-bottom: 2rem; opacity: 0.9; animation: fadeInUp 0.8s ease-out 0.6s both;">
                Your admission has been successfully<br>
                completed. Thanks!
            </p>

            <div style="animation: fadeInUp 0.8s ease-out 0.9s both;">
                <button type="button" class="btn" style="background: #f44336; border: none; padding: 12px 30px; border-radius: 25px; font-weight: 600; margin: 0 10px; color: white;" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        // AJAX Form submission
        $('#searchForm').on('submit', function(e) {
            e.preventDefault();

            $.ajax({
                url: '@Url.Action("Search", "Enquiry")',
                type: 'POST',
                data: $(this).serialize(),
                beforeSend: function() {
                    // Remove any existing refresh overlays
                    $('.refresh-overlay').remove();

                    // Show loading indicator
                    $('#searchResultContainer').html(
                        '<div class="card"><div class="card-body text-center py-5">' +
                        '<div class="spinner-border text-primary" role="status">' +
                        '<span class="visually-hidden">Loading...</span></div>' +
                        '<h5 class="text-muted mt-3">Searching enquiries...</h5></div></div>'
                    );
                },
                success: function(result) {
                    // Load partial view results
                    $('#searchResultContainer').html(result);
                    // Re-bind event handlers for the new content
                    bindTableActions();
                },
                error: function() {
                    $('#searchResultContainer').html(
                        '<div class="alert alert-danger">An error occurred while searching enquiries.</div>'
                    );
                }
            });
        });

        // Handle modal cleanup when closed
        $('#enquiryModal').on('hidden.bs.modal', function () {
            $(this).find('#modalContent').html(''); // Clear modal content
            $('body').removeClass('modal-open'); // Ensure body class is removed
            $('.modal-backdrop').remove(); // Remove any lingering backdrops
            $('body').css('padding-right', ''); // Reset body padding
        });

        // Handle modal cleanup for Bootstrap 4 compatibility
        $('#enquiryModal').on('hidden.modal', function () {
            $(this).find('#modalContent').html(''); // Clear modal content
            $('body').removeClass('modal-open'); // Ensure body class is removed
            $('.modal-backdrop').remove(); // Remove any lingering backdrops
            $('body').css('padding-right', ''); // Reset body padding
        });
    });

    // Clear filters function
    function clearFilters() {
        $('#searchForm')[0].reset();
        $('#searchResultContainer').html(
            '<div class="card"><div class="card-body text-center py-5">' +
            '<i class="fas fa-search fa-3x text-muted mb-3"></i>' +
            '<h5 class="text-muted">Use the search criteria above to find student enquiries</h5></div></div>'
        );
    }

    // Bind actions for dynamically loaded content
    function bindTableActions() {
        // Re-bind dropdown toggles and other interactive elements
        $('[data-bs-toggle="dropdown"]').dropdown();
    }

    // Function to show alerts
    function showAlert(message, type) {
        var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
        var alertHtml = '<div class="alert ' + alertClass + ' alert-dismissible fade show">' +
                        message +
                        '' +
                        '</div>';
        $('#alertContainer').html(alertHtml);

        // Auto-hide alert after 5 seconds
        setTimeout(function() {
            $('.alert').fadeOut('slow', function() {
                $(this).remove();
            });
        }, 5000);
    }

    // Open Create Modal
    function openCreateModal() {
        $.ajax({
            url: '@Url.Action("Create", "Enquiry")',
            type: 'GET',
            success: function(data) {
                $('#modalContent').html(data);
                $('#enquiryModalLabel').text('Add Student Enquiry');
                $('#enquiryModal').modal('show');
                bindFormSubmit('createEnquiryForm');
            },
            error: function() {
                showAlert('Error loading create form', 'error');
            }
        });
    }

    // Open Edit Modal
    function openEditModal(id) {
        $.ajax({
            url: '@Url.Action("Edit", "Enquiry")/' + id,
            type: 'GET',
            success: function(data) {
                $('#modalContent').html(data);
                $('#enquiryModalLabel').text('Edit Student Enquiry');
                $('#enquiryModal').modal('show');

                // Wait a moment for the content to be rendered then bind the form
                setTimeout(function() {
                    bindFormSubmit('editEnquiryForm');
                }, 100);
            },
            error: function() {
                showAlert('Error loading edit form', 'error');
            }
        });
    }
    function openPopup(id) {
    $.ajax({
        url: '@Url.Action("GenerateReceipt", "EnquiryForm")/',
        type: 'GET',
        success: function(data) {
            $('#modalContent').html(data);
            $('#enquiryModalLabel').text('Edit Student Enquiry');
            $('#enquiryModal').modal('show');

            // Wait a moment for the content to be rendered then bind the form
            setTimeout(function() {
                bindFormSubmit('editEnquiryForm');
            }, 100);
        },
        error: function() {
            showAlert('Error loading edit form', 'error');
        }
    });
}
    // Open Follow-up Modal
    function openFollowUpModal(id) {
        console.log('Opening follow-up modal for ID:', id);

        // Validate ID before making request
        if (!id || id === 0 || id === '0' || id === '') {
            showAlert('Error: Invalid enquiry ID provided', 'error');
            return;
        }

        $.ajax({
            url: '@Url.Action("FollowUp", "Enquiry")/' + id,
            type: 'GET',
            success: function(data) {
                $('#modalContent').html(data);
                $('#enquiryModalLabel').text('Follow-up');
                $('#enquiryModal').modal('show');

                // Wait for content to load, then bind the form normally
                setTimeout(function() {
                    console.log('Binding follow-up form submission');
                    bindFormSubmit('followUpForm');
                }, 100);
            },
            error: function(xhr, status, error) {
                console.error('Follow-up modal load error:', status, error);
                if (xhr.status === 404) {
                    showAlert('Enquiry not found. Please refresh the page and try again.', 'error');
                } else {
                    showAlert('Error loading follow-up form: ' + (xhr.responseText || error), 'error');
                }
            }
        });
    }

    // Bind form submit for AJAX
    function bindFormSubmit(formId) {
        // Check if form exists before binding
        if ($('#' + formId).length === 0) {
            console.warn('Form with ID ' + formId + ' not found');
            return;
        }

        console.log('Binding form submission for:', formId);

        $('#' + formId).off('submit').on('submit', function(e) {
            e.preventDefault();

            var form = $(this);
            var url = form.attr('action');

            console.log('Submitting form:', formId, 'to URL:', url);

            $.ajax({
                url: url,
                type: 'POST',
                data: form.serialize(),
                dataType: 'json', // Expect JSON response first
                success: function(response) {
                    console.log('Form submission success for', formId, ':', response);

                    if (response && response.success) {
                        $('#enquiryModal').modal('hide');
                        showAlert(response.message, 'success');
                        location.reload();
                        // Always refresh the search results after successful submission
                        console.log('Triggering refresh for form:', formId);
                        setTimeout(function() {
                            refreshSearchResults();
                        }, 1000);
                    } else {
                        // Show error message but keep modal open
                        if (response && response.message) {
                            showAlert(response.message, 'error');
                        } else {
                            showAlert('An error occurred while processing your request', 'error');
                        }
                    }
                },
                error: function(xhr, status, error) {
                    console.log('Form submission error for', formId, ':', status, error);

                    // If JSON parsing fails, try to handle as HTML (validation errors)
                    if (xhr.responseText && xhr.responseText.indexOf('<') !== -1) {
                        console.log('Received validation errors, reloading form content');
                        // Response is HTML (validation errors)
                        $('#modalContent').html(xhr.responseText);
                        // Re-bind the form after updating content
                        setTimeout(function() {
                            bindFormSubmit(formId);
                        }, 100);
                    } else {
                        // Real error
                        showAlert('An error occurred while processing your request', 'error');
                    }
                }
            });
        });
    }

    // Function to refresh search results
    function refreshSearchResults() {
        // Check if there are existing search results
        var hasResults = $('#searchResultContainer .card .table').length > 0;
        var hasEmptyState = $('#searchResultContainer .card-body .fa-search').length > 0;

        if (hasResults) {
            // There are existing results, refresh with current search criteria
            console.log('Refreshing existing search results...');

            // Show loading overlay on existing results
            $('#searchResultContainer').append(
                '<div class="refresh-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; ' +
                'background: rgba(255,255,255,0.8); display: flex; align-items: center; justify-content: center; z-index: 10;">' +
                '<div class="text-center"><div class="spinner-border text-primary" role="status"></div>' +
                '<div class="mt-2 text-muted">Refreshing...</div></div></div>'
            );

            $('#searchForm').submit();
        } else if (!hasEmptyState) {
            // No results and no empty state, run a basic search to show all enquiries
            console.log('Running default search to show updated results...');
            runDefaultSearch();
        } else {
            // Empty state is showing, user hasn't searched yet
            console.log('No search performed yet, showing success message only');

            // Show a small notification about the successful update
            $('#searchResultContainer').prepend(
                '<div class="alert alert-success alert-dismissible fade show mt-3">' +
                'Operation completed successfully! Use the search form above to view updated enquiries.' +
                '<button type="button" class="close" data-dismiss="alert">&times;</button></div>'
            );
        }
    }

    // Function to run a default search (show all recent enquiries)
    function runDefaultSearch() {
        // Clear the search form first
        $('#searchForm')[0].reset();

        // Run search with empty criteria (should return recent enquiries)
        $.ajax({
            url: '@Url.Action("Search", "Enquiry")',
            type: 'POST',
            data: $('#searchForm').serialize(),
            beforeSend: function() {
                $('#searchResultContainer').html(
                    '<div class="card"><div class="card-body text-center py-5">' +
                    '<div class="spinner-border text-primary" role="status"></div>' +
                    '<h5 class="text-muted mt-3">Loading updated enquiries...</h5></div></div>'
                );
            },
            success: function(result) {
                $('#searchResultContainer').html(result);
                bindTableActions();

                // Add a subtle notification
                $('#searchResultContainer').prepend(
                    '<div class="alert alert-info alert-dismissible fade show">' +
                    '<i class="fas fa-info-circle me-1"></i>Showing recent enquiries (last 30 days)' +
                    '<button type="button" class="close" data-dismiss="alert">&times;</button></div>'
                );

                // Scroll to results
                $('html, body').animate({
                    scrollTop: $('#searchResultContainer').offset().top - 100
                }, 500);

                // Auto-hide the notification after 5 seconds
                setTimeout(function() {
                    $('.alert-info').fadeOut();
                }, 5000);
            },
            error: function() {
                $('#searchResultContainer').html(
                    '<div class="alert alert-warning">Enquiry updated successfully! Please use the search form above to view updated results.</div>'
                );
            }
        });
    }

    // Delete Enquiry
    function deleteEnquiry(id) {
        if (confirm('Are you sure you want to delete this enquiry?')) {
            $.ajax({
                url: '@Url.Action("Delete", "Enquiry")',
                type: 'POST',
                data: {
                    id: id,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').first().val()
                },
                success: function(response) {
                    if (response.success) {
                        showAlert(response.message, 'success');
                        setTimeout(function() {
                            $('#searchForm').submit(); // Refresh search results
                        }, 1500);
                    } else {
                        showAlert(response.message || 'Error deleting enquiry', 'error');
                    }
                },
                error: function() {
                    showAlert('An error occurred while deleting the enquiry', 'error');
                }
            });
        }
    }

    // Global function to close modal properly (can be called from partial views)
    function closeModal() {
        // Clear modal content
        $('#modalContent').html('');

        // Close modal using both Bootstrap 4 and 5 methods
        $('#enquiryModal').modal('hide');

        // Ensure cleanup happens
        setTimeout(function() {
            $('.modal-backdrop').remove();
            $('body').removeClass('modal-open');
            $('body').css('padding-right', '');
        }, 300);
    }

    // Make functions globally accessible for modals
    window.refreshSearchResults = refreshSearchResults;
    window.showAlert = showAlert;
    window.closeModal = closeModal;
</script>
<script>
    // Function to open PDF in your existing PdfModal
function openPopup(enquiryId, pdfType = 'form') {
    // Validation: Check if enquiry ID is valid
    if (!enquiryId || enquiryId === 0 || enquiryId === '0' || enquiryId === '') {
        showAlert('Error: Invalid enquiry ID provided', 'error');
        return false;
    }

    console.log('Opening PDF for ID:', enquiryId, 'Type:', pdfType);

    // Construct PDF URL based on type
    let pdfUrl = '';
    switch(pdfType) {
        case 'form':
        // Generate blank form (no enquiryId needed)
        pdfUrl = '@Url.Action("Generate", "EnquiryForm")';
        break;

    case 'receipt':
        // Generate receipt with enquiryId as query parameter ✅
        pdfUrl = '@Url.Action("GenerateReceipt", "EnquiryForm")' + '?enquiryId=' + enquiryId;
        break;

    case 'report':
        // If you have a report action (using query parameter) ✅
        pdfUrl = '@Url.Action("GenerateReport", "EnquiryForm")' + '?enquiryId=' + enquiryId;
        break;

    default:
        // Generate pre-filled form with enquiryId ✅
        pdfUrl = '@Url.Action("Generate", "EnquiryForm")' + '?enquiryId=' + enquiryId;
    }

    // Show modal and loading indicator
    $('#PdfModal').modal('show');
    $('#loadingIndicator').show();
    $('#contentIframe').hide();

    // First validate if PDF exists
    $.ajax({
        url: pdfUrl,
        type: 'HEAD',
        timeout: 10000, // 10 second timeout
        success: function(data, status, xhr) {
            // Check if response is actually a PDF
            const contentType = xhr.getResponseHeader('Content-Type');

            if (contentType && (contentType.includes('application/pdf') || contentType.includes('pdf'))) {
                // PDF is valid, load it in iframe
                loadPDFInIframe(pdfUrl);
            } else {
                // Not a PDF or invalid response
                showPDFError('Invalid document format. Expected PDF file.');
            }
        },
        error: function(xhr, status, error) {
            console.error('PDF validation error:', status, error, xhr.status);

            // Handle different error types
            let errorMessage = '';
            if (xhr.status === 404) {
                errorMessage = 'Document not found. Please ensure the enquiry exists.';
            } else if (xhr.status === 403) {
                errorMessage = 'Access denied. You do not have permission to view this document.';
            } else if (xhr.status === 500) {
                errorMessage = 'Server error while generating document. Please try again later.';
            } else if (status === 'timeout') {
                errorMessage = 'Request timeout. The document is taking too long to generate.';
            } else {
                errorMessage = 'Error loading document: ' + (error || 'Unknown error');
            }

            showPDFError(errorMessage);
        }
    });
}

// Function to load PDF in iframe
function loadPDFInIframe(pdfUrl) {
    const iframe = $('#contentIframe');

    // Set up iframe load handlers
    iframe.off('load error'); // Remove any existing handlers

    iframe.on('load', function() {
        console.log('PDF loaded successfully in iframe');

        // Hide loading, show iframe
        $('#loadingIndicator').hide();
        $(this).show();

        // Optional success message
        setTimeout(function() {
            showAlert('Document loaded successfully', 'success');
        }, 500);
    });

    iframe.on('error', function() {
        console.error('PDF failed to load in iframe');
        showPDFError('Unable to display PDF in browser. The document may be corrupted or invalid.');
    });

    // Add PDF viewer parameters for better display
    const pdfUrlWithParams = pdfUrl +
        '#toolbar=1' +           // Hide toolbar
        '&navpanes=0' +          // Hide navigation panes
        '&scrollbar=0' +         // Hide scrollbar
        '&view=FitH' +           // Fit horizontally
        '&zoom=page-fit' +       // Fit to page
        '&pagemode=none';

    // Set the iframe source
    iframe.attr('src', pdfUrlWithParams);

    // Fallback timeout in case load event doesn't fire
    setTimeout(function() {
        if ($('#loadingIndicator').is(':visible')) {
            console.log('PDF load timeout, showing iframe anyway');
            $('#loadingIndicator').hide();
            iframe.show();
        }
    }, 8000); // 8 second fallback
}

// Function to show PDF error in modal
function showPDFError(errorMessage) {
    $('#loadingIndicator').hide();

    const errorHTML = `
        <div class="text-center p-4">
            <i class="fas fa-exclamation-triangle text-danger" style="font-size: 3rem; margin-bottom: 1rem;"></i>
            <h5 class="text-danger">Unable to Load PDF</h5>
            <p class="text-muted">${errorMessage}</p>
            <div class="mt-3">
                <button class="btn btn-primary" onclick="retryPDF()">
                    <i class="fas fa-redo me-1"></i>Retry
                </button>
                <button class="btn btn-secondary ms-2" onclick="closepdfModal()">
                    <i class="fas fa-times me-1"></i>Close
                </button>
            </div>
        </div>
    `;

    $('#contentIframe').hide().after('<div id="pdfError">' + errorHTML + '</div>');

    // Also show alert
    showAlert(errorMessage, 'error');
}

// Function to retry PDF loading
function retryPDF() {
    $('#pdfError').remove();
    $('#loadingIndicator').show();

    // Get the current iframe src and retry
    const currentSrc = $('#contentIframe').attr('src');
    if (currentSrc) {
        // Add cache buster to force reload
        const newSrc = currentSrc + (currentSrc.includes('?') ? '&' : '?') + 'retry=' + Date.now();
        loadPDFInIframe(newSrc.split('#')[0]); // Remove existing fragment before reloading
    }
}

// Enhanced close modal function
function closepdfModal() {
    // Clear iframe source to stop loading
    $('#contentIframe').attr('src', '');

    // Hide modal
    $('#PdfModal').modal('hide');

    // Clean up any error messages
    $('#pdfError').remove();

    // Reset modal state
    $('#loadingIndicator').hide();
    $('#contentIframe').hide();

    // Clean up modal backdrop and body classes
    setTimeout(function() {
        $('.modal-backdrop').remove();
        $('body').removeClass('modal-open');
        $('body').css('padding-right', '');
    }, 300);
}

// Alternative function names for different PDF types
function openFormPDF(enquiryId) {
    openPopup(enquiryId, 'form');
}

function openReceiptPDF(enquiryId) {
    openPopup(enquiryId, 'receipt');
}

function openReportPDF(enquiryId) {
    openPopup(enquiryId, 'report');
}

// Document ready initialization
$(document).ready(function() {
    // Handle modal cleanup when closed
    $('#PdfModal').on('hidden.bs.modal', function () {
        // Clean up iframe and reset state
        $('#contentIframe').attr('src', '');
        $('#loadingIndicator').hide();
        $('#contentIframe').hide();
        $('#pdfError').remove();

        // Ensure proper cleanup
        $('body').removeClass('modal-open');
        $('.modal-backdrop').remove();
        $('body').css('padding-right', '');
    });

    // Handle browser back button
    $(window).on('popstate', function() {
        if ($('#PdfModal').hasClass('show')) {
            closepdfModal();
        }
    });
});

// Error handling for iframe loading issues
$(window).on('error', function(e) {
    if (e.originalEvent && e.originalEvent.filename && e.originalEvent.filename.includes('.pdf')) {
        console.error('PDF Error:', e.originalEvent);
        showPDFError('PDF loading error occurred');
    }
});

// Export functions for global access
window.openPopup = openPopup;
window.openFormPDF = openFormPDF;
window.openReceiptPDF = openReceiptPDF;
window.openReportPDF = openReportPDF;
window.closepdfModal = closepdfModal;
</script>
<script>

// Global variables
let currentEnquiryId = null; // Will store studentId (same as enquiryId in your system)
let currentStudentName = null;

// Simple function to convert enquiry to admission
function convertToAdmission(studentId, studentName) {
    if (!studentId) {
        showAlert('Error: Invalid student ID', 'error');
        return;
    }

    // Store values
    currentEnquiryId = studentId; // Using as enquiry ID since they're the same
    currentStudentName = studentName;

    // Update confirmation modal
    document.getElementById('studentNameConfirm').textContent = studentName;

    // Show confirmation modal
    $('#admissionConfirmModal').modal('show');
}

// Process admission - updated to work with existing SaveAdmission action
function processAdmission() {
    if (!currentEnquiryId) {
        showAlert('Error: No student selected', 'error');
        return;
    }

    const confirmBtn = document.getElementById('confirmAdmissionBtn');
    const originalText = confirmBtn.innerHTML;

    // Show loading state
    confirmBtn.disabled = true;
    confirmBtn.innerHTML = '<span class="loading-spinner me-2"></span>Processing...';

    // AJAX call to existing SaveAdmission action
    $.ajax({
        url: '@Url.Action("SaveAdmission", "Enquiry")', // Using your existing action
        type: 'POST',
        data: {
            studentId: currentEnquiryId, // Using studentId parameter as required
            enquiryId: currentEnquiryId, // Also passing as enquiryId (optional parameter)
            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').first().val()
        },
        timeout: 15000, // Increased timeout for async operations
        success: function(response) {
            console.log('Admission conversion successful:', response);

            if (response && response.success) {
                // Hide confirmation modal
                $('#admissionConfirmModal').modal('hide');

                // Show success modal
                setTimeout(function() {
                    $('#admissionSuccessModal').modal('show');
                }, 500);

                // Update the UI
                updateEnquiryToAdmissionStatus(currentEnquiryId);

                // Show success message with admission number if available
                let successMessage = response.message || 'Enquiry successfully converted to admission!';
                if (response.admissionNo) {
                    successMessage += ` Admission No: ${response.admissionNo}`;
                }
                showAlert(successMessage, 'success');

                // Refresh search results after 2 seconds
                setTimeout(function() {
                    refreshSearchResults();
                }, 2000);

            } else {
                showAlert(response.message || 'Failed to convert enquiry to admission', 'error');
                resetConfirmButton(confirmBtn, originalText);
            }
        },
        error: function(xhr, status, error) {
            console.error('Admission conversion error:', status, error);

            let errorMessage = 'Failed to convert enquiry to admission.';

            // Handle specific error cases
            if (xhr.status === 404) {
                errorMessage = 'Student/Enquiry not found.';
            } else if (xhr.status === 400) {
                errorMessage = 'Invalid request data.';
            } else if (xhr.status === 409) {
                errorMessage = 'Enquiry already converted to admission.';
            } else if (status === 'timeout') {
                errorMessage = 'Request timeout. The operation may still be processing.';
            } else if (xhr.responseJSON && xhr.responseJSON.message) {
                errorMessage = xhr.responseJSON.message;
            } else if (xhr.responseText) {
                try {
                    const responseObj = JSON.parse(xhr.responseText);
                    if (responseObj.message) {
                        errorMessage = responseObj.message;
                    }
                } catch (e) {
                    // Response is not JSON, use default message
                }
            }

            showAlert(errorMessage, 'error');
            resetConfirmButton(confirmBtn, originalText);
        }
    });
}

// Update UI after successful conversion
function updateEnquiryToAdmissionStatus(studentId) {
    // Find buttons with this student ID and update them
    $(`button[onclick*="convertToAdmission('${studentId}'"]`).each(function() {
        const $button = $(this);
        const $row = $button.closest('tr');

        // Update interest level badge if exists
        const $statusBadge = $row.find('.interest-pending, .interest-hot, .interest-excellent, .interest-verygood, .interest-normal, .interest-notinterested, .interest-negative, .interest-bad');
        if ($statusBadge.length) {
            $statusBadge.removeClass('interest-pending interest-hot interest-excellent interest-verygood interest-normal interest-notinterested interest-negative interest-bad')
                       .addClass('interest-completed')
                       .html('<i class="fas fa-graduation-cap me-1"></i>Admitted');
        }

        // Update payment status if exists
        const $paymentBadge = $row.find('.payment-status');
        if ($paymentBadge.length) {
            $paymentBadge.removeClass('unpaid')
                         .addClass('paid')
                         .html('<i class="fas fa-check-circle me-1"></i>Admitted');
        }

        // Update the convert button
        $button.prop('disabled', true)
               .removeClass('btn-success')
               .addClass('btn-outline-success')
               .html('<i class="fas fa-check me-1"></i>Admitted')
               .attr('title', 'Already converted to admission');
    });
}

// Reset button state
function resetConfirmButton(button, originalText) {
    button.disabled = false;
    button.innerHTML = originalText;
}

// Edit admission function
function editAdmission() {
    $('#admissionSuccessModal').modal('hide');

    if (currentEnquiryId) {
        // Open edit modal for the enquiry/student
        openEditModal(currentEnquiryId);
    }
}

// Clean up when modals are closed
$('#admissionConfirmModal').on('hidden.bs.modal', function() {
    const confirmBtn = document.getElementById('confirmAdmissionBtn');
    if (confirmBtn) {
        resetConfirmButton(confirmBtn, '<i class="fas fa-check me-2"></i>Yes, Convert to Admission');
    }
});

$('#admissionSuccessModal').on('hidden.bs.modal', function() {
    currentEnquiryId = null;
    currentStudentName = null;
});

// Make functions globally accessible
window.convertToAdmission = convertToAdmission;
window.processAdmission = processAdmission;
window.editAdmission = editAdmission;
</script>