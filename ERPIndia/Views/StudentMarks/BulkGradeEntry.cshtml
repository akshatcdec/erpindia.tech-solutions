@model ERPIndia.Controllers.StudentMarksViewModel
@{
    ViewBag.Title = "Bulk Grade Entry";
}

<!-- Add Tippy.js CDN -->
<link rel="stylesheet" href="https://unpkg.com/tippy.js@6/animations/scale.css" />

<style>
    /* Filter Card Styling */
    .filter-card {
        background: linear-gradient(to bottom, #ffffff, #f8f9fa);
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        border: 1px solid #e9ecef;
    }

    /* DataTable Custom Styling */
    .grades-entry-table {
        width: 100%;
        border-collapse: collapse;
        border: 1px solid #ddd;
    }

        .grades-entry-table thead th {
            background: linear-gradient(to bottom, #9c27b0, #673ab7);
            color: #ffffff !important;
            font-weight: bold;
            text-align: center;
            padding: 8px 10px;
            border: 1px solid rgba(255, 255, 255, 0.2) !important;
            position: sticky;
            top: 0;
            z-index: 10;
            font-size: 13px;
        }

        /* Alternating row colors with higher specificity */
        #gradesDataTable tbody tr:nth-child(odd),
        .grades-entry-table tbody tr:nth-child(odd),
        table.dataTable.grades-entry-table tbody tr:nth-child(odd) {
            background-color: #ffffff !important;
        }

        #gradesDataTable tbody tr:nth-child(even),
        .grades-entry-table tbody tr:nth-child(even),
        table.dataTable.grades-entry-table tbody tr:nth-child(even) {
            background-color: #e8e8e8 !important;
        }

        /* Class-based alternating colors for DataTable compatibility */
        #gradesDataTable tbody tr.row-odd,
        .grades-entry-table tbody tr.row-odd,
        table.dataTable tbody tr.row-odd {
            background-color: #ffffff !important;
        }

        #gradesDataTable tbody tr.row-even,
        .grades-entry-table tbody tr.row-even,
        table.dataTable tbody tr.row-even {
            background-color: #e8e8e8 !important;
        }

        #gradesDataTable tbody tr:hover,
        .grades-entry-table tbody tr:hover,
        table.dataTable.grades-entry-table tbody tr:hover {
            background-color: #d4e8f7 !important;
            transition: background-color 0.2s ease;
        }

        #gradesDataTable tbody tr.selected-row,
        .grades-entry-table tbody tr.selected-row,
        table.dataTable.grades-entry-table tbody tr.selected-row {
            background-color: #b8d4f0 !important;
        }

        #gradesDataTable tbody tr.modified-row,
        .grades-entry-table tbody tr.modified-row,
        table.dataTable.grades-entry-table tbody tr.modified-row {
            background-color: #ffe066 !important;
        }

    /* Override any DataTable styling with maximum specificity */
    div.dataTables_wrapper table.dataTable tbody tr {
        background-color: transparent !important;
    }

    /* Force alternating colors */
    table#gradesDataTable tbody tr:nth-of-type(odd),
    div.dataTables_wrapper table#gradesDataTable tbody tr:nth-of-type(odd) {
        background-color: #ffffff !important;
    }

    table#gradesDataTable tbody tr:nth-of-type(even),
    div.dataTables_wrapper table#gradesDataTable tbody tr:nth-of-type(even) {
        background-color: #e8e8e8 !important;
    }

    /* Ensure cells in even rows also get the background */
    #gradesDataTable tbody tr:nth-child(even) td,
    .grades-entry-table tbody tr:nth-child(even) td,
    #gradesDataTable tbody tr.row-even td {
        background-color: transparent !important;
    }

    #gradesDataTable tbody tr:nth-child(odd) td,
    .grades-entry-table tbody tr:nth-child(odd) td,
    #gradesDataTable tbody tr.row-odd td {
        background-color: transparent !important;
    }

    .grades-entry-table tbody td {
        padding: 4px 6px;
        border: 1px solid #e0e0e0;
        text-align: center;
        font-size: 13px;
        vertical-align: middle;
    }

    .student-info-cell {
        text-align: left !important;
        font-size: 13px;
        padding-left: 10px;
    }

    /* Grade Textbox Styling */
    .grade-input {
        width: 60px;
        text-align: center;
        border: 1px solid #cbd5e0;
        border-radius: 3px;
        padding: 3px;
        font-size: 13px;
        transition: all 0.2s ease;
        background-color: white;
    }

        .grade-input:focus {
            border-color: #9c27b0;
            box-shadow: 0 0 0 3px rgba(156, 39, 176, 0.1);
            outline: none;
            background-color: white;
        }

        .grade-input.is-invalid {
            border-color: #dc3545 !important;
            background-color: #fff5f5;
        }

        .grade-input.is-modified {
            background-color: #fffacd;
            font-weight: bold;
        }

        /* Grade color coding based on value */
        .grade-input[data-grade="A+"], .grade-input[data-grade="A PLUS"] {
            background-color: #4caf50;
            color: white;
            font-weight: bold;
        }

        .grade-input[data-grade="A"] {
            background-color: #66bb6a;
            color: white;
            font-weight: bold;
        }

        .grade-input[data-grade="B+"], .grade-input[data-grade="B PLUS"] {
            background-color: #2196f3;
            color: white;
        }

        .grade-input[data-grade="B"] {
            background-color: #42a5f5;
            color: white;
        }

        .grade-input[data-grade="C+"], .grade-input[data-grade="C PLUS"] {
            background-color: #ff9800;
            color: white;
        }

        .grade-input[data-grade="C"] {
            background-color: #ffa726;
            color: white;
        }

        .grade-input[data-grade="D"] {
            background-color: #ff7043;
            color: white;
        }

        .grade-input[data-grade="F"] {
            background-color: #f44336;
            color: white;
        }

        .grade-input[data-grade="AB"] {
            background-color: #757575;
            color: white;
        }

    /* Subject Header Styling */
    .subject-header {
        font-size: 12px;
        font-weight: bold;
        background: linear-gradient(to bottom, #ab47bc, #8e24aa) !important;
        color: white !important;
        position: relative;
        cursor: help;
    }

    .subject-name-compressed {
        display: inline-block;
        max-width: 80px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        cursor: help;
    }

    /* Custom Tippy.js Theme */
    .tippy-box[data-theme~='custom'] {
        background-color: #333;
        color: white;
        font-size: 14px;
        font-weight: normal;
    }

        .tippy-box[data-theme~='custom'][data-placement^='top'] > .tippy-arrow::before {
            border-top-color: #333;
        }

        .tippy-box[data-theme~='custom'][data-placement^='bottom'] > .tippy-arrow::before {
            border-bottom-color: #333;
        }

        .tippy-box[data-theme~='custom'][data-placement^='left'] > .tippy-arrow::before {
            border-left-color: #333;
        }

        .tippy-box[data-theme~='custom'][data-placement^='right'] > .tippy-arrow::before {
            border-right-color: #333;
        }

    /* Button Styling */
    .search-button {
        background: linear-gradient(to bottom, #9c27b0, #7b2cbf);
        color: white;
        padding: 0.5rem 1rem;
        font-size: 14px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        transition: transform 0.2s ease;
    }

        .search-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
        }

    .save-btn {
        background: linear-gradient(to right, #9c27b0, #673ab7);
        color: white;
        padding: 12px 40px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        margin: 20px 0;
        transition: all 0.3s ease;
        font-size: 16px;
    }

        .save-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(156, 39, 176, 0.3);
        }

        .save-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    /* Toast Notification Styles */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 99999;
        max-width: 400px;
    }

    .toast {
        min-width: 300px;
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease;
        font-size: 14px;
        font-weight: 500;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .toast-success {
        background: #d4edda;
        border-left: 4px solid #28a745;
        color: #155724;
    }

    .toast-error {
        background: #f8d7da;
        border-left: 4px solid #dc3545;
        color: #721c24;
    }

    .toast-warning {
        background: #fff3cd;
        border-left: 4px solid #ffc107;
        color: #856404;
    }

    .toast-info {
        background: #d1ecf1;
        border-left: 4px solid #17a2b8;
        color: #0c5460;
    }

    /* Spinner Overlay */
    .spinner-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .spinner-box {
        background: white;
        padding: 30px;
        border-radius: 10px;
        text-align: center;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #9c27b0;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 15px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Legend Box */
    .grades-legend {
        background: linear-gradient(to right, #f8f9fa, #ffffff);
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
        font-size: 14px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .grade-badge {
        display: inline-block;
        padding: 4px 10px;
        margin: 2px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
    }

    /* Quick Actions */
    .quick-actions {
        margin-bottom: 15px;
    }

    .batch-grade-container {
        display: inline-block;
        margin-left: 20px;
    }

    .batch-grade-input {
        padding: 6px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-right: 10px;
        width: 120px;
     
    }

    .apply-batch-btn {
        background: #17a2b8;
        color: white;
        padding: 6px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .apply-batch-btn:hover {
            background: #138496;
        }

    /* Checkbox Styling */
    .form-check-input {
        cursor: pointer;
        width: 18px;
        height: 18px;
    }

    /* CRITICAL: Force alternating row colors - Place this at the end to override everything */
    table#gradesDataTable tbody tr:nth-child(odd) {
        background: #ffffff !important;
    }

    table#gradesDataTable tbody tr:nth-child(even) {
        background: #e8e8e8 !important;
    }
</style>

<div class="container-fluid">
    <!-- Header Card -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-graduation-cap me-2"></i>Bulk Grade Entry
                    </h5>
                </div>

                <div class="card-body">
                    <form id="searchForm" class="needs-validation" novalidate>
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label for="ddlClass" class="form-label">
                                    Class <span class="text-danger">*</span>
                                </label>
                                @Html.DropDownListFor(x => x.Classes, Model.Classes, "Select a class", new { @class = "form-select", id = "ddlClass" })
                            </div>
                            <div class="col-md-3">
                                <label for="ddlSection" class="form-label">
                                    Section <span class="text-danger">*</span>
                                </label>
                                @Html.DropDownListFor(x => x.Sections, Model.Sections, "Select a section", new { @class = "form-select", id = "ddlSection" })
                            </div>
                            <div class="col-md-3">
                                <label for="ddlExam" class="form-label">
                                    Exam <span class="text-danger">*</span>
                                </label>
                                @Html.DropDownListFor(x => x.ExamTypes, Model.ExamTypes, "Select an exam", new { @class = "form-select", id = "ddlExam" })
                            </div>
                            <div class="col-md-3 align-self-end">
                                <button type="button" class="btn search-button w-100" id="btnSearch">
                                    <i class="fas fa-search me-2"></i>Search
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Grades Entry Container -->
    <div id="gradesEntryContainer" class="mt-4" style="display:none;">
        <div class="card">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">
                        <i class="fas fa-users me-2"></i>
                        <strong style="color: #673ab7;">Grade Entry List</strong>
                    </h6>
                    <div class="batch-grade-container">
                        <input type="text" class="batch-grade-input" id="batchGradeInput" placeholder="Enter Grade" maxlength="20">
                        <button class="apply-batch-btn" onclick="applyBatchGrade()">
                            Apply to Selected
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <!-- Grade Legend -->
                <div class="grades-legend" style="display:none">
                    <strong>Common Grade Scale:</strong>
                    <span class="grade-badge" style="background: #4caf50; color: white;">A+</span>
                    <span class="grade-badge" style="background: #66bb6a; color: white;">A</span>
                    <span class="grade-badge" style="background: #2196f3; color: white;">B+</span>
                    <span class="grade-badge" style="background: #42a5f5; color: white;">B</span>
                    <span class="grade-badge" style="background: #ff9800; color: white;">C+</span>
                    <span class="grade-badge" style="background: #ffa726; color: white;">C</span>
                    <span class="grade-badge" style="background: #ff7043; color: white;">D</span>
                    <span class="grade-badge" style="background: #e53935; color: white;">E</span>
                    <span class="grade-badge" style="background: #f44336; color: white;">F</span>
                    <span class="grade-badge" style="background: #757575; color: white;">AB</span>
                    <span style="margin-left: 10px; font-style: italic;">* You can enter any custom grade up to 30 characters</span>
                </div>

                <!-- Data Table -->
                <div class="table-responsive">
                    <table class="table grades-entry-table" id="gradesDataTable">
                        <thead>
                            <tr id="tableHeader">
                                <!-- Dynamic headers will be added here -->
                            </tr>
                        </thead>
                        <tbody id="gradesTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>
                <div class="text-center">
                    <button type="button" class="save-btn" id="btnSaveGrades">
                        <i class="fas fa-save me-2"></i>Save All Grades
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container" id="toastContainer"></div>

<!-- Spinner Overlay -->
<div class="spinner-overlay" id="spinnerOverlay">
    <div class="spinner-box">
        <div class="spinner"></div>
        <div>Loading data...</div>
    </div>
</div>

<!-- Add Tippy.js Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.9.2/umd/popper.min.js"></script>
<script src="https://unpkg.com/tippy.js@6"></script>

<script>
    // Add this after document.ready
    $(document).ready(function () {

    var dataTable = null;
    var currentClassId = '';
    var currentSectionId = '';
    var currentExamId = '';
    var studentsData = [];
    var subjectsData = [];
    var originalGrades = {};
    var modifiedGrades = {};
    var isUpdating = false;
    var tippyInstances = []; // Store Tippy instances for cleanup

    // Standard grades for color coding (trimmed versions)
    var standardGrades = ['A+', 'A', 'B+', 'B', 'C+', 'C', 'D', 'E', 'F', 'AB'];

    // Additional variations that should get color coding
    var gradeVariations = {
        'A PLUS': 'A+',
        'B PLUS': 'B+',
        'C PLUS': 'C+',
        'A-PLUS': 'A+',
        'B-PLUS': 'B+',
        'C-PLUS': 'C+'
    };

    // Function to compress text
    function compressText(text, maxLength) {
        maxLength = maxLength || 8;
        if (text.length > maxLength) {
            return text.substring(0, maxLength) + '...';
        }
        return text;
    }

    // Initialize Tippy.js tooltips
    function initializeTippyTooltips() {
        // Destroy existing Tippy instances
        if (tippyInstances.length > 0) {
            tippyInstances.forEach(function(instance) {
                if (instance && instance.destroy) {
                    instance.destroy();
                }
            });
            tippyInstances = [];
        }

        // Create new Tippy instances for each subject header
        $('.subject-tooltip').each(function() {
            var element = this;
            var subjectName = $(element).data('subject');

            if (subjectName) {
                var instance = tippy(element, {
                    content: '<strong>Subject:</strong> ' + subjectName,
                    placement: 'top',
                    arrow: true,
                    theme: 'custom',
                    allowHTML: true,
                    interactive: false,
                    appendTo: document.body,
                    // Mobile settings
                    touch: ['hold', 300], // Long press for mobile
                    touchHold: true,
                    // Desktop settings
                    trigger: 'mouseenter focus click',
                    hideOnClick: true,
                    // General settings
                    animation: 'scale',
                    duration: [200, 150],
                    maxWidth: 350,
                    zIndex: 99999,
                    // Ensure tooltip shows properly
                    popperOptions: {
                        strategy: 'fixed',
                        modifiers: [
                            {
                                name: 'flip',
                                options: {
                                    fallbackPlacements: ['bottom', 'right', 'left'],
                                },
                            },
                            {
                                name: 'preventOverflow',
                                options: {
                                    boundary: 'viewport',
                                },
                            },
                        ],
                    },
                });

                tippyInstances.push(instance);
            }
        });
    }

    // Toast notification function
    function showToast(message, type, duration) {
        type = type || 'success';
        duration = duration || 4000;

        var icons = {
            success: 'check-circle',
            error: 'times-circle',
            warning: 'exclamation-triangle',
            info: 'info-circle'
        };

        var toastId = 'toast_' + Date.now();
        var toastHtml =
            '<div class="toast toast-' + type + '" id="' + toastId + '" style="display:none;">' +
                '<i class="fas fa-' + icons[type] + ' me-2"></i>' +
                message +
            '</div>';

        $('#toastContainer').append(toastHtml);
        $('#' + toastId).fadeIn(300);

        setTimeout(function() {
            $('#' + toastId).fadeOut(300, function() {
                $(this).remove();
            });
        }, duration);
    }

    // Show/Hide Spinner
    function showSpinner() {
        $('#spinnerOverlay').css('display', 'flex');
    }

    function hideSpinner() {
        $('#spinnerOverlay').hide();
    }

    // Apply grade color coding
    function applyGradeColor($input, grade) {
        // Remove all grade classes
        $input.removeClass('grade-a-plus grade-a grade-b-plus grade-b grade-c-plus grade-c grade-d grade-f grade-ab');
        $input.removeAttr('data-grade');

        if (grade) {
            // For display purposes, store the original value with spaces
            var originalValue = grade;

            // For color matching, use trimmed version
            var trimmedGrade = grade;

            // Check if it's a variation that maps to a standard grade
            if (gradeVariations[trimmedGrade]) {
                trimmedGrade = gradeVariations[trimmedGrade];
            }

            $input.attr('data-grade', trimmedGrade);

            // Apply color only for standard grades
            if (standardGrades.indexOf(trimmedGrade) !== -1) {
                var gradeClass = 'grade-' + trimmedGrade.toLowerCase().replace('+', '-plus');
                $input.addClass(gradeClass);
            }
        }
    }

    // Search button click handler
    $('#btnSearch').click(function() {
        var classId = $('#ddlClass').val();
        var sectionId = $('#ddlSection').val();
        var examId = $('#ddlExam').val();

        currentClassId = classId;
        currentSectionId = sectionId;
        currentExamId = examId;

        var errors = [];
        if (!classId) errors.push('Please select a class');
        if (!sectionId) errors.push('Please select a section');
        if (!examId) errors.push('Please select an exam');

        if (errors.length > 0) {
            showToast(errors.join(', '), 'warning');
            return;
        }

        loadStudentGradesData(classId, sectionId, examId);
    });

    // Load student grades data
    function loadStudentGradesData(classId, sectionId, examId) {
        showSpinner();

        $.ajax({
            url: '@Url.Action("GetStudentBulkGradesData", "StudentMarks")',
            type: 'POST',
            data: {
                classId: classId,
                sectionId: sectionId,
                examTypeId: examId
            },
            success: function(data) {
                hideSpinner();

                if (data.success) {
                    studentsData = data.students;
                    subjectsData = data.subjects;
                    originalGrades = {};
                    modifiedGrades = {};

                    // Store original grades
                    if (data.existingGrades) {
                        $.each(data.existingGrades, function(i, grade) {
                            var key = grade.StudentID + '_' + grade.SubjectID;
                            originalGrades[key] = grade.Grade;
                        });
                    }

                    displayGradesEntryGrid(data);
                    $('#gradesEntryContainer').show();
                    showToast('Data loaded successfully! ' + data.students.length + ' students found', 'success');
                } else {
                    showToast(data.message || 'Failed to load data', 'error');
                }
            },
            error: function(xhr, status, error) {
                hideSpinner();
                showToast('An error occurred while loading data', 'error');
                console.error('Load error:', error);
            }
        });
    }

    // Display grades entry grid with DataTable
    function displayGradesEntryGrid(data) {
        if (!data.students || data.students.length === 0) {
            $('#gradesEntryContainer').html(
                '<div class="alert alert-info">' +
                    '<i class="fas fa-info-circle me-2"></i>' +
                    'No students found for the selected criteria' +
                '</div>'
            );
            return;
        }

        // Build table headers
        var headerHtml =
            '<th><input type="checkbox" id="selectAll" class="form-check-input"></th>' +
            '<th>Class</th>' +
            '<th>SR</th>' +
            '<th>Roll</th>' +
            '<th>Exam</th>' +
            '<th>Student</th>' +
            '<th>Father</th>';

        // Add grade subject columns with Tippy.js tooltips
        $.each(data.subjects, function(i, subject) {
            var compressedName = compressText(subject.SubjectName, 8);

            headerHtml += '<th class="subject-header">' +
                         '<span class="subject-tooltip subject-name-compressed" ' +
                         'data-subject="' + subject.SubjectName + '">' +
                         compressedName +
                         '</span>' +
                         '</th>';
        });

        $('#tableHeader').html(headerHtml);

        // Build table body
        var bodyHtml = '';
        $.each(data.students, function(index, student) {
            // Apply alternating row classes
            var rowClass = index % 2 === 0 ? 'row-even' : 'row-odd';

            bodyHtml += '<tr data-studentid="' + student.StudentID + '" class="' + rowClass + '">' +
                       '<td class="text-center"><input type="checkbox" class="form-check-input row-checkbox"></td>' +
                       '<td>' + student.ClassName + '-' + student.SectionName + '</td>' +
                       '<td>' + (index + 1) + '</td>' +
                       '<td><span class="grade-badge" style="background: #ffa726; color: white;">' + (student.RollNumber || '-') + '</span></td>'+
                       '<td>' + data.examName + '</td>' +
                       '<td class="student-info-cell"><strong>' + student.StudentName + '</strong></td>' +
                       '<td class="student-info-cell">' + (student.FatherName || '-') + '</td>';

            // Add grade textbox for each subject
            $.each(data.subjects, function(j, subject) {
                var key = student.StudentID + '_' + subject.SubjectID;
                var existingGrade = originalGrades[key] || '';

                bodyHtml += '<td>' +
                           '<input type="text" ' +
                           'class="grade-input" ' +
                           'maxlength="20" ' +
                           'data-studentid="' + student.StudentID + '" ' +
                           'data-subjectid="' + subject.SubjectID + '" ' +
                           'data-original="' + existingGrade + '" ' +
                           'value="' + existingGrade + '" ' +
                           'placeholder="-" ' +
                           'autocomplete="off">' +
                           '</td>';
            });

            bodyHtml += '</tr>';
        });

        $('#gradesTableBody').html(bodyHtml);

        // Apply initial grade colors
        $('.grade-input').each(function() {
            var value = $(this).val();
            if (value) {
                applyGradeColor($(this), value);
            }
        });

        // Initialize DataTable
        initializeDataTable();

        // Initialize Tippy tooltips after table is created
        setTimeout(function() {
            initializeTippyTooltips();
        }, 100);

        // Force apply alternating colors after DataTable initialization
        setTimeout(function() {
            $('#gradesDataTable tbody tr').each(function(index) {
                if (!$(this).hasClass('modified-row') && !$(this).hasClass('selected-row')) {
                    if (index % 2 === 0) {
                        $(this).css('background-color', '#e8e8e8');
                    } else {
                        $(this).css('background-color', '#ffffff');
                    }
                }
            });
        }, 100);
    }

    // Initialize DataTable
    function initializeDataTable() {
        // Destroy existing DataTable if exists
        if (dataTable) {
            dataTable.destroy();
        }

        // Calculate which columns should be exportable (exclude checkbox column)
        var exportColumns = [];
        for (var i = 1; i < $('#tableHeader th').length; i++) {
            exportColumns.push(i);
        }

        // Initialize new DataTable
        dataTable = $('#gradesDataTable').DataTable({
            "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
            "pageLength": 25,
            "order": [[2, "asc"]], // Order by SR
            "scrollX": true,
            "responsive": false,
            "stripeClasses": [], // Disable DataTable's default striping
            "dom": 'Blfrtip',
            "buttons": [
                {
                    extend: 'copy',
                    text: 'Copy',
                    className: 'dt-button',
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'csv',
                    text: 'CSV',
                    className: 'dt-button',
                    title: 'StudentGrades_' + new Date().getTime(),
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'excel',
                    text: 'Excel',
                    className: 'dt-button',
                    title: 'StudentGrades_' + new Date().getTime(),
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'pdf',
                    text: 'PDF',
                    className: 'dt-button',
                    title: 'Student Grades Report',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'print',
                    text: 'Print',
                    className: 'dt-button',
                    title: 'Student Grades Report',
                    exportOptions: {
                        columns: exportColumns
                    }
                }
            ],
            "language": {
                "search": "Search students:",
                "lengthMenu": "Show _MENU_ entries",
                "info": "Showing _START_ to _END_ of _TOTAL_ students",
                "paginate": {
                    "first": "First",
                    "last": "Last",
                    "next": "Next",
                    "previous": "Previous"
                }
            },
            "columnDefs": [
                {
                    "orderable": false,
                    "targets": [0] // Disable ordering for checkbox column
                }
            ],
            "drawCallback": function(settings) {
                // Apply alternating row colors after each draw
                $('#gradesDataTable tbody tr:visible').each(function(index) {
                    $(this).css('background-color', '');  // Clear any existing inline styles
                    if (index % 2 === 0) {
                        $(this).css('background-color', '#e8e8e8');
                        $(this).addClass('row-even').removeClass('row-odd');
                    } else {
                        $(this).css('background-color', '#ffffff');
                        $(this).addClass('row-odd').removeClass('row-even');
                    }
                });

                // Re-bind events after DataTable redraw
                bindGradesEntryEvents();

                // Re-initialize Tippy tooltips after DataTable redraw
                setTimeout(function() {
                    initializeTippyTooltips();
                }, 100);
            },
            "initComplete": function(settings, json) {
                // Apply initial striping
                $('#gradesDataTable tbody tr').each(function(index) {
                    if (index % 2 === 0) {
                        $(this).css('background-color', '#e8e8e8');
                        $(this).addClass('row-even');
                    } else {
                        $(this).css('background-color', '#ffffff');
                        $(this).addClass('row-odd');
                    }
                });

                // Initialize Tippy tooltips on DataTable complete
                setTimeout(function() {
                    initializeTippyTooltips();
                }, 100);
            }
        });

        // Initial binding
        bindGradesEntryEvents();
    }

    // Bind grades entry events
    function bindGradesEntryEvents() {
        // Remove previous event handlers to prevent duplicates
        $('.grade-input').off('input change keydown');
        $('#selectAll').off('change');
        $('.row-checkbox').off('change');

        // Grade input change event - FIXED TO ALLOW SPACES
        $('.grade-input').on('input change', function() {
            var $input = $(this);
            var studentId = $input.data('studentid');
            var subjectId = $input.data('subjectid');
            var originalValue = $input.data('original') || '';

            // Don't trim - preserve spaces, just convert to uppercase
            var currentValue = $input.val();
            var key = studentId + '_' + subjectId;

            // Update the input value to uppercase (preserving spaces)
            $input.val(currentValue);

            // Apply color coding based on trimmed value for matching
            applyGradeColor($input, currentValue);

            // Check if value has changed from original
            if (currentValue !== originalValue) {
                modifiedGrades[key] = currentValue;
                markRowAsModified($input);
                $input.addClass('is-modified');
            } else {
                delete modifiedGrades[key];
                checkRowModification($input);
                $input.removeClass('is-modified');
            }

            updateSummary();
        });

        // Navigation between inputs
        $('.grade-input').on('keydown', function(e) {
            if (e.key === 'Enter' || e.keyCode === 13) {
                e.preventDefault();
                var $inputs = $('.grade-input:visible');
                var currentIndex = $inputs.index(this);
                if (currentIndex < $inputs.length - 1) {
                    $inputs.eq(currentIndex + 1).focus();
                }
            } else if (e.key === 'ArrowDown' || e.keyCode === 40) {
                e.preventDefault();
                navigateVertical($(this), 1);
            } else if (e.key === 'ArrowUp' || e.keyCode === 38) {
                e.preventDefault();
                navigateVertical($(this), -1);
            } else if (e.key === 'ArrowRight' || e.keyCode === 39) {
                if (this.selectionStart === this.value.length) {
                    e.preventDefault();
                    var $inputs = $('.grade-input:visible');
                    var currentIndex = $inputs.index(this);
                    if (currentIndex < $inputs.length - 1) {
                        $inputs.eq(currentIndex + 1).focus();
                    }
                }
            } else if (e.key === 'ArrowLeft' || e.keyCode === 37) {
                if (this.selectionStart === 0) {
                    e.preventDefault();
                    var $inputs = $('.grade-input:visible');
                    var currentIndex = $inputs.index(this);
                    if (currentIndex > 0) {
                        $inputs.eq(currentIndex - 1).focus();
                    }
                }
            }
        });

        // Select all checkbox
        $('#selectAll').on('change', function() {
            var isChecked = $(this).prop('checked');
            if (dataTable) {
                dataTable.$('.row-checkbox').prop('checked', isChecked);
                if (isChecked) {
                    dataTable.$('tr').addClass('selected-row');
                    dataTable.$('tr').each(function() {
                        $(this).css('background-color', '#b8d4f0');
                    });
                } else {
                    dataTable.$('tr').removeClass('selected-row');
                    dataTable.$('tr').each(function(index) {
                        var $row = $(this);
                        if ($row.hasClass('modified-row')) {
                            $row.css('background-color', '#ffe066');
                        } else {
                            if (index % 2 === 0) {
                                $row.css('background-color', '#e8e8e8');
                            } else {
                                $row.css('background-color', '#ffffff');
                            }
                        }
                    });
                }
            }
        });

        // Individual row checkbox
        $('.row-checkbox').on('change', function() {
            var $row = $(this).closest('tr');
            var rowIndex = $('#gradesDataTable tbody tr').index($row);

            if ($(this).is(':checked')) {
                $row.addClass('selected-row');
                $row.css('background-color', '#b8d4f0');  // Apply blue selection background
            } else {
                $row.removeClass('selected-row');
                // Restore appropriate background
                if ($row.hasClass('modified-row')) {
                    $row.css('background-color', '#ffe066');
                } else {
                    if (rowIndex % 2 === 0) {
                        $row.css('background-color', '#e8e8e8');
                    } else {
                        $row.css('background-color', '#ffffff');
                    }
                }
            }

            // Update select all checkbox
            var totalCheckboxes = $('.row-checkbox').length;
            var checkedCheckboxes = $('.row-checkbox:checked').length;
            $('#selectAll').prop('checked', totalCheckboxes === checkedCheckboxes);
        });
    }

    // Navigate vertically in grid
    function navigateVertical($input, direction) {
        var subjectId = $input.data('subjectid');
        var $currentRow = $input.closest('tr');
        var $targetRow = direction > 0 ? $currentRow.next('tr') : $currentRow.prev('tr');

        if ($targetRow.length > 0) {
            var $targetInput = $targetRow.find('[data-subjectid="' + subjectId + '"]');
            if ($targetInput.length > 0) {
                $targetInput.focus();
            }
        }
    }

    // Mark row as modified
    function markRowAsModified($input) {
        var $row = $input.closest('tr');
        $row.addClass('modified-row');
        $row.css('background-color', '#ffe066');  // Apply yellow background with inline style
    }

    // Check if row should remain modified
    function checkRowModification($input) {
        var $row = $input.closest('tr');
        var studentId = $row.data('studentid');
        var hasModifications = false;

        $row.find('.grade-input').each(function() {
            var subjectId = $(this).data('subjectid');
            var key = studentId + '_' + subjectId;
            if (modifiedGrades.hasOwnProperty(key)) {
                hasModifications = true;
                return false; // Break the loop
            }
        });

        if (!hasModifications) {
            $row.removeClass('modified-row');
            // Restore original alternating color
            var rowIndex = $('#gradesDataTable tbody tr').index($row);
            if (rowIndex % 2 === 0) {
                $row.css('background-color', '#e8e8e8');
            } else {
                $row.css('background-color', '#ffffff');
            }
        }
    }

    // Update summary
    function updateSummary() {
        var entryCount = Object.keys(modifiedGrades).length;
        var modifiedRowCount = $('.modified-row').length;

        // Enable/disable save button based on modifications
        $('#btnSaveGrades').prop('disabled', entryCount === 0);
    }

    // Apply batch grade to selected students - FIXED TO ALLOW SPACES
    window.applyBatchGrade = function() {
        // Don't trim - preserve spaces and special characters
        var grade = $('#batchGradeInput').val();

        if (!grade) {
            showToast('Please enter a grade', 'warning');
            return;
        }

        if (grade.length > 30) {
            showToast('Grade cannot exceed 30 characters', 'warning');
            return;
        }

        var $checkedBoxes = dataTable ? dataTable.$('.row-checkbox:checked') : $('.row-checkbox:checked');
        var checkedCount = $checkedBoxes.length;

        if (checkedCount === 0) {
            showToast('Please select students first', 'warning');
            return;
        }

        $checkedBoxes.each(function() {
            var $row = $(this).closest('tr');
            $row.find('.grade-input').val(grade).trigger('change');
            // Ensure modified color is applied
            $row.css('background-color', '#ffe066');
        });

        $('#batchGradeInput').val('');
        showToast('Grade "' + grade + '" applied to ' + checkedCount + ' selected student(s)', 'success');
    };

    // Save all grades - HANDLES VALUES WITH SPACES
    $('#btnSaveGrades').click(function() {
        if (isUpdating) return;

        var gradesToSave = [];

        // Collect all modified grades (including those with spaces)
        $.each(modifiedGrades, function(key, value) {
            var parts = key.split('_');
            var studentId = parts[0];
            var subjectId = parts[1];

            gradesToSave.push({
                StudentID: studentId,
                SubjectID: subjectId,
                Grade: value, // This now includes spaces if present
                ExamTypeID: currentExamId
            });
        });

        if (gradesToSave.length === 0) {
            showToast('No changes to save', 'info');
            return;
        }

        if (!confirm('Do you want to save grades for ' + gradesToSave.length + ' entries?')) {
            return;
        }

        isUpdating = true;
        showSpinner();
        $('#btnSaveGrades').prop('disabled', true)
            .html('<i class="fas fa-spinner fa-spin me-2"></i>Saving...');

        $.ajax({
            url: '@Url.Action("SaveBulkStudentGrades", "StudentMarks")',
            type: 'POST',
            data: JSON.stringify({
                grades: gradesToSave,
                classId: currentClassId,
                sectionId: currentSectionId,
                examTypeId: currentExamId
            }),
            contentType: 'application/json',
            success: function(result) {
                hideSpinner();

                if (result.success) {
                    showToast(result.message || 'Grades saved successfully!', 'success');

                    // Reload the page after 1 second
                    setTimeout(function() {
                        location.reload();
                    }, 1000);

                } else {
                    showToast(result.message || 'Failed to save grades', 'error');
                    isUpdating = false;
                    $('#btnSaveGrades').html('<i class="fas fa-save me-2"></i>Save All Grades');
                    $('#btnSaveGrades').prop('disabled', false);
                }
            },
            error: function(xhr, status, error) {
                hideSpinner();
                showToast('An error occurred while saving grades', 'error');
                console.error('Save error:', error);
                isUpdating = false;
                $('#btnSaveGrades').html('<i class="fas fa-save me-2"></i>Save All Grades');
                $('#btnSaveGrades').prop('disabled', false);
            }
        });
    });

    // Hide containers when filters change
    $('#ddlClass, #ddlSection, #ddlExam').change(function() {
        $('#gradesEntryContainer').hide();
        if (dataTable) {
            dataTable.destroy();
            dataTable = null;
        }
        modifiedGrades = {};
        originalGrades = {};

        // Clean up Tippy instances
        if (tippyInstances.length > 0) {
            tippyInstances.forEach(function(instance) {
                if (instance && instance.destroy) {
                    instance.destroy();
                }
            });
            tippyInstances = [];
        }
    });
});
</script>