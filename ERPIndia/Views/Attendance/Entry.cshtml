@model ERPIndia.Models.Attendance.AttendanceViewModel
@{
    ViewBag.Title = "Attendance Entry";
}

<!-- Add Flatpickr CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<style>
    /* Header Styling */
    .filter-card {
        background: linear-gradient(to bottom, #ffffff, #f8f9fa);
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
    }

    /* Table Styling */
    /* Table Styling */
    .attendance-table {
        width: 100%;
        border-collapse: collapse;
    }

        .attendance-table thead th {
            background: linear-gradient(to bottom, #1c79eb, #2c78bf, #155ab5);
            color: white !important;
            padding: 12px 10px;
            text-align: center;
            font-size: 14px;
            font-weight: 600;
            position: sticky;
            top: 0;
            z-index: 10;
            border: 1px solid #ddd !important;
        }

        .attendance-table tbody tr:nth-child(odd) {
            background-color: #ffffff;
        }

        .attendance-table tbody tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        .attendance-table tbody tr:hover {
            background-color: #e3f2fd;
        }

        .attendance-table tbody tr.selected-row {
            background-color: #e3f2fd !important;
        }

        .attendance-table tbody td {
            padding: 8px;
            border: 1px solid #dee2e6;
            text-align: center;
        }

    /* Status Dropdown Styling */
    .status-dropdown {
        width: 100%;
        padding: 6px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
    }

        .status-dropdown:focus {
            border-color: #9c27b0;
            box-shadow: 0 0 0 2px rgba(156, 39, 176, 0.1);
            outline: none;
        }

    /* Status Color Coding */
    .status-present {
        background-color: #d4edda;
        color: #155724;
    }

    .status-absent {
        background-color: #f8d7da;
        color: #721c24;
    }

    .status-late {
        background-color: #fff3cd;
        color: #856404;
    }

    .status-halfday {
        background-color: #cce5ff;
        color: #004085;
    }

    .status-holiday {
        background-color: #e2e3e5;
        color: #383d41;
    }

    /* Time Input Styling - Updated for Flatpickr */
    .time-input {
        width: 100px;
        padding: 6px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 13px;
        text-align: center;
        background-color: white;
        cursor: pointer;
    }

        .time-input:focus {
            border-color: #9c27b0;
            box-shadow: 0 0 0 2px rgba(156, 39, 176, 0.1);
            outline: none;
        }

    /* Flatpickr custom styling */
    .flatpickr-calendar {
        box-shadow: 0 5px 10px rgba(0,0,0,0.2);
        border-radius: 4px;
    }

    .flatpickr-time {
        border-top: 1px solid #e6e6e6;
    }

    .flatpickr-am-pm {
        cursor: pointer;
    }

    /* Note Input Styling */
    .note-input {
        width: 100%;
        padding: 6px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 13px;
    }

    /* Button Styling */
    .search-button {
        background: linear-gradient(to bottom, #1c79eb, #2c78bf, #155ab5);
        color: white;
        padding: 0.5rem 1.5rem;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        transition: transform 0.2s;
    }

        .search-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        }

        .search-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

    .btn-secondary {
        background: #6c757d;
        color: white;
        padding: 0.5rem 1.5rem;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: not-allowed;
    }

    .save-button {
        background: linear-gradient(to right, #28a745, #20c997);
        color: white;
        padding: 12px 40px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s;
    }

        .save-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
        }

        .save-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .batch-apply-btn {
        background: #17a2b8;
        color: white;
        padding: 8px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
    }

        .batch-apply-btn:hover {
            background: #138496;
        }

    /* Checkbox Styling */
    .student-checkbox {
        width: 18px;
        height: 18px;
        cursor: pointer;
    }

    /* Toast Styling */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 99999;
    }

    .toast {
        min-width: 300px;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        animation: slideIn 0.3s;
        font-weight: 500;
        font-size: 14px;
    }

    .toast-success {
        background: #d4edda;
        border-left: 4px solid #28a745;
        color: #155724;
    }

    .toast-error {
        background: #f8d7da;
        border-left: 4px solid #dc3545;
        color: #721c24;
    }

    .toast-warning {
        background: #fff3cd;
        border-left: 4px solid #ffc107;
        color: #856404;
    }

    .toast-info {
        background: #d1ecf1;
        border-left: 4px solid #17a2b8;
        color: #0c5460;
    }

    /* Spinner */
    .spinner-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .spinner-box {
        background: white;
        padding: 30px;
        border-radius: 10px;
        text-align: center;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #9c27b0;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 15px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    #attendanceDataTable tbody tr:nth-child(odd),
    .attendance-table tbody tr:nth-child(odd) {
        background-color: #ffffff !important;
    }
    /* DataTable Button Styling */
    .dataTables_wrapper .dataTables_length select {
        padding: 5px;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

    .dataTables_wrapper .dataTables_filter input {
        padding: 5px 10px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        margin-left: 10px;
    }

    .dataTables_wrapper .dataTables_info {
        padding: 8px 0;
        font-size: 14px;
        color: #666;
    }

    .dataTables_wrapper .dataTables_paginate {
        padding: 8px 0;
    }

        .dataTables_wrapper .dataTables_paginate .paginate_button {
            padding: 5px 10px;
            margin: 0 2px;
            border: 1px solid #dee2e6;
            border-radius: 3px;
            cursor: pointer;
            background: white;
            color: #495057;
        }

            .dataTables_wrapper .dataTables_paginate .paginate_button.current {
                background: linear-gradient(to bottom, #1c79eb, #155ab5);
                color: white !important;
                border: 1px solid #155ab5;
            }

            .dataTables_wrapper .dataTables_paginate .paginate_button:hover:not(.disabled):not(.current) {
                background: #e9ecef;
                color: #495057;
            }

    /* Student info cell styling */
    .student-info-cell {
        text-align: left !important;
        font-size: 13px;
    }

    /* Summary badges */
    .attendance-summary {
        display: inline-block;
        padding: 4px 10px;
        border-radius: 4px;
        font-size: 12px;
        margin-left: 10px;
    }

    /* Modified row indicator */
    .modified-row {
        border-left: 3px solid #ffc107 !important;
    }

    /* Invalid date selection */
    .border-danger {
        border: 2px solid #dc3545 !important;
        background-color: #fff5f5 !important;
        animation: shake 0.3s;
    }

    @@keyframes shake {
        0%, 100% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        75% {
            transform: translateX(5px);
        }
    }

    /* Date validation message */
    .date-validation-msg {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        display: none;
        padding: 5px 10px;
        background-color: #f8d7da;
        border-left: 3px solid #dc3545;
        border-radius: 3px;
    }

        .date-validation-msg.show {
            display: block;
            animation: slideDown 0.3s ease;
        }

    @@keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .table.dataTable > tbody > tr:nth-child(odd) td {
        background-color: #f9f9f9; /* light shade */
        color: #515B73;
    }

    .table.dataTable > tbody > tr:nth-child(even) td {
        background-color: lightgray; /* gray shade */
        color: #515B73;
    }

    .table.dataTable > tbody > tr td {
        border-bottom: 1px solid #E9EDF4;
        padding: 12px 20px;
    }

    .date-validation-msg.show {
        display: block;
        animation: slideDown 0.3s ease;
        color: #dc3545 !important; /* Red color for warning */
        font-weight: bold;
    }
</style>

<div class="container-fluid">
    <!-- Header Card -->
    <div class="card">
        <div class="card-header bg-light">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="fas fa-calendar-check me-2"></i>Attendance Entry
                </h5>
            </div>
        </div>
        <div class="card-body">
            <form id="searchForm" class="needs-validation" novalidate>
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="ddlClass" class="form-label">Class <span class="text-danger">*</span></label>
                        @Html.DropDownListFor(x => x.Classes, Model.Classes, "Select Class", new { @class = "form-select", id = "ddlClass" })
                    </div>
                    <div class="col-md-3">
                        <label for="ddlSection" class="form-label">Section <span class="text-danger">*</span></label>
                        @Html.DropDownListFor(x => x.Sections, Model.Sections, "Select Section", new { @class = "form-select", id = "ddlSection" })
                    </div>
                    <div class="col-md-3">
                        <label for="attendanceDate" class="form-label">Date <span class="text-danger">*</span></label>
                        <input type="date" class="form-control" id="attendanceDate" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">&nbsp;</label>
                        <button type="button" class="btn search-button w-100" id="btnSearch">
                            <i class="fas fa-search me-2"></i>Search
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Attendance Entry Grid -->
    <div id="attendanceContainer" class="mt-4" style="display:none;">
        <div class="card">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">
                        <i class="fas fa-users me-2"></i>
                        <span id="classInfo"></span>
                        <span class="attendance-summary badge bg-info" id="studentCount">0 students</span>
                        <span class="attendance-summary badge bg-success" id="presentCount" style="display:none">0 present</span>
                        <span class="attendance-summary badge bg-danger" id="absentCount" style="display:none">0 absent</span>
                    </h6>
                    <div>
                        <select id="batchStatus" class="form-select form-select-sm d-inline-block" style="width: 150px;">
                            <option value="">Select Status</option>
                            <option value="Present">Present</option>
                            <option value="Absent">Absent</option>
                            <option value="Late">Late</option>
                            <option value="Half Day">Half Day</option>
                        </select>
                        <button class="btn btn-sm batch-apply-btn ms-2" onclick="applyBatchStatus()">
                            Apply to Selected
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table attendance-table" id="attendanceDataTable">
                        <thead>
                            <tr id="tableHeader">
                                <th><input type="checkbox" id="selectAll" class="student-checkbox"></th>
                                <th align="center" style="text-align:center">Adm.</th>
                                <th align="center" style="text-align:center">Class</th>
                                <th align="center" style="text-align:center">Mobile</th>
                                <th align="center" style="text-align:center">Name</th>
                                <th align="center" style="text-align:center">Father</th>
                                <th align="center" style="text-align:center">Roll</th>
                                <th width="80" style="text-align:center">Status</th>
                                <th align="center" style="text-align:center">Source</th>
                                <th align="center" style="text-align:center">Time-in</th>
                                <th align="center" style="text-align:center">Time-out</th>
                                <th width="120" style="text-align:center">Note</th>
                            </tr>
                        </thead>
                        <tbody id="attendanceTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>
                <div class="text-center mt-4">
                    <button type="button" class="save-button" id="btnSave">
                        <i class="fas fa-save me-2"></i>Save Attendance
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container" id="toastContainer"></div>

<!-- Spinner Overlay -->
<div class="spinner-overlay" id="spinnerOverlay">
    <div class="spinner-box">
        <div class="spinner"></div>
        <div>Loading data...</div>
    </div>
</div>

<!-- Add Flatpickr JS -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
$(document).ready(function() {
    var dataTable = null;
    var currentClassId = '';
    var currentSectionId = '';
    var currentDate = '';
    var studentsData = [];
    var holidayDates = {};
    var defaultConfig = {
        DefaultTimeIn: "8:30 AM",
        DefaultTimeOut: "2:45 PM"
    };
    var originalAttendance = {};
    var modifiedAttendance = {};
    var flatpickrInstances = {};

    // Load holidays on page load
    loadHolidays();

    // Load holidays from database
    function loadHolidays() {
        $.ajax({
            url: '@Url.Action("GetHolidaysForValidation", "Attendance")',
            type: 'GET',
            success: function(response) {
                if (response.success) {
                    holidayDates = {};
                    response.holidays.forEach(function(holiday) {
                        holidayDates[holiday.date] = holiday.name;
                    });
                    console.log('Holidays loaded:', holidayDates);
                }
            },
            error: function() {
                console.error('Failed to load holidays');
            }
        });
    }

    // Time conversion helper functions
    function convertTo12Hour(time24) {
        if (!time24) return '08:30 AM';

        if (time24.includes('AM') || time24.includes('PM')) {
            return time24;
        }

        var parts = time24.split(':');
        var hours = parseInt(parts[0]);
        var minutes = parts[1];
        var suffix = hours >= 12 ? 'PM' : 'AM';

        if (hours === 0) {
            hours = 12;
        } else if (hours > 12) {
            hours = hours - 12;
        }

        return hours + ':' + minutes + ' ' + suffix;
    }

    function convertTo24Hour(time12) {
        if (!time12) return '08:30';

        if (!time12.includes('AM') && !time12.includes('PM')) {
            return time12;
        }

        time12 = time12.trim();

        var parts = time12.split(' ');
        if (parts.length !== 2) {
            console.error('Invalid time format:', time12);
            return '08:30';
        }

        var time = parts[0];
        var modifier = parts[1].toUpperCase();

        var timeParts = time.split(':');
        if (timeParts.length !== 2) {
            console.error('Invalid time parts:', time);
            return '08:30';
        }

        var hours = parseInt(timeParts[0]);
        var minutes = timeParts[1];

        if (modifier === 'PM' && hours !== 12) {
            hours = hours + 12;
        } else if (modifier === 'AM' && hours === 12) {
            hours = 0;
        }

        hours = hours.toString().padStart(2, '0');

        var result = hours + ':' + minutes;
        console.log('Converted', time12, 'to', result);
        return result;
    }

    // Complete date validation function
    function validateDate(dateString) {
        var errors = [];
        var warnings = [];

        if (!dateString) {
            errors.push('Please select a date');
            return { isValid: false, errors: errors, warnings: warnings };
        }

        var selectedDate = new Date(dateString + 'T00:00:00');
        var today = new Date();
        today.setHours(0, 0, 0, 0);
        selectedDate.setHours(0, 0, 0, 0);

        // Check future date
        if (selectedDate > today) {
            errors.push('Cannot mark attendance for future dates');
        }

        // Check Sunday
        if (selectedDate.getDay() === 0) {
            errors.push('Cannot mark attendance on Sunday');
        }

        // Check holidays from database
        if (holidayDates[dateString]) {
            errors.push('Cannot mark attendance on holiday: ' + holidayDates[dateString]);
        }

        return {
            isValid: errors.length === 0,
            errors: errors,
            warnings: warnings
        };
    }

    // Get day name from date
    function getDayName(dateString) {
        var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        var date = new Date(dateString + 'T00:00:00');
        return days[date.getDay()];
    }

    // Destroy all Flatpickr instances
    function destroyAllFlatpickrs() {
        for (var key in flatpickrInstances) {
            if (flatpickrInstances[key]) {
                flatpickrInstances[key].destroy();
                delete flatpickrInstances[key];
            }
        }
    }

    // Initialize Flatpickr time pickers
    function initializeTimePickers() {
        destroyAllFlatpickrs();

        $('.time-in').each(function() {
            var $this = $(this);
            var currentValue = $this.val() || defaultConfig.DefaultTimeIn || '8:30 AM';
            var studentId = $this.data('studentid');
            var instanceKey = 'timein_' + studentId;

            if (!$this.attr('data-time24')) {
                $this.attr('data-time24', convertTo24Hour(currentValue));
            }

            flatpickrInstances[instanceKey] = flatpickr($this[0], {
                enableTime: true,
                noCalendar: true,
                dateFormat: "h:i K",
                time_24hr: false,
                defaultDate: currentValue,
                minuteIncrement: 15,
                onChange: function(selectedDates, dateStr, instance) {
                    var time24 = convertTo24Hour(dateStr);
                    var oldTime24 = $this.attr('data-time24');

                    if (oldTime24 !== time24) {
                        $this.attr('data-time24', time24);
                        console.log('Time-IN changed:',
                                   'Student:', studentId,
                                   'Old:', oldTime24,
                                   'New 12hr:', dateStr,
                                   'New 24hr:', time24);
                        trackModification($this);
                    }
                }
            });
        });

        $('.time-out').each(function() {
            var $this = $(this);
            var currentValue = $this.val() || defaultConfig.DefaultTimeOut || '2:45 PM';
            var studentId = $this.data('studentid');
            var instanceKey = 'timeout_' + studentId;

            if (!$this.attr('data-time24')) {
                $this.attr('data-time24', convertTo24Hour(currentValue));
            }

            flatpickrInstances[instanceKey] = flatpickr($this[0], {
                enableTime: true,
                noCalendar: true,
                dateFormat: "h:i K",
                time_24hr: false,
                defaultDate: currentValue,
                minuteIncrement: 15,
                onChange: function(selectedDates, dateStr, instance) {
                    var time24 = convertTo24Hour(dateStr);
                    var oldTime24 = $this.attr('data-time24');

                    if (oldTime24 !== time24) {
                        $this.attr('data-time24', time24);
                        console.log('Time-OUT changed:',
                                   'Student:', studentId,
                                   'Old:', oldTime24,
                                   'New 12hr:', dateStr,
                                   'New 24hr:', time24);
                        trackModification($this);
                    }
                }
            });
        });
    }

    // Toast notification function
    function showToast(message, type, duration) {
        type = type || 'success';
        duration = duration || 4000;

        var icons = {
            success: 'check-circle',
            error: 'times-circle',
            warning: 'exclamation-triangle',
            info: 'info-circle'
        };

        var toastId = 'toast_' + Date.now();
        var toastHtml =
            '<div class="toast toast-' + type + '" id="' + toastId + '" style="display:none;">' +
                '<i class="fas fa-' + icons[type] + ' me-2"></i>' +
                message +
            '</div>';

        $('#toastContainer').append(toastHtml);
        $('#' + toastId).fadeIn(300);

        setTimeout(function() {
            $('#' + toastId).fadeOut(300, function() {
                $(this).remove();
            });
        }, duration);
    }

    // Show/Hide spinner
    function showSpinner() {
        $('#spinnerOverlay').css('display', 'flex');
    }

    function hideSpinner() {
        $('#spinnerOverlay').hide();
    }

    // Date change event handler with validation - ONLY SHOW TOAST
    // Date change event handler with validation - ONLY SHOW TOAST
    $('#attendanceDate').change(function () {
        var selectedDate = $(this).val();

        // Remove any existing validation messages
        $('#dateValidationMsg').remove();

        if (!selectedDate) {
            $(this).removeClass('border-danger');
            $('#btnSearch').prop('disabled', false);
            return;
        }

        var validation = validateDate(selectedDate);

        if (!validation.isValid) {
            // Add visual indicator to date field
            $(this).addClass('border-danger');

            // Just disable search button - don't change text
            $('#btnSearch').hide();

            // ONLY show toast - no duplicate message
            showToast(validation.errors.join('. '), 'error', 5000);

            // Hide attendance container if visible
            $('#attendanceContainer').hide();
            if (dataTable) {
                dataTable.destroy();
                dataTable = null;
            }
        } else {
            // Valid date - clear all validation indicators
            $(this).removeClass('border-danger');

            // Enable search button
            $('#btnSearch').show();

            console.log('Valid date selected:', getDayName(selectedDate));
        }
    });

    // Search button click with validation
    // Search button click with validation
    $('#btnSearch').click(function () {
        var classId = $('#ddlClass').val();
        var sectionId = $('#ddlSection').val();
        var date = $('#attendanceDate').val();

        var errors = [];
        if (!classId) errors.push('Please select a class');
        if (!sectionId) errors.push('Please select a section');
        if (!date) errors.push('Please select a date');

        if (errors.length > 0) {
            showToast(errors.join(', '), 'warning');
            return;
        }

        var dateValidation = validateDate(date);
        if (!dateValidation.isValid) {
            showToast(dateValidation.errors.join('. '), 'error', 5000);
            return;
        }

        currentClassId = classId;
        currentSectionId = sectionId;
        currentDate = date;

        loadAttendanceData(classId, sectionId, date);
    });

    // Load attendance data with server validation handling
    function loadAttendanceData(classId, sectionId, date) {
        showSpinner();

        $.ajax({
            url: '@Url.Action("GetStudentsForAttendance", "Attendance")',
            type: 'POST',
            data: {
                classId: classId,
                sectionId: sectionId,
                attendanceDate: date
            },
            success: function(response) {
                hideSpinner();

                if (response.success) {
                    studentsData = response.students;

                    if (response.config) {
                        defaultConfig = response.config;
                        console.log('Config received from server:', defaultConfig);
                    }

                    originalAttendance = {};
                    modifiedAttendance = {};

                    if (response.existingAttendance) {
                        $.each(response.existingAttendance, function(i, att) {
                            originalAttendance[att.StudentID] = {
                                Status: att.Status,
                                TimeIn: att.TimeIn,
                                TimeOut: att.TimeOut,
                                Note: att.Note
                            };
                        });
                    }

                    displayAttendanceGrid(response);
                    $('#attendanceContainer').show();
                    showToast('Data loaded successfully! ' + response.students.length + ' students found', 'success');

                    if (response.isHoliday) {
                        showToast('Note: Selected date is marked as a holiday in the system', 'warning');
                    }
                } else {
                    // Handle validation errors from server - ONLY show toast
                    if (response.validationError) {
                        showToast(response.message, 'error', 5000);
                        $('#attendanceContainer').hide();

                        // Also update the date field to show it's invalid
                        $('#attendanceDate').addClass('border-danger');
                    } else {
                        showToast(response.message || 'Failed to load data', 'error');
                    }
                }
            },
            error: function(xhr, status, error) {
                hideSpinner();
                showToast('An error occurred while loading data', 'error');
                console.error('Load error:', error);
            }
        });
    }

    // Display attendance grid with DataTable
    function displayAttendanceGrid(data) {
        if (!data.students || data.students.length === 0) {
            $('#attendanceContainer').html(
                '<div class="alert alert-info">' +
                    '<i class="fas fa-info-circle me-2"></i>' +
                    'No students found for the selected criteria' +
                '</div>'
            );
            return;
        }

        $('#studentCount').text(data.students.length + ' students');
        $('#classInfo').text('Student List');

        var bodyHtml = '';
        $.each(data.students, function(index, student) {
            var existingAtt = originalAttendance[student.StudentID] || {};
            var status = existingAtt.Status || student.Status || 'Present';

            var defaultTimeIn24 = convertTo24Hour(defaultConfig.DefaultTimeIn || '8:30 AM');
            var defaultTimeOut24 = convertTo24Hour(defaultConfig.DefaultTimeOut || '2:45 PM');

            var timeIn = existingAtt.TimeIn || student.TimeIn || defaultTimeIn24;
            var timeOut = existingAtt.TimeOut || student.TimeOut || defaultTimeOut24;
            var note = existingAtt.Note || student.Note || '';

            if (timeIn && (timeIn.includes('AM') || timeIn.includes('PM'))) {
                timeIn = convertTo24Hour(timeIn);
            }
            if (timeOut && (timeOut.includes('AM') || timeOut.includes('PM'))) {
                timeOut = convertTo24Hour(timeOut);
            }

            var timeIn12 = convertTo12Hour(timeIn);
            var timeOut12 = convertTo12Hour(timeOut);

            bodyHtml += '<tr data-studentid="' + student.StudentID + '">' +
                     '<td class="text-center"><input type="checkbox" class="student-checkbox row-checkbox"></td>' +
                     '<td>' + student.AdmissionNo + '</td>' +
                     '<td>' + student.ClassName + '-' + student.SectionName + '</td>' +
                     '<td>' + (student.MobileNumber || '-') + '</td>' +
                     '<td class="student-info-cell"><strong>' + student.StudentName + '</strong></td>' +
                     '<td class="student-info-cell">' + student.FatherName + '</td>' +
                     '<td><span class="badge bg-danger">' + (student.RollNumber || '-') + '</span></td>' +
                     '<td>' +
                        '<select class="status-dropdown" ' +
                        'data-studentid="' + student.StudentID + '" ' +
                        'data-original="' + status + '">' +
                            '<option value="Present"' + (status === 'Present' ? ' selected' : '') + '>Present</option>' +
                            '<option value="Absent"' + (status === 'Absent' ? ' selected' : '') + '>Absent</option>' +
                            '<option value="Late"' + (status === 'Late' ? ' selected' : '') + '>Late</option>' +
                            '<option value="Half Day"' + (status === 'Half Day' ? ' selected' : '') + '>Half Day</option>' +
                        '</select>' +
                     '</td>' +
                     '<td>Manual</td>' +
                     '<td><input type="text" class="time-input time-in" ' +
                        'data-studentid="' + student.StudentID + '" ' +
                        'data-original="' + timeIn + '" ' +
                        'data-time24="' + timeIn + '" ' +
                        'value="' + timeIn12 + '"></td>' +
                     '<td><input type="text" class="time-input time-out" ' +
                        'data-studentid="' + student.StudentID + '" ' +
                        'data-original="' + timeOut + '" ' +
                        'data-time24="' + timeOut + '" ' +
                        'value="' + timeOut12 + '"></td>' +
                     '<td><input maxlength="50" type="text" class="note-input" ' +
                        'data-studentid="' + student.StudentID + '" ' +
                        'data-original="' + note + '" ' +
                        'placeholder="Note" value="' + note + '"></td>' +
                     '</tr>';
        });

        $('#attendanceTableBody').html(bodyHtml);
        initializeDataTable();
    }

    // Initialize DataTable
    function initializeDataTable() {
        if (dataTable) {
            dataTable.destroy();
        }

        dataTable = $('#attendanceDataTable').DataTable({
            "paging": false,
            "info": false,
            "pageLength": -1,
            "order": [[1, "asc"]],
            "scrollX": true,
            "lengthChange": false,
            "responsive": false,
            "dom": 'frtip',
            "language": {
                "search": "Search students:",
                "lengthMenu": "Show _MENU_ entries",
                "info": "Showing _START_ to _END_ of _TOTAL_ students",
                "paginate": {
                    "first": "First",
                    "last": "Last",
                    "next": "Next",
                    "previous": "Previous"
                }
            },
            "columnDefs": [
                {
                    "orderable": false,
                    "targets": [0]
                }
            ],
            "drawCallback": function(settings) {
                bindAttendanceEvents();
                updateAttendanceSummary();
            }
        });

        bindAttendanceEvents();
        updateAttendanceSummary();
    }

    // Bind attendance events
    function bindAttendanceEvents() {
        $('.status-dropdown').off();
        $('.note-input').off();
        $('#selectAll').off();
        $('.row-checkbox').off();

        initializeTimePickers();

        $('.status-dropdown').on('change', function() {
            var $this = $(this);
            updateStatusColor($this);
            trackModification($this);
            updateAttendanceSummary();
        });

        $('.note-input').on('change input', function() {
            trackModification($(this));
        });

        $('#selectAll').on('change', function() {
            var isChecked = $(this).prop('checked');
            if (dataTable) {
                dataTable.$('.row-checkbox').prop('checked', isChecked);
                if (isChecked) {
                    dataTable.$('tr').addClass('selected-row');
                } else {
                    dataTable.$('tr').removeClass('selected-row');
                }
            }
        });

        $('.row-checkbox').on('change', function() {
            var $row = $(this).closest('tr');
            if ($(this).is(':checked')) {
                $row.addClass('selected-row');
            } else {
                $row.removeClass('selected-row');
            }

            var totalCheckboxes = $('.row-checkbox').length;
            var checkedCheckboxes = $('.row-checkbox:checked').length;
            $('#selectAll').prop('checked', totalCheckboxes === checkedCheckboxes);
        });

        $('.status-dropdown').each(function() {
            updateStatusColor($(this));
        });
    }

    // Update status color
    function updateStatusColor($select) {
        var status = $select.val();
        $select.removeClass('status-present status-absent status-late status-halfday status-holiday');

        switch(status) {
            case 'Present':
                $select.addClass('status-present');
                break;
            case 'Absent':
                $select.addClass('status-absent');
                break;
            case 'Late':
                $select.addClass('status-late');
                break;
            case 'Half Day':
                $select.addClass('status-halfday');
                break;
            case 'Holiday':
                $select.addClass('status-holiday');
                break;
        }
    }

    // Track modifications
    function trackModification($element) {
        var studentId = $element.data('studentid');
        if (!studentId) {
            console.warn('No student ID found for element:', $element);
            return;
        }

        var $row = $element.closest('tr');
        if ($row.length === 0) {
            console.warn('No row found for element:', $element);
            return;
        }

        var $timeIn = $row.find('.time-in');
        var $timeOut = $row.find('.time-out');

        var timeInValue = $timeIn.attr('data-time24');
        var timeOutValue = $timeOut.attr('data-time24');

        if (!timeInValue || timeInValue === 'undefined') {
            var timeIn12 = $timeIn.val();
            if (timeIn12 && (timeIn12.includes('AM') || timeIn12.includes('PM'))) {
                timeInValue = convertTo24Hour(timeIn12);
                $timeIn.attr('data-time24', timeInValue);
            } else {
                timeInValue = timeIn12 || convertTo24Hour(defaultConfig.DefaultTimeIn || '08:30 AM');
            }
        }

        if (!timeOutValue || timeOutValue === 'undefined') {
            var timeOut12 = $timeOut.val();
            if (timeOut12 && (timeOut12.includes('AM') || timeOut12.includes('PM'))) {
                timeOutValue = convertTo24Hour(timeOut12);
                $timeOut.attr('data-time24', timeOutValue);
            } else {
                timeOutValue = timeOut12 || convertTo24Hour(defaultConfig.DefaultTimeOut || '2:45 PM');
            }
        }

        var currentData = {
            Status: $row.find('.status-dropdown').val(),
            TimeIn: timeInValue,
            TimeOut: timeOutValue,
            Note: $row.find('.note-input').val()
        };

        var originalData = originalAttendance[studentId] || {
            Status: 'Present',
            TimeIn: convertTo24Hour(defaultConfig.DefaultTimeIn || '08:30 AM'),
            TimeOut: convertTo24Hour(defaultConfig.DefaultTimeOut || '2:45 PM'),
            Note: ''
        };

        console.log('Tracking modification for student:', studentId);
        console.log('Current data:', currentData);
        console.log('Original data:', originalData);

        var hasChanged = JSON.stringify(currentData) !== JSON.stringify(originalData);

        if (hasChanged) {
            modifiedAttendance[studentId] = currentData;
            $row.addClass('modified-row');
            console.log('Data changed - marked as modified');
        } else {
            delete modifiedAttendance[studentId];
            $row.removeClass('modified-row');
            console.log('Data unchanged - removed modification');
        }
    }

    // Update attendance summary
    function updateAttendanceSummary() {
        var presentCount = 0;
        var absentCount = 0;
        var totalCount = 0;

        if (dataTable) {
            dataTable.$('.status-dropdown').each(function() {
                totalCount++;
                var status = $(this).val();
                if (status === 'Present') {
                    presentCount++;
                } else if (status === 'Absent') {
                    absentCount++;
                }
            });
        }

        $('#studentCount').text(totalCount + ' students');
        //$('#presentCount').text(presentCount + ' present').show();
        //$('#absentCount').text(absentCount + ' absent').show();
    }

    // Apply batch status
    window.applyBatchStatus = function() {
        var status = $('#batchStatus').val();
        if (!status) {
            showToast('Please select a status', 'error');
            return;
        }

        var checkedCount = 0;

        if (dataTable) {
            dataTable.$('.row-checkbox:checked').each(function() {
                var $row = $(this).closest('tr');
                var $dropdown = $row.find('.status-dropdown');
                $dropdown.val(status);
                updateStatusColor($dropdown);
                trackModification($dropdown);
                checkedCount++;
            });
        }

        if (checkedCount === 0) {
            showToast('Please select students first', 'error');
        } else {
            showToast('Status applied to ' + checkedCount + ' students', 'success');
            $('#batchStatus').val('');
            updateAttendanceSummary();
        }
    };

    // Save attendance with validation
    $('#btnSave').click(function() {
        var dateValidation = validateDate(currentDate);
        if (!dateValidation.isValid) {
            showToast('Cannot save: ' + dateValidation.errors.join('. '), 'error');
            return;
        }

        if (!confirm('Do you want to save attendance for all students?')) {
            return;
        }

        var attendanceData = [];

        if (dataTable) {
            dataTable.$('tbody tr').each(function() {
                var $row = $(this);
                var studentId = $row.data('studentid');
                var $timeIn = $row.find('.time-in');
                var $timeOut = $row.find('.time-out');

                var timeInValue = $timeIn.attr('data-time24');
                var timeOutValue = $timeOut.attr('data-time24');

                if (!timeInValue || timeInValue === 'undefined') {
                    var timeIn12 = $timeIn.val();
                    if (timeIn12) {
                        if (timeIn12.includes('AM') || timeIn12.includes('PM')) {
                            timeInValue = convertTo24Hour(timeIn12);
                        } else {
                            timeInValue = timeIn12;
                        }
                    } else {
                        timeInValue = convertTo24Hour(defaultConfig.DefaultTimeIn || '08:30 AM');
                    }
                }

                if (!timeOutValue || timeOutValue === 'undefined') {
                    var timeOut12 = $timeOut.val();
                    if (timeOut12) {
                        if (timeOut12.includes('AM') || timeOut12.includes('PM')) {
                            timeOutValue = convertTo24Hour(timeOut12);
                        } else {
                            timeOutValue = timeOut12;
                        }
                    } else {
                        timeOutValue = convertTo24Hour(defaultConfig.DefaultTimeOut || '2:45 PM');
                    }
                }

                var attendanceRecord = {
                    StudentID: studentId,
                    Status: $row.find('.status-dropdown').val(),
                    TimeIn: timeInValue,
                    TimeOut: timeOutValue,
                    Note: $row.find('.note-input').val()
                };

                attendanceData.push(attendanceRecord);
            });
        }

        if (attendanceData.length === 0) {
            showToast('No data to save', 'error');
            return;
        }

        showSpinner();
        $('#btnSave').prop('disabled', true)
            .html('<i class="fas fa-spinner fa-spin me-2"></i>Saving...');

        $.ajax({
            url: '@Url.Action("SaveAttendance", "Attendance")',
            type: 'POST',
            data: JSON.stringify({
                Attendance: attendanceData,
                ClassId: currentClassId,
                SectionId: currentSectionId,
                AttendanceDate: currentDate
            }),
            contentType: 'application/json',
            success: function(response) {
                hideSpinner();

                if (response.success) {
                    showToast(response.message || 'Attendance saved successfully!', 'success');
                    setTimeout(function() {
                        location.reload();
                    }, 1000);
                } else {
                    if (response.validationError) {
                        showToast('Validation Error: ' + response.message, 'error', 5000);
                    } else {
                        showToast(response.message || 'Failed to save', 'error');
                    }
                    $('#btnSave').html('<i class="fas fa-save me-2"></i>Save Attendance')
                        .prop('disabled', false);
                }
            },
            error: function(xhr, status, error) {
                hideSpinner();
                showToast('An error occurred while saving', 'error');
                console.error('Save error:', error);
                console.error('Server response:', xhr.responseText);
                $('#btnSave').html('<i class="fas fa-save me-2"></i>Save Attendance')
                    .prop('disabled', false);
            }
        });
    });

    // Export to Excel
    $('#btnExportData').click(function() {
        if (dataTable) {
            $('.dt-button.buttons-excel').click();
        } else {
            showToast('Please load data first', 'warning');
        }
    });

    // Hide container when filters change
    $('#ddlClass, #ddlSection').change(function() {
        $('#attendanceContainer').hide();
        if (dataTable) {
            dataTable.destroy();
            dataTable = null;
        }
        destroyAllFlatpickrs();
        modifiedAttendance = {};
        originalAttendance = {};
    });

    // Set date constraints on page load
    var today = new Date();
    var todayString = today.toISOString().split('T')[0];
    $('#attendanceDate').attr('max', todayString);

    // Trigger validation on initial date
    var initialDate = $('#attendanceDate').val();
    if (initialDate) {
        $('#attendanceDate').trigger('change');
    }

    // Cleanup on page unload
    $(window).on('beforeunload', function() {
        destroyAllFlatpickrs();
    });
});
</script>
