@{
    ViewBag.Title = "Configuration Management";
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js" integrity="sha512-AA1Bzp5Q0K1KanKKmvN/4d3IRKVlv9PYgwFPvm32nPO6QS8yH1HO7LbgB1pgiOxPtfeg5zEn2ba64MUcqJx6CA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<div class="breadcrumbs-area">
    <h3>System Configuration</h3>
    <ul>
        <li><a href="@Url.Action("", "SiteMap")">Home</a></li>
        <li>Configuration</li>
    </ul>
</div>

<!-- Key-Value Management App -->
<div id="keyValueApp">
    <!-- Key-Value Form Card -->
    <div class="card height-auto">
        <div class="card-body">
            <div class="heading-layout1">
                <div class="item-title">
                    <h3 id="formTitle">Add New Configuration</h3>
                </div>
            </div>
            <form id="keyValueForm" class="new-added-form">
                <div class="row">
                    <input type="hidden" id="configId">

                    <div class="col-xl-3 col-lg-6 col-12 form-group">
                        <label>Key Name *</label>
                        <input type="text" id="keyName" placeholder="" class="form-control required">
                    </div>
                    <div class="col-xl-3 col-lg-6 col-12 form-group">
                        <label>Key Value *</label>
                        <input type="text" id="keyValue" placeholder="" class="form-control required">
                    </div>
                    <div class="col-xl-2 col-lg-6 col-12 form-group">
                        <label>Module *</label>
                        <select id="module" class="form-control required">
                            <option value="">Select Module</option>
                            <option value="System">System</option>
                            <option value="User">User</option>
                            <option value="Report">Report</option>
                            <option value="Notification">Notification</option>
                            <option value="Class">Class</option>
                        </select>
                    </div>
                    <div class="col-xl-2 col-lg-6 col-12 form-group">
                        <label>Sort Order</label>
                        <input type="number" id="sortOrder" placeholder="0" value="0" min="0" class="form-control">
                    </div>

                    <div class="col-xl-2 col-lg-6 col-12 form-group">
                        <label>&nbsp;</label>
                        <div class="button-group">
                            <button type="submit" id="submitBtn" class="btn-fill-lg btn-gradient-yellow btn-hover-bluedark">Save</button>
                            <button type="button" id="cancelBtn" class="btn-fill-lg btn-gradient-yellow btn-hover-bluedark">Cancel</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Key-Value List Card -->
    <div class="card height-auto">
        <div class="card-body">
            <div class="heading-layout1">
                <div class="item-title">
                    <h3>Configuration List</h3>
                </div>
                <div class="dropdown">
                    <button class="btn btn-secondary refresh-btn" id="refreshBtn">
                        <i class="fa fa-refresh"></i> Refresh
                    </button>
                </div>
            </div>
            <div class="table-responsive">
                <table id="keyValueDatatable" class="table table-striped table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Id</th>
                            <th>Key Name</th>
                            <th>Key Value</th>
                            <th>Module</th>
                            <th>Sort Order</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Data will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div id="notification-container" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>


<script>
/**
 * Key-Value Configuration Management Module
 * A module pattern implementation for better encapsulation and organization
 */
const KeyValueManager = (function() {
    // Private properties
    const apiEndpoints = {
        getAll: '@Url.Action("GetConfigurations", "Configuration")',
        getById: '@Url.Action("GetConfigurationById", "Configuration")',
        create: '@Url.Action("InsertConfiguration", "Configuration")',
        update: '@Url.Action("UpdateConfiguration", "Configuration")',
        delete: '@Url.Action("DeleteConfiguration", "Configuration")',
        getValues: '@Url.Action("GetConfigurationValues", "Configuration")'
    };

    const elements = {
        form: '#keyValueForm',
        formTitle: '#formTitle',
        idField: '#configId',
        submitBtn: '#submitBtn',
        cancelBtn: '#cancelBtn',
        refreshBtn: '#refreshBtn',
        datatable: '#keyValueDatatable',
        requiredFields: '.required'
    };

    let dataTable = null;

    // Private methods
    const initializeDataTable = function() {
        dataTable = $("#keyValueDatatable").DataTable({
            "processing": true,
            "serverSide": true,
            "filter": true,
            lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]],
            "ajax": {
                "url": apiEndpoints.getAll,
                "type": "POST",
                "datatype": "json"
            },
            "columnDefs": [{
                "targets": [0],
                "visible": false,
                "searchable": false
            }],
            "columns": [
                { data: 'Id', visible: false },
                { "data": "KeyName", "name": "KeyName", "autoWidth": true },
                { "data": "KeyValue", "name": "KeyValue", "autoWidth": true },
                { "data": "Module", "name": "Module", "autoWidth": true },
                { "data": "SortOrder", "name": "SortOrder", "autoWidth": true },
                {
                    data: null,
                    orderable: false,
                    className: 'text-center',
                    render: function (data, type, row) {
                        return `
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-primary btn-sm edit-btn" data-id="${row.Id}">
                                        <i class="fa fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-danger btn-sm delete-btn" data-id="${row.Id}">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </div>
                            `;
                    }
                },
            ],
            "order": [[ 3, "asc" ], [ 4, "asc" ]], // Default sort by Module, then SortOrder
            responsive: true,
            dom: 'Bfrtip',
            buttons: [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
        });
    };

    // Check if the value already exists for the same key and module
    const checkForDuplicateValue = async function(keyName, keyValue, module, currentId = '') {
        // Get the current data for this key and module
        return new Promise((resolve, reject) => {
            $.ajax({
                url: apiEndpoints.getValues,
                type: 'GET',
                data: { keyName: keyName, module: module },
                success: function(result) {
                    if (result.success) {
                        // Check if the value already exists (excluding the current record if we're editing)
                        const isDuplicate = result.data.some(item => {
                            return item.KeyValue === keyValue && item.Id.toString() !== currentId.toString();
                        });

                        resolve(isDuplicate);
                    } else {
                        reject(result.message || 'Error checking for duplicates');
                    }
                },
                error: function(xhr, status, error) {
                    reject(error);
                }
            });
        });
    };

    const bindEvents = function() {
        // Form submission
        $(elements.form).on('submit', async function(e) {
            e.preventDefault();

            // Disable submit button to prevent double submission
            $(elements.submitBtn).prop('disabled', true);

            try {
                const isValid = await validateForm();

                if (isValid) {
                    saveConfiguration();
                } else {
                    // Re-enable submit button if validation fails
                    $(elements.submitBtn).prop('disabled', false);
                }
            } catch (error) {
                console.error("Validation error:", error);
                Notification.show("An error occurred during validation. Please try again.", "error");
                $(elements.submitBtn).prop('disabled', false);
            }
        });

        // Cancel button
        $(elements.cancelBtn).on('click', resetForm);

        // Refresh button
        $(elements.refreshBtn).on('click', function() {
            refreshDataTable();
        });

        // Edit button (delegated event for dynamic elements)
        $(elements.datatable).on('click', '.edit-btn', function() {
            const configId = $(this).data('id');
            loadConfigurationForEdit(configId);
        });

        // Delete button (delegated event for dynamic elements)
        $(elements.datatable).on('click', '.delete-btn', function() {
            const configId = $(this).data('id');
            confirmDelete(configId);
        });
    };

    const validateForm = async function() {
        let isValid = true;

        // Clear previous validation styling
        $(elements.requiredFields).removeClass('is-invalid').next('.invalid-feedback').remove();
        $('#keyValue').removeClass('is-invalid').next('.invalid-feedback').remove();

        // Check each required field
        $(elements.requiredFields).each(function() {
            if (!$(this).val().trim()) {
                isValid = false;
                $(this).addClass('is-invalid');
                $(this).after(`<div class="invalid-feedback">This field is required</div>`);
            }
        });

        // If basic validation passes, check for duplicate values
        if (isValid) {
            try {
                const keyName = $('#keyName').val().trim();
                const keyValue = $('#keyValue').val().trim();
                const module = $('#module').val().trim();
                const currentId = $(elements.idField).val();

                const isDuplicate = await checkForDuplicateValue(keyName, keyValue, module, currentId);

                if (isDuplicate) {
                    isValid = false;
                    $('#keyValue').addClass('is-invalid');
                    $('#keyValue').after(`<div class="invalid-feedback">This value already exists for this key and module</div>`);
                }
            } catch (error) {
                console.error("Error checking for duplicates:", error);
                // If there's an error checking duplicates, we'll let the server-side validation catch it
            }
        }

        return isValid;
    };

    const getFormData = function() {
        return {
            KeyName: $('#keyName').val().trim(),
            KeyValue: $('#keyValue').val().trim(),
            Module: $('#module').val().trim(),
            SortOrder: parseInt($('#sortOrder').val()) || 0
        };
    };

    const resetForm = function() {
        $(elements.form)[0].reset();
        $(elements.idField).val('');
        $('#sortOrder').val('0');
        $(elements.submitBtn).text('Save');
        $(elements.formTitle).text('Add New Configuration');
        $(elements.requiredFields).removeClass('is-invalid').next('.invalid-feedback').remove();
        $('#keyValue').removeClass('is-invalid').next('.invalid-feedback').remove();
    };

    const saveConfiguration = function() {
        const config = getFormData();
        const isUpdate = $(elements.idField).val() !== '';

        if (isUpdate) {
            config.Id = $(elements.idField).val();
            performAjaxOperation(apiEndpoints.update, config, 'updating');
        } else {
            performAjaxOperation(apiEndpoints.create, config, 'creating');
        }
    };

    const loadConfigurationForEdit = function(id) {
        // Get configuration data by ID
        $.ajax({
            url: apiEndpoints.getById,
            type: 'GET',
            data: { id: id },
            success: function(data) {
                if (data) {
                    // Populate the form with configuration data
                    $(elements.idField).val(data.Id);
                    $('#keyName').val(data.KeyName);
                    $('#keyValue').val(data.KeyValue);
                    $('#module').val(data.Module);
                    $('#sortOrder').val(data.SortOrder);

                    // Update UI to indicate edit mode
                    $(elements.submitBtn).text('Update');
                    $(elements.formTitle).text('Edit Configuration');

                    // Scroll to form for better UX
                    $('html, body').animate({
                        scrollTop: $(elements.form).offset().top - 100
                    }, 500);
                } else {
                    Notification.show('Configuration not found.', 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('Error fetching configuration data:', error);
                Notification.show('An error occurred while fetching configuration data.', 'error');
            }
        });
    };

    const confirmDelete = function(id) {
        swal({
            title: "Are you sure?",
            text: "Once deleted, you will not be able to recover this configuration!",
            icon: "warning",
            buttons: ["Cancel", "Delete"],
            dangerMode: true,
        })
        .then((willDelete) => {
            if (willDelete) {
                deleteConfiguration(id);
            }
        });
    };

    const deleteConfiguration = function(id) {
        performAjaxOperation(apiEndpoints.delete, { id: id }, 'deleting');
    };

    const performAjaxOperation = function(url, data, operationType) {
        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            cache: false,
            beforeSend: function() {
                // Disable buttons during operation
                $(elements.submitBtn).prop('disabled', true);
                $(elements.cancelBtn).prop('disabled', true);
            },
            success: function(result) {
                if (result.success) {
                    // Reset form if it's a create or update operation
                    if (operationType !== 'deleting') {
                        resetForm();
                    }

                    // Refresh the data table
                    refreshDataTable();

                    // Show success message
                    Notification.show(result.message, 'success');
                } else {
                    // Show error message
                    Notification.show(result.message || `Failed while ${operationType} the configuration.`, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error(`${operationType} error:`, error);
                Notification.show(`An error occurred while ${operationType} the configuration.`, 'error');
            },
            complete: function() {
                // Re-enable buttons
                $(elements.submitBtn).prop('disabled', false);
                $(elements.cancelBtn).prop('disabled', false);
            }
        });
    };

    const refreshDataTable = function() {
        if (dataTable) {
            dataTable.ajax.reload();
            return;
        }

        // Fallback if datatable reference is lost
        if ($.fn.DataTable.isDataTable('#keyValueDatatable')) {
            $('#keyValueDatatable').DataTable().ajax.reload();
        }
    };

    // Public methods
    return {
        init: function() {
            initializeDataTable();
            bindEvents();
        }
    };
})();

/**
 * Notification Module
 * Handles all notifications in a consistent way
 */
const Notification = (function() {
    return {
        show: function(message, type) {
            swal({
                title: type === 'success' ? 'Success!' : 'Error!',
                text: message,
                icon: type,
                button: "OK",
            });
        }
    };
})();

// Initialize the application when the document is ready
$(document).ready(function() {
    KeyValueManager.init();
});
</script>

<style>
    .invalid-feedback {
        display: block;
        color: #dc3545;
        font-size: 80%;
        margin-top: 0.25rem;
    }

    .is-invalid {
        border-color: #dc3545;
    }

    .refresh-btn {
        margin-bottom: 15px;
    }

    .button-group {
        display: flex;
        gap: 10px;
    }
</style>