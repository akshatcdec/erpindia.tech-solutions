@model ERPIndia.Controllers.GradeConfigViewModel
@{
    ViewBag.Title = "Marks Setup";
}

<style>
    .product-style-table {
        width: 100%;
        border-collapse: collapse;
    }

        .product-style-table thead th {
            background: linear-gradient(180deg, #3EBFDA 0%, #1E5A8E 100%);
            color: #ffffff !important;
            font-weight: bold;
            text-align: center !important;
            padding: 12px 10px;
            border: 1px solid #ddd !important;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
            position: relative;
        }

        .product-style-table tbody tr:nth-child(odd) {
            background-color: #e3e8ed !important;
        }

        .product-style-table tbody tr:nth-child(even) {
            background-color: #ffffff !important;
        }

        .product-style-table tbody tr.selected-row {
            background-color: #e3f2fd !important;
        }

        .product-style-table tbody tr.table-warning {
            background-color: #fff3cd !important;
        }

        .product-style-table tbody td {
            padding: 8px 10px;
            border: 1px solid #ddd;
            text-align: left;
            background-color: transparent !important;
        }

        .product-style-table .form-check {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0;
        }

    .search-button {
        background: linear-gradient(to bottom, #E53E3E, #C53030);
        color: white;
        padding: 0.5rem 1rem;
        font-size: 14px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        transition: transform 0.2s ease;
    }

        .search-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
        }

    /* Updated Save Button Style with Gradient */
    /* Updated Save Button Style with Mobile Support */
.save-button {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 12px 28px;
    background: linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2);
    background: -webkit-linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2);
    background: -moz-linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2);
    background: -o-linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2);
    color: #fff !important; /* Force white color */
    font-size: 16px !important;
    font-weight: bold !important;
    font-family: inherit !important; /* Maintain consistent font */
    border: none;
    border-radius: 50px;
    cursor: pointer;
    text-decoration: none !important;
    box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    transition: transform 0.2s ease, box-shadow 0.3s ease;
    -webkit-transition: transform 0.2s ease, box-shadow 0.3s ease;
    -moz-transition: transform 0.2s ease, box-shadow 0.3s ease;
    -webkit-appearance: none; /* Remove iOS default styling */
    -moz-appearance: none;
    appearance: none;
    -webkit-tap-highlight-color: transparent; /* Remove tap highlight on mobile */
    outline: none !important;
}

.save-button:hover,
.save-button:focus,
.save-button:active {
    color: #fff !important; /* Maintain white color on all states */
    background: linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2) !important;
    background: -webkit-linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2) !important;
    text-decoration: none !important;
}

.save-button:hover {
    transform: translateY(-3px);
    -webkit-transform: translateY(-3px);
    box-shadow: 0 6px 14px rgba(0,0,0,0.3);
}

.save-button:active {
    transform: translateY(0px);
    -webkit-transform: translateY(0px);
    box-shadow: 0 2px 6px rgba(0,0,0,0.2);
}

.save-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    -webkit-transform: none;
}

.save-button .icon {
    font-size: 18px;
    color: inherit !important;
}

/* Mobile-specific styles */
@@media (max-width: 768px) {
    .save-button {
        padding: 10px 24px;
        font-size: 14px !important;
        background: linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2) !important;
        background: -webkit-linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2) !important;
        color: #fff !important;
        font-weight: bold !important;
        -webkit-tap-highlight-color: transparent;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        user-select: none;
    }

    .save-button .icon {
        font-size: 16px;
    }

    /* Prevent iOS from changing button appearance */
    .save-button,
    .save-button:hover,
    .save-button:focus,
    .save-button:active {
        -webkit-appearance: none !important;
        -moz-appearance: none !important;
        appearance: none !important;
        background: linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2) !important;
        background: -webkit-linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2) !important;
        color: #fff !important;
        border: none !important;
        outline: none !important;
    }
}

/* Ensure button text doesn't change color */
.save-button span {
    color: inherit !important;
}

/* Fix for iOS specific issues */
@@supports (-webkit-touch-callout: none) {
    .save-button {
        background: linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2) !important;
        background: -webkit-linear-gradient(90deg, #ff4b2b, #ff416c, #8a2be2) !important;
        color: #fff !important;
        -webkit-text-fill-color: #fff !important;
    }
}

    .editable-field {
        background-color: #ffffff;
        border: 1px solid #cbd5e0;
        transition: all 0.2s ease;
    }

        .editable-field:focus {
            border-color: #4299e1;
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
            outline: none;
        }

        .editable-field.is-invalid {
            border-color: #dc3545 !important;
            background-color: #fff5f5;
        }

    .invalid-feedback {
        display: block;
        color: #dc3545;
        font-size: 0.75em;
        margin-top: 0.25rem;
    }

    /* Toast Notification Styles */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
    }

    .toast {
        min-width: 300px;
        margin-bottom: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease-in-out;
    }

        .toast.show {
            opacity: 1;
            transform: translateX(0);
        }

    .toast-success {
        background-color: #d4edda;
        border-left: 4px solid #28a745;
        color: #155724;
    }

    .toast-error {
        background-color: #f8d7da;
        border-left: 4px solid #dc3545;
        color: #721c24;
    }

    .toast-info {
        background-color: #d1ecf1;
        border-left: 4px solid #17a2b8;
        color: #0c5460;
    }

    .toast-warning {
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
        color: #856404;
    }

    .toast-body {
        padding: 10px 15px;
    }

    /* Page blur overlay styles */
    .page-blur-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);
        z-index: 9998;
        display: none;
    }

    .formula-input {
        font-family: 'Courier New', monospace;
        font-size: 12px;
    }

    .formula-help {
        font-size: 11px;
        color: #6c757d;
        margin-top: 2px;
    }

    .subject-badge {
        background: linear-gradient(to right, #667eea, #764ba2);
        color: white;
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
    }

    /* New Subject Highlighting Styles */
    .new-subject-row {
        background: linear-gradient(to right, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05)) !important;
        border-left: 3px solid #28a745;
        animation: pulse-new 2s ease-in-out;
    }

    @@keyframes pulse-new {
        0% {
            background-color: rgba(40, 167, 69, 0.2);
        }

        50% {
            background-color: rgba(40, 167, 69, 0.05);
        }

        100% {
            background-color: rgba(40, 167, 69, 0.1);
        }
    }

    .badge.bg-success {
        background: linear-gradient(to right, #28a745, #20c997) !important;
        font-size: 10px;
        padding: 2px 6px;
    }

    .badge.bg-warning {
        background: linear-gradient(to right, #ffc107, #ff9800) !important;
        color: #212529;
    }

    /* Sticky header for table */
    .sticky-header {
        position: sticky;
        top: 0;
        z-index: 10;
    }

    /* Loading spinner */
    .spinner-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: 0.3em;
    }

    /* Bottom Save Button Container */
    .bottom-save-container {
        background-color: #f8f9fa;
        border-top: 2px solid #dee2e6;
        padding: 15px;
        text-align: center;
        margin-top: 0;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-graduation-cap me-2"></i>Marks Setup
                    </h5>
                </div>

                <div class="card-body">
                    <form id="searchForm" class="needs-validation" novalidate>
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label for="ddlClass" class="form-label">
                                    Class <span class="text-danger">*</span>
                                </label>
                                @Html.DropDownListFor(x => x.Classes, Model.Classes, "Select a class", new { @class = "form-select", id = "ddlClass" })
                            </div>
                            <div class="col-md-3">
                                <label for="ddlSection" class="form-label">
                                    Section <span class="text-danger">*</span>
                                </label>
                                @Html.DropDownListFor(x => x.Sections, Model.Sections, "Select a section", new { @class = "form-select", id = "ddlSection" })
                            </div>
                            <div class="col-md-3">
                                <label for="ddlExam" class="form-label">
                                    Exam <span class="text-danger">*</span>
                                </label>
                                @Html.DropDownListFor(x => x.ExamTypes, Model.ExamTypes, "Select an exam", new { @class = "form-select", id = "ddlExam" })
                            </div>
                            <div class="col-md-3 align-self-end">
                                <button type="button" class="btn search-button w-100" id="btnSearch">
                                    <i class="fas fa-search me-2"></i>Search
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div id="searchResultContainer" class="mt-4">
        <!-- Search results will be loaded here -->
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container" id="toastContainer"></div>

<!-- Page Blur Overlay -->
<div class="page-blur-overlay" id="pageBlurOverlay"></div>


<script>
$(document).ready(function() {
    var isUpdating = false;
    var currentClassId = '';
    var currentSectionId = '';
    var currentExamId = '';
    var configurationsData = [];
    var dataTable = null;
    var originalValues = {};

    // Validation functions
    var validators = {
        number: function(value) {
            return /^\d+$/.test(value);
        },
        formula: function(value) {
            return /^[\d\-|,A-Z]+$/.test(value);
        }
    };

    // Input restriction functions
    window.isNumber = function(evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        return true;
    };

    // Toast notification function
    function showToast(message, type, duration) {
        type = type || 'success';
        duration = duration || 3000;

        var toastId = 'toast-' + Date.now();
        var iconMap = {
            'success': 'fas fa-check-circle',
            'error': 'fas fa-times-circle',
            'warning': 'fas fa-exclamation-triangle',
            'info': 'fas fa-info-circle'
        };

        var toastHtml =
            '<div id="' + toastId + '" class="toast toast-' + type + '">' +
                '<div class="toast-body">' +
                    '<i class="' + iconMap[type] + ' me-2"></i>' +
                    message +
                '</div>' +
            '</div>';

        $('#toastContainer').append(toastHtml);

        setTimeout(function() {
            $('#' + toastId).addClass('show');
        }, 10);

        setTimeout(function() {
            closeToast(toastId);
        }, duration);
    }

    // Close toast function
    window.closeToast = function(toastId) {
        $('#' + toastId).removeClass('show');
        setTimeout(function() {
            $('#' + toastId).remove();
        }, 300);
    };

    // Function to handle Grade Formula field based on Required field value
    function handleGradeFormulaState($requiredField) {
        var configId = $requiredField.data('configid');
        var isRequired = $requiredField.val() === 'Yes';
        var $formulaField = $('#formula_' + configId);

        if (!isRequired) {
            // When Required is "No", make Grade Formula read-only
            $formulaField.prop('readonly', true);
            $formulaField.css({
                'background-color': '#e9ecef',
                'cursor': 'not-allowed'
            });
            // Clear any validation errors when making it readonly
            $formulaField.removeClass('is-invalid');
            $formulaField.siblings('.invalid-feedback').text('');
        } else {
            // When Required is "Yes", make Grade Formula editable
            $formulaField.prop('readonly', false);
            $formulaField.css({
                'background-color': '#ffffff',
                'cursor': 'text'
            });
        }
    }

    // Search button click handler
    $('#btnSearch').click(function() {
      
        var classId = $('#ddlClass').val();
        var sectionId = $('#ddlSection').val();
        var examId = $('#ddlExam').val();

        currentClassId = classId;
        currentSectionId = sectionId;
        currentExamId = examId;

        var errors = [];
        if (!classId) errors.push('Please select a class');
        if (!sectionId) errors.push('Please select a section');
        if (!examId) errors.push('Please select an exam');

        if (errors.length > 0) {
            showToast(errors.join(', '), 'warning');
            return;
        }

        $('#searchResultContainer').html(
            '<div class="spinner-container">' +
                '<div class="spinner-border text-primary" role="status">' +
                    '<span class="visually-hidden">Loading...</span>' +
                '</div>' +
                '<div class="mt-3">Loading marks setup...</div>' +
            '</div>'
        );

        $.ajax({
            url: '@Url.Action("GetGradeConfigurations", "GradeConfiguration")',
            type: 'POST',
            data: {
                classId: classId,
                sectionId: sectionId,
                examTypeId: examId
            },
            success: function(data) {
                if (data.success) {
                    configurationsData = data.data;
                    originalValues = {};
                    displayGradeConfigurations(data.data);

                    var newCount = data.data.filter(function(c) { return c.IsNew === true; }).length;
                    if (newCount > 0) {
                        showToast('Loaded ' + data.data.length + ' configurations (' + newCount + ' new subjects added)', 'success');
                    } else {
                        showToast('Marks setup loaded successfully', 'success');
                    }
                } else {
                    $('#searchResultContainer').html(
                        '<div class="alert alert-danger">' +
                            '<i class="fas fa-exclamation-circle me-2"></i>' +
                            (data.message || 'No configurations found') +
                        '</div>'
                    );
                    showToast(data.message || 'No configurations found', 'error');
                }
            },
            error: function() {
                $('#searchResultContainer').html(
                    '<div class="alert alert-danger">' +
                        '<i class="fas fa-times-circle me-2"></i>' +
                        'An error occurred while loading marks setup' +
                    '</div>'
                );
                showToast('An error occurred while loading marks setup', 'error');
            }
        });
    });

    // Display grade configurations in grid with ALL fields editable
    function displayGradeConfigurations(configurations) {
        if (!configurations || configurations.length === 0) {
            $('#searchResultContainer').html(
                '<div class="alert alert-info">' +
                    '<i class="fas fa-info-circle me-2"></i>' +
                    'No marks setup found for the selected criteria' +
                '</div>'
            );
            return;
        }

        var gridHtml =
            '<div class="card">' +
                '<div class="card-header bg-light">' +
                    '<div class="d-flex justify-content-between align-items-center">' +
                        '<h6 class="mb-0">' +
                            '<i class="fas fa-list me-2"></i>Subject List ' +
                            '<span class="badge bg-primary ms-2" id="selectedCount">0 selected</span> ' +
                            '<span class="badge bg-warning ms-2" id="changedCount">0 changed</span>' +
                        '</h6>' +
                    '</div>' +
                '</div>' +
                '<div class="card-body p-3">' +
                    '<div class="table-responsive">' +
                        '<table id="gradeDataTable" class="table product-style-table mb-0">' +
                            '<thead class="sticky-header">' +
                                '<tr>' +
                                    '<th class="text-center" style="width: 50px;">' +
                                        '<div class="form-check">' +
                                            '<input class="form-check-input" type="checkbox" id="chkSelectAll">' +
                                        '</div>' +
                                    '</th>' +
                                    '<th>Subject</th>' +
                                    '<th style="width: 120px;">Max Marks</th>' +
                                    '<th style="width: 130px;">Min. Marks</th>' +
                                    '<th style="width: 130px;">Required</th>' +
                                    '<th style="width: 350px;">Grade Formula</th>' +
                                '</tr>' +
                            '</thead>' +
                            '<tbody id="gradeTableBody"></tbody>' +
                        '</table>' +
                    '</div>' +
                '</div>' +
                '<div class="bottom-save-container">' +
                    '<button type="button" class="btn save-button" id="btnUpdate">' +
                        '<span class="icon"><i class="fas fa-save"></i></span>' +
                        '<span>Save Changes</span>' +
                    '</button>' +
                '</div>' +
            '</div>';

        $('#searchResultContainer').html(gridHtml);

        var tbody = $('#gradeTableBody');
        tbody.empty();

        $.each(configurations, function(index, config) {
            var configId = config.GradeConfigID;

            // Store original values
            originalValues[configId] = {
                MaxMarks: config.MaxMarks,
                MinimumGrade: config.MinimumGrade,
                IsMinimumRequired: config.IsMinimumRequired,
                GradeFormula: config.GradeFormula
            };

            var row = $('<tr data-configid="' + configId + '">');
            if (config.IsNew === true) {
                row.addClass('new-subject-row');
            }

            // Checkbox column
            row.append(
                '<td class="text-center">' +
                    '<div class="form-check">' +
                        '<input class="form-check-input chkConfig" type="checkbox" ' +
                        'data-configid="' + configId + '" ' +
                        'id="chk_' + configId + '">' +
                    '</div>' +
                '</td>'
            );

            // Subject column
            var subjectHtml = '<span class="subject-badge">' + config.SubjectName + '</span>';
            if (config.IsNew === true) {
                subjectHtml += ' <span class="badge bg-success ms-2">NEW</span>';
            }
            row.append('<td>' + subjectHtml + '</td>');

            // Max Marks - Editable
            row.append('<td>' +
                '<input type="text" ' +
                'id="maxmarks_' + configId + '" ' +
                'data-configid="' + configId + '" ' +
                'data-field="MaxMarks" ' +
                'class="form-control form-control-sm editable-field" ' +
                'value="' + config.MaxMarks + '" ' +
                'maxlength="3" ' +
                'onkeypress="return isNumber(event);">' +
                '<div class="invalid-feedback"></div>' +
                '</td>');

            // Min. Marks - Editable
            row.append('<td>' +
                '<input type="text" ' +
                'id="mingrade_' + configId + '" ' +
                'data-configid="' + configId + '" ' +
                'data-field="MinimumGrade" ' +
                'class="form-control form-control-sm editable-field" ' +
                'value="' + config.MinimumGrade + '" ' +
                'maxlength="3" ' +
                'onkeypress="return isNumber(event);">' +
                '<div class="invalid-feedback"></div>' +
                '</td>');

            // Is Minimum Required - Editable
            row.append('<td>' +
                '<select ' +
                'id="required_' + configId + '" ' +
                'data-configid="' + configId + '" ' +
                'data-field="IsMinimumRequired" ' +
                'class="form-control form-control-sm editable-field">' +
                '<option value="Yes"' + (config.IsMinimumRequired ? ' selected' : '') + '>Yes</option>' +
                '<option value="No"' + (!config.IsMinimumRequired ? ' selected' : '') + '>No</option>' +
                '</select>' +
                '</td>');

            // Grade Formula - Editable (conditionally)
            var isReadonly = !config.IsMinimumRequired ? ' readonly' : '';
            var bgColor = !config.IsMinimumRequired ? 'background-color: #e9ecef; cursor: not-allowed;' : '';

            row.append('<td>' +
                '<input type="text" ' +
                'id="formula_' + configId + '" ' +
                'data-configid="' + configId + '" ' +
                'data-field="GradeFormula" ' +
                'class="form-control form-control-sm editable-field formula-input" ' +
                'value="' + config.GradeFormula + '" ' +
                'placeholder="e.g., 100-75|H,74-60|F..." ' +
                isReadonly + ' ' +
                'style="' + bgColor + '">' +
                '<div class="formula-help">Format: 100-75|H,74-60|F,59-45|S...</div>' +
                '<div class="invalid-feedback"></div>' +
                '</td>');

            tbody.append(row);
        });

        // Initialize DataTable after populating data
        setTimeout(function() {
            initializeDataTable();
        }, 100);

        updateCounts();
    }

    // Track changes in fields
    function trackChanges() {
        $('.editable-field').off('input change').on('input change', function() {
            var $this = $(this);
            var configId = $this.data('configid');
            var field = $this.data('field');
            var currentValue = $this.val();

            // Handle Required field change to toggle Grade Formula
            if (field === 'IsMinimumRequired') {
                handleGradeFormulaState($this);
            }

            // For IsMinimumRequired, convert to boolean for comparison
            if (field === 'IsMinimumRequired') {
                currentValue = currentValue === 'Yes';
            } else if (field === 'MaxMarks' || field === 'MinimumGrade') {
                currentValue = parseInt(currentValue) || 0;
            }

            // Check if value changed from original
            var isChanged = originalValues[configId] && originalValues[configId][field] !== currentValue;

            // Mark row as changed
            var $row = $this.closest('tr');
            if (isChanged) {
                $row.addClass('table-warning');
                // Auto-check the checkbox if value changed
                $row.find('.chkConfig').prop('checked', true);
            } else {
                // Check if any other field in this row is changed
                var anyChanged = false;
                $row.find('.editable-field').each(function() {
                    var fConfigId = $(this).data('configid');
                    var fField = $(this).data('field');
                    var fValue = $(this).val();

                    if (fField === 'IsMinimumRequired') {
                        fValue = fValue === 'Yes';
                    } else if (fField === 'MaxMarks' || fField === 'MinimumGrade') {
                        fValue = parseInt(fValue) || 0;
                    }

                    if (originalValues[fConfigId] && originalValues[fConfigId][fField] !== fValue) {
                        anyChanged = true;
                    }
                });

                if (!anyChanged) {
                    $row.removeClass('table-warning');
                }
            }

            updateCounts();
            validateField($this);
        });

        // Handle Enter key navigation
        $('.editable-field').off('keydown').on('keydown', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                var $allInputs = $('.editable-field:visible:not([readonly])');
                var currentIndex = $allInputs.index($(this));
                if (currentIndex < $allInputs.length - 1) {
                    $allInputs.eq(currentIndex + 1).focus();
                }
            }
        });
    }

    // Validate field
    function validateField($field) {
        var field = $field.data('field');
        var value = $field.val();
        var isValid = true;
        var errorMessage = '';

        // Skip validation if field is readonly
        if ($field.prop('readonly')) {
            return true;
        }

        if (field === 'MaxMarks') {
            var num = parseInt(value);
            if (isNaN(num) || num < 1 || num > 500) {
                isValid = false;
                errorMessage = 'Must be between 1 and 500';
            }
        } else if (field === 'MinimumGrade') {
            var num = parseInt(value);
            if (isNaN(num) || num < 0 || num > 100) {
                isValid = false;
                errorMessage = 'Must be between 0 and 100';
            }
        } else if (field === 'GradeFormula' && value) {
            if (!validators.formula(value)) {
                isValid = false;
                errorMessage = 'Invalid format';
            }
        }

        if (!isValid) {
            $field.addClass('is-invalid');
            $field.siblings('.invalid-feedback').text(errorMessage);
        } else {
            $field.removeClass('is-invalid');
            $field.siblings('.invalid-feedback').text('');
        }

        return isValid;
    }

    // Initialize DataTable
    function initializeDataTable() {
        if (dataTable) {
            dataTable.destroy();
        }

        dataTable = $('#gradeDataTable').DataTable({
            "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
            "pageLength": 25,
            "order": [[1, "asc"]],
            "scrollX": false,
            "responsive": true,
            "drawCallback": function(settings) {
                bindGridEvents();
                trackChanges();
                updateCounts();
            }
        });
    }

    // Bind grid events
    function bindGridEvents() {
        $('#chkSelectAll').off('change').on('change', function() {
            var isChecked = $(this).prop('checked');
            if (dataTable) {
                dataTable.$('.chkConfig').prop('checked', isChecked);
            } else {
                $('.chkConfig').prop('checked', isChecked);
            }
            updateCounts();
        });

        $('.chkConfig').off('change').on('change', function() {
            updateCounts();
        });

        $('#btnUpdate').off('click').on('click', updateGradeConfigurations);

        // Initialize Grade Formula state based on Required field values
        $('[data-field="IsMinimumRequired"]').each(function() {
            handleGradeFormulaState($(this));
        });
    }

    // Update counts
    function updateCounts() {
        var selectedCount = 0;
        var changedCount = 0;

        if (dataTable) {
            selectedCount = dataTable.$('.chkConfig:checked').length;
            changedCount = dataTable.$('tr.table-warning').length;
        } else {
            selectedCount = $('.chkConfig:checked').length;
            changedCount = $('tr.table-warning').length;
        }

        $('#selectedCount').text(selectedCount + ' selected');
        $('#changedCount').text(changedCount + ' changed');
        $('#btnUpdate').prop('disabled', selectedCount === 0);
    }

    // Update all grade configurations
    function updateGradeConfigurations() {
        if (isUpdating) return;

        var updates = [];
        var hasErrors = false;

        var $checkedBoxes = dataTable ? dataTable.$('.chkConfig:checked') : $('.chkConfig:checked');

        if ($checkedBoxes.length === 0) {
            showToast('Please select at least one configuration to update', 'warning');
            return;
        }

        $checkedBoxes.each(function() {
            var $checkbox = $(this);
            var configId = $checkbox.data('configid');
            var $row = $checkbox.closest('tr');

            // Collect all field values for this row
            var updateItem = {
                GradeConfigID: configId
            };

            // Get MaxMarks
            var $maxMarks = $row.find('[data-field="MaxMarks"]');
            if (!validateField($maxMarks)) hasErrors = true;
            updateItem.MaxMarks = parseInt($maxMarks.val()) || null;

            // Get MinimumGrade
            var $minGrade = $row.find('[data-field="MinimumGrade"]');
            if (!validateField($minGrade)) hasErrors = true;
            updateItem.MinimumGrade = parseInt($minGrade.val()) || null;

            // Get IsMinimumRequired
            var $required = $row.find('[data-field="IsMinimumRequired"]');
            updateItem.IsMinimumRequired = $required.val() === 'Yes';

            // Get GradeFormula
            var $formula = $row.find('[data-field="GradeFormula"]');
            if (!validateField($formula)) hasErrors = true;
            updateItem.GradeFormula = $formula.val();

            updates.push(updateItem);
        });

        if (hasErrors) {
            showToast('Please fix validation errors before saving', 'error');
            return;
        }

        // Updated confirmation message with dynamic count
        var confirmMessage = 'Do you want to save these ' + updates.length + ' configuration' +
                           (updates.length > 1 ? 's' : '') + '?';

        if (confirm(confirmMessage)) {
            isUpdating = true;
            $('#pageBlurOverlay').fadeIn(200);
            $('#btnUpdate').prop('disabled', true).html(
                '<span class="icon"><i class="fas fa-spinner fa-spin"></i></span>' +
                '<span>Saving...</span>'
            );

            var requestData = {
                Updates: updates,
                ClassId: currentClassId,
                SectionId: currentSectionId,
                ExamTypeId: currentExamId
            };

            $.ajax({
                url: '@Url.Action("UpdateAllGradeConfigurations", "GradeConfiguration")',
                type: 'POST',
                data: JSON.stringify(requestData),
                contentType: 'application/json',
                success: function(result) {
                    if (result.success) {
                        showToast(result.message || 'Update successful!', 'success');
                        setTimeout(function () {
                            location.reload();
                        }, 1000);
                    } else {
                        $('#pageBlurOverlay').fadeOut(200);
                        $('#btnUpdate').prop('disabled', false).html(
                            '<span class="icon"><i class="fas fa-save"></i></span>' +
                            '<span>Save Changes</span>'
                        );

                        var errorMessage = result.message || 'Update failed';
                        if (result.errors && result.errors.length > 0) {
                            errorMessage += '<br>' + result.errors.join('<br>');
                        }
                        showToast(errorMessage, 'error', 5000);
                    }
                },
                error: function(xhr, status, error) {
                    $('#pageBlurOverlay').fadeOut(200);
                    $('#btnUpdate').prop('disabled', false).html(
                        '<span class="icon"><i class="fas fa-save"></i></span>' +
                        '<span>Save Changes</span>'
                    );
                    showToast('An error occurred while updating configurations', 'error');
                },
                complete: function() {
                    isUpdating = false;
                }
            });
        }
    }
});
</script>