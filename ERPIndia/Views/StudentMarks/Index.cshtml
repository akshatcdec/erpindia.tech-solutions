@model ERPIndia.Controllers.StudentMarksViewModel
@{
    ViewBag.Title = "Bulk Mark Entry";
}

<style>
    /* Filter Card Styling */
    .filter-card {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    /* DataTable Custom Styling */
    .marks-entry-table {
        width: 100%;
        border-collapse: collapse;
    }

        .marks-entry-table thead th {
            background: linear-gradient(to bottom, #69c1f7, #39a9f2);
            color: #212529;
            font-weight: bold;
            text-align: center;
            padding: 8px 10px;
            border: 1px solid #ddd !important;
            position: sticky;
            top: 0;
            z-index: 10;
            font-size: 13px;
        }

        .marks-entry-table tbody tr:nth-child(odd) {
            background-color: #e3e8ed !important;
        }

        .marks-entry-table tbody tr:nth-child(even) {
            background-color: #ffffff !important;
        }

        .marks-entry-table tbody tr:hover {
            background-color: #f0f4f8 !important;
        }

        .marks-entry-table tbody tr.selected-row {
            background-color: #e3f2fd !important;
        }

        .marks-entry-table tbody tr.modified-row {
            background-color: #fff3cd !important;
        }

        .marks-entry-table tbody td {
            padding: 4px 6px;
            border: 1px solid #ddd;
            text-align: center;
            font-size: 13px;
        }

    .student-info-cell {
        text-align: left !important;
        font-size: 13px;
    }

    /* Marks Input Styling */
    .marks-input {
        width: 70px;
        text-align: center;
        border: 1px solid #cbd5e0;
        border-radius: 3px;
        padding: 3px;
        font-size: 14px;
        transition: all 0.2s ease;
    }

        .marks-input:focus {
            border-color: #4299e1;
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
            outline: none;
        }

        .marks-input.is-invalid {
            border-color: #dc3545 !important;
            background-color: #fff5f5;
        }

        .marks-input.absent-mark {
            background-color: #ffe4e4;
            color: #dc3545;
            font-weight: bold;
        }

        .marks-input.medical-mark {
            background-color: #e4f3ff;
            color: #004085;
            font-weight: bold;
        }

        .marks-input.pass-mark {
            background-color: #d4edda;
            color: #155724;
        }

        .marks-input.fail-mark {
            background-color: #f8d7da;
            color: #721c24;
        }

    /* Button Styling */
    .search-button {
        background: linear-gradient(to bottom, #E53E3E, #C53030);
        color: white;
        padding: 0.5rem 1rem;
        font-size: 14px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        transition: transform 0.2s ease;
    }

        .search-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
        }

    .save-btn {
        background: linear-gradient(to right, #28a745, #20c997);
        color: white;
        padding: 12px 40px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        margin: 20px 0;
        transition: all 0.3s ease;
        font-size: 16px;
    }

        .save-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(40,167,69,0.3);
        }

        .save-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    /* Toast Notification Styles */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 99999;
        max-width: 400px;
    }

    .toast {
        min-width: 300px;
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease;
        font-size: 14px;
        font-weight: 500;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .toast-success {
        background: #d4edda;
        border-left: 4px solid #28a745;
        color: #155724;
    }

    .toast-error {
        background: #f8d7da;
        border-left: 4px solid #dc3545;
        color: #721c24;
    }

    .toast-warning {
        background: #fff3cd;
        border-left: 4px solid #ffc107;
        color: #856404;
    }

    .toast-info {
        background: #d1ecf1;
        border-left: 4px solid #17a2b8;
        color: #0c5460;
    }

    /* Spinner Overlay */
    .spinner-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .spinner-box {
        background: white;
        padding: 30px;
        border-radius: 10px;
        text-align: center;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 15px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Subject Header */
    .subject-header {
        font-size: 12px;
        font-weight: bold;
        background: linear-gradient(to bottom, #ffc107, #ff9800) !important;
    }

        .subject-header .max-marks {
            font-size: 10px;
            color: #444;
            display: block;
            margin-top: 2px;
        }

    /* Legend Box */
    .marks-legend {
        background: #f0f8ff;
        border: 1px solid #bee5eb;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
        font-size: 14px;
    }

    .marks-info {
        display: inline-block;
        padding: 6px 12px;
        margin: 5px;
        font-size: 13px;
        font-weight: 500;
        background: white;
        border: 1px solid #ddd;
        border-radius: 6px;
    }

        .marks-info b.absent {
            color: #dc3545;
            font-weight: 700;
        }

        .marks-info b.medical {
            color: #004085;
            font-weight: 700;
        }

    /* Quick Actions */
    .quick-actions {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 100;
    }

    .quick-action-btn {
        display: block;
        margin-top: 10px;
        padding: 10px 15px;
        background: linear-gradient(to right, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 50px;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }

        .quick-action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
        }

    /* Checkbox Styling */
    .form-check-input {
        cursor: pointer;
        width: 18px;
        height: 18px;
    }

    /* Summary Badge */
    .marks-summary {
        display: inline-block;
        padding: 4px 10px;
        border-radius: 4px;
        font-size: 12px;
        margin-left: 10px;
    }
</style>

<div class="container-fluid">
    <!-- Header Card -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-edit me-2"></i>Bulk Mark Entry
                    </h5>
                </div>

                <div class="card-body">
                    <div id="validationMessage" class="alert alert-warning d-none">
                        <i class="fas fa-exclamation-triangle me-2"></i>Please select all required fields before searching.
                    </div>

                    <form id="searchForm" class="needs-validation" novalidate>
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label for="ddlClass" class="form-label">
                                    Class <span class="text-danger">*</span>
                                </label>
                                @Html.DropDownListFor(x => x.Classes, Model.Classes, "Select a class", new { @class = "form-select", id = "ddlClass" })
                            </div>
                            <div class="col-md-3">
                                <label for="ddlSection" class="form-label">
                                    Section <span class="text-danger">*</span>
                                </label>
                                @Html.DropDownListFor(x => x.Sections, Model.Sections, "Select a section", new { @class = "form-select", id = "ddlSection" })
                            </div>
                            <div class="col-md-3">
                                <label for="ddlExam" class="form-label">
                                    Exam <span class="text-danger">*</span>
                                </label>
                                @Html.DropDownListFor(x => x.ExamTypes, Model.ExamTypes, "Select an exam", new { @class = "form-select", id = "ddlExam" })
                            </div>
                            <div class="col-md-3 align-self-end">
                                <button type="button" class="btn search-button w-100" id="btnSearch">
                                    <i class="fas fa-search me-2"></i>Search
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Marks Entry Container -->
    <div id="marksEntryContainer" class="mt-4" style="display:none;">
        <div class="card">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">
                        <i class="fas fa-users me-2"></i>
                        <strong style="color: #1a237e;">Guideline:</strong>
                        <span id="maxMarksSpan" style="display:none">100</span>
                        <span class="marks-info" style="font-weight: normal;">
                            Fill
                            <span style="background-color: #dc3545; color: white; padding: 2px 8px; border-radius: 4px; font-weight: bold;">-1</span>
                            for
                            <span style="color: #dc3545; font-weight: bold;">Absent</span>
                            <span style="color: #666; margin: 0 8px;">|</span>
                            Fill
                            <span style="background-color: #28a745; color: white; padding: 2px 8px; border-radius: 4px; font-weight: bold;">-2</span>
                            for
                            <span style="color: #28a745; font-weight: bold;">Medical</span>
                        </span>
                        <span style="display:none">
                            <span class="marks-summary badge bg-info" id="studentCount">0 students</span>
                            <span class="marks-summary badge bg-warning" id="modifiedCount">0 modified</span>
                        </span>
                    </h6>
                   
                </div>
            </div>
            <div class="card-body">
                <!-- Data Table -->
                <div class="table-responsive">
                    <table class="table marks-entry-table" id="marksDataTable">
                        <thead>
                            <tr id="tableHeader">
                                <!-- Dynamic headers will be added here -->
                            </tr>
                        </thead>
                        <tbody id="marksTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>
                <div class="text-center">
                    <button type="button" class="save-btn" id="btnSaveMarks">
                        <i class="fas fa-save me-2"></i>Save Marks
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container" id="toastContainer"></div>

<!-- Spinner Overlay -->
<div class="spinner-overlay" id="spinnerOverlay">
    <div class="spinner-box">
        <div class="spinner"></div>
        <div>Loading data...</div>
    </div>
</div>

<script>
$(document).ready(function() {
    var dataTable = null;
    var currentClassId = '';
    var currentSectionId = '';
    var currentExamId = '';
    var studentsData = [];
    var subjectsData = [];
    var gradeConfigs = {};
    var originalMarks = {};
    var modifiedMarks = {};
    var isUpdating = false;

    // Toast notification function
    function showToast(message, type, duration) {
        type = type || 'success';
        duration = duration || 4000;

        var icons = {
            success: 'check-circle',
            error: 'times-circle',
            warning: 'exclamation-triangle',
            info: 'info-circle'
        };

        var toastId = 'toast_' + Date.now();
        var toastHtml =
            '<div class="toast toast-' + type + '" id="' + toastId + '" style="display:none;">' +
                '<i class="fas fa-' + icons[type] + ' me-2"></i>' +
                message +
            '</div>';

        $('#toastContainer').append(toastHtml);
        $('#' + toastId).fadeIn(300);

        setTimeout(function() {
            $('#' + toastId).fadeOut(300, function() {
                $(this).remove();
            });
        }, duration);
    }

    // Show/Hide Spinner
    function showSpinner() {
        $('#spinnerOverlay').css('display', 'flex');
    }

    function hideSpinner() {
        $('#spinnerOverlay').hide();
    }

    // Search button click handler
    $('#btnSearch').click(function() {
        $('#validationMessage').addClass('d-none');

        var classId = $('#ddlClass').val();
        var sectionId = $('#ddlSection').val();
        var examId = $('#ddlExam').val();

        currentClassId = classId;
        currentSectionId = sectionId;
        currentExamId = examId;

        var errors = [];
        if (!classId) errors.push('Please select a class');
        if (!sectionId) errors.push('Please select a section');
        if (!examId) errors.push('Please select an exam');

        if (errors.length > 0) {
            showToast(errors.join(', '), 'warning');
            $('#validationMessage').html(
                '<i class="fas fa-exclamation-triangle me-2"></i>' + errors.join(', ')
            ).removeClass('d-none');
            return;
        }

        loadStudentMarksData(classId, sectionId, examId);
    });

    // Load student marks data
    function loadStudentMarksData(classId, sectionId, examId) {
        showSpinner();

        $.ajax({
            url: '@Url.Action("GetStudentMarksData", "StudentMarks")',
            type: 'POST',
            data: {
                classId: classId,
                sectionId: sectionId,
                examTypeId: examId
            },
            success: function(data) {
                hideSpinner();

                if (data.success) {
                    studentsData = data.students;
                    subjectsData = data.subjects;
                    gradeConfigs = data.gradeConfigs;
                    originalMarks = {};
                    modifiedMarks = {};

                    // Store original marks
                    if (data.existingMarks) {
                        $.each(data.existingMarks, function(i, mark) {
                            var key = mark.StudentID + '_' + mark.SubjectID;
                            originalMarks[key] = mark.MarksObtained;
                        });
                    }

                    displayMarksEntryGrid(data);
                    $('#marksEntryContainer').show();
                    $('#quickActions').show();
                    showToast('Data loaded successfully! ' + data.students.length + ' students found', 'success');
                } else {
                    showToast(data.message || 'Failed to load data', 'error');
                }
            },
            error: function(xhr, status, error) {
                hideSpinner();
                showToast('An error occurred while loading data', 'error');
                console.error('Load error:', error);
            }
        });
    }

    // Display marks entry grid with DataTable
    function displayMarksEntryGrid(data) {
        if (!data.students || data.students.length === 0) {
            $('#marksEntryContainer').html(
                '<div class="alert alert-info">' +
                    '<i class="fas fa-info-circle me-2"></i>' +
                    'No students found for the selected criteria' +
                '</div>'
            );
            return;
        }

        // Update student count
        $('#studentCount').text(data.students.length + ' students');

        // Build table headers
        var headerHtml =
            '<th><input type="checkbox" id="selectAll" class="form-check-input"></th>' +
            '<th>Class</th>' +
            '<th>SR</th>' +
            '<th>Roll</th>' +
            '<th>Exam</th>' +
            '<th>Student</th>' +
            '<th>Father Name</th>';

        // Add subject columns
        $.each(data.subjects, function(i, subject) {
            var config = gradeConfigs[subject.SubjectID] || { MaxMarks: 100, MinimumGrade: 33 };
            headerHtml += '<th class="subject-header">' +
                        subject.SubjectName +
                        '<span class="max-marks">Max: ' + config.MaxMarks + '</span>' +
                        '</th>';
        });

        $('#tableHeader').html(headerHtml);

        // Build table body
        var bodyHtml = '';
        $.each(data.students, function(index, student) {
            bodyHtml += '<tr data-studentid="' + student.StudentID + '">' +
                       '<td class="text-center"><input type="checkbox" class="form-check-input row-checkbox"></td>' +
                        '<td>' + student.ClassName + '-' + student.SectionName + '</td>' +
                       '<td>' + (index + 1) + '</td>' +
                       '<td>' + (student.RollNumber || '-') + '</td>' +
                       '<td>' + data.examName + '</td>' +
                       '<td class="student-info-cell"><strong>' + student.StudentName + '</strong></td>' +
                       '<td class="student-info-cell">' + (student.FatherName || '-') + '</td>';

            // Add input fields for each subject
            $.each(data.subjects, function(j, subject) {
                var key = student.StudentID + '_' + subject.SubjectID;
                // This handles undefined, null, and converts numbers to strings safely
                var existingMark = (originalMarks[key] != null) ? originalMarks[key].toString() : '';
                var config = gradeConfigs[subject.SubjectID] || { MaxMarks: 100, MinimumGrade: 33 };

                var inputClass = 'marks-input';
                if (existingMark !== '') {
                    var markValue = parseInt(existingMark);
                    if (!isNaN(markValue)) {
                        if (markValue === -1) {
                            inputClass += ' absent-mark';
                        } else if (markValue === -2) {
                            inputClass += ' medical-mark';
                        } else if (markValue >= -9 && markValue < 0) {
                            inputClass += ' absent-mark';
                        } else if (markValue >= config.MinimumGrade) {
                            inputClass += ' pass-mark';
                        } else if (markValue >= 0) {
                            inputClass += ' fail-mark';
                        }
                    }
                }

                bodyHtml += '<td>' +
                           '<input type="tel" ' +
                           'class="' + inputClass + '" ' +
                           'data-studentid="' + student.StudentID + '" ' +
                           'data-subjectid="' + subject.SubjectID + '" ' +
                           'data-maxmarks="' + config.MaxMarks + '" ' +
                           'data-mingrade="' + config.MinimumGrade + '" ' +
                           'data-original="' + existingMark + '" ' +
                           'value="' + existingMark + '" ' +
                           'inputmode="numeric" ' +
                           'pattern="-?[0-9]*" ' +
                           'maxlength="4" ' +
                           'placeholder="0-' + config.MaxMarks + '">' +
                           '</td>';
            });

            bodyHtml += '</tr>';
        });

        $('#marksTableBody').html(bodyHtml);

        // Initialize DataTable
        initializeDataTable();
    }

    // Initialize DataTable
    function initializeDataTable() {
        // Destroy existing DataTable if exists
        if (dataTable) {
            dataTable.destroy();
        }

        // Calculate which columns should be exportable (exclude checkbox column)
        var exportColumns = [];
        for (var i = 1; i < $('#tableHeader th').length; i++) {
            exportColumns.push(i);
        }

        // Initialize new DataTable
        dataTable = $('#marksDataTable').DataTable({
            "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
            "pageLength": 25,
            "order": [[1, "asc"]], // Order by SR
            "scrollX": true,
            "responsive": false,
            "dom": 'Blfrtip',
            "buttons": [
                {
                    extend: 'copy',
                    text: 'Copy',
                    className: 'dt-button',
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'csv',
                    text: 'CSV',
                    className: 'dt-button',
                    title: 'StudentMarks_' + new Date().getTime(),
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'excel',
                    text: 'Excel',
                    className: 'dt-button',
                    title: 'StudentMarks_' + new Date().getTime(),
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'pdf',
                    text: 'PDF',
                    className: 'dt-button',
                    title: 'Student Marks Report',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'print',
                    text: 'Print',
                    className: 'dt-button',
                    title: 'Student Marks Report',
                    exportOptions: {
                        columns: exportColumns
                    }
                }
            ],
            "language": {
                "search": "Search students:",
                "lengthMenu": "Show _MENU_ entries",
                "info": "Showing _START_ to _END_ of _TOTAL_ students",
                "paginate": {
                    "first": "First",
                    "last": "Last",
                    "next": "Next",
                    "previous": "Previous"
                }
            },
            "columnDefs": [
                {
                    "orderable": false,
                    "targets": [0] // Disable ordering for checkbox column
                }
            ],
            "drawCallback": function(settings) {
                // Re-bind events after DataTable redraw
                bindMarksEntryEvents();
            }
        });

        // Initial binding
        bindMarksEntryEvents();
    }

    // Bind marks entry events
    function bindMarksEntryEvents() {
        // Remove previous event handlers to prevent duplicates
        $('.marks-input').off('input blur keypress paste keydown focus');
        $('#selectAll').off('change');
        $('.row-checkbox').off('change');

        // Numeric validation for marks input
        $('.marks-input').on('input', function() {
            var $input = $(this);
            var value = $input.val().trim();
            var studentId = $input.data('studentid');
            var subjectId = $input.data('subjectid');
            var maxMarks = parseInt($input.data('maxmarks'));
            var minGrade = parseInt($input.data('mingrade'));
            var originalValue = $input.data('original');

            // Convert original value to string for comparison
            if (originalValue !== undefined && originalValue !== null) {
                originalValue = originalValue.toString().trim();
            } else {
                originalValue = '';
            }

            var key = studentId + '_' + subjectId;

            // Allow minus sign only at the beginning
            var isNegative = value.charAt(0) === '-';
            var numericPart = isNegative ? value.substring(1) : value;

            // Remove non-numeric characters
            numericPart = numericPart.replace(/[^0-9]/g, '');

            // Reconstruct value
            var cleanValue = isNegative ? '-' + numericPart : numericPart;

            if (value !== cleanValue) {
                $input.val(cleanValue);
                value = cleanValue;
            }

            // Clear classes
            $input.removeClass('is-invalid pass-mark fail-mark absent-mark medical-mark');

            // Check if value has changed from original
            var hasChanged = (value !== originalValue);

            // Validate and apply styling
            if (value !== '' && value !== '-') {
                var marks = parseInt(value);

                if (!isNaN(marks)) {
                    var isValid = true;

                    if (marks < -9) {
                        $input.addClass('is-invalid');
                        $input.val('-9');
                        showToast('Special codes are from -1 to -9 only', 'warning');
                        marks = -9;
                        value = '-9';
                        hasChanged = (value !== originalValue);
                    } else if (marks > maxMarks) {
                        $input.addClass('is-invalid');
                        showToast('Marks cannot exceed ' + maxMarks, 'warning');
                        isValid = false;
                    } else if (marks === -1) {
                        $input.addClass('absent-mark');
                    } else if (marks === -2) {
                        $input.addClass('medical-mark');
                    } else if (marks >= -9 && marks < 0) {
                        $input.addClass('absent-mark');
                    } else if (marks >= 0) {
                        // Valid positive marks (including 0)
                        if (marks >= minGrade) {
                            $input.addClass('pass-mark');
                        } else {
                            $input.addClass('fail-mark');
                        }
                    }

                    // Track the change if different from original and valid
                    if (hasChanged && isValid) {
                        modifiedMarks[key] = marks;
                        markRowAsModified($input);
                    } else if (!hasChanged) {
                        delete modifiedMarks[key];
                        checkRowModification($input);
                    }
                }
            } else {
                // Empty value - check if this is a change from original
                if (hasChanged && originalValue !== '') {
                    // Original had a value, now it's empty - this is a change
                    // Store as null or 0 based on your requirement
                    modifiedMarks[key] = null; // or use 0 if your backend expects 0
                    markRowAsModified($input);
                } else if (!hasChanged || originalValue === '') {
                    // No change or original was also empty
                    delete modifiedMarks[key];
                    checkRowModification($input);
                }
            }

            updateSummary();
        });

        // Prevent non-numeric input
        $('.marks-input').on('keypress', function(e) {
            var charCode = e.which || e.keyCode;
            var currentValue = $(this).val();
            var cursorPosition = this.selectionStart;

            // Allow control keys
            if ([8, 9, 13, 46].indexOf(charCode) !== -1) {
                return true;
            }

            // Allow Ctrl combinations
            if (e.ctrlKey && [65, 67, 86, 88].indexOf(charCode) !== -1) {
                return true;
            }

            // Allow minus sign only at beginning
            if (charCode === 45) {
                if (cursorPosition === 0 && !currentValue.includes('-')) {
                    return true;
                }
                e.preventDefault();
                return false;
            }

            // Only allow numbers
            if (charCode < 48 || charCode > 57) {
                e.preventDefault();
                return false;
            }

            return true;
        });

        // Handle paste
        $('.marks-input').on('paste', function(e) {
            var $input = $(this);
            e.preventDefault();

            var pastedData = '';
            if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.getData) {
                pastedData = e.originalEvent.clipboardData.getData('text');
            } else if (window.clipboardData && window.clipboardData.getData) {
                pastedData = window.clipboardData.getData('Text');
            }

            pastedData = pastedData.trim();
            var isNegative = pastedData.charAt(0) === '-';
            var numericPart = isNegative ? pastedData.substring(1) : pastedData;
            numericPart = numericPart.replace(/[^0-9]/g, '');

            var cleanValue = isNegative ? '-' + numericPart : numericPart;
            var maxMarks = parseInt($input.data('maxmarks'));

            if (cleanValue !== '' && cleanValue !== '-') {
                var value = parseInt(cleanValue);
                if (!isNaN(value)) {
                    if (value < -9) {
                        cleanValue = '-9';
                        showToast('Pasted value adjusted to -9', 'warning');
                    } else if (value > maxMarks) {
                        cleanValue = maxMarks.toString();
                        showToast('Pasted value adjusted to maximum marks', 'warning');
                    }
                }
            }

            $input.val(cleanValue);
            $input.trigger('input');
        });

        // Navigation with Enter and Arrow keys
        $('.marks-input').on('keydown', function(e) {
            if (e.key === 'Enter' || e.keyCode === 13) {
                e.preventDefault();
                var $visibleInputs = $('.marks-input:visible');
                var currentIndex = $visibleInputs.index(this);
                if (currentIndex < $visibleInputs.length - 1) {
                    $visibleInputs.eq(currentIndex + 1).focus().select();
                }
            } else if (e.key === 'ArrowDown' || e.keyCode === 40) {
                e.preventDefault();
                navigateVertical($(this), 1);
            } else if (e.key === 'ArrowUp' || e.keyCode === 38) {
                e.preventDefault();
                navigateVertical($(this), -1);
            } else if (e.key === 'Tab') {
                // Allow default tab behavior
                return true;
            }
        });

        // Focus select all text
        $('.marks-input').on('focus', function() {
            $(this).select();
        });

        // Select all checkbox
        $('#selectAll').on('change', function() {
            var isChecked = $(this).prop('checked');
            if (dataTable) {
                dataTable.$('.row-checkbox').prop('checked', isChecked);
                if (isChecked) {
                    dataTable.$('tr').addClass('selected-row');
                } else {
                    dataTable.$('tr').removeClass('selected-row');
                }
            }
        });

        // Individual row checkbox
        $('.row-checkbox').on('change', function() {
            var $row = $(this).closest('tr');
            if ($(this).is(':checked')) {
                $row.addClass('selected-row');
            } else {
                $row.removeClass('selected-row');
            }

            // Update select all checkbox
            var totalCheckboxes = $('.row-checkbox').length;
            var checkedCheckboxes = $('.row-checkbox:checked').length;
            $('#selectAll').prop('checked', totalCheckboxes === checkedCheckboxes);
        });
    }

    // Navigate vertically in grid
    function navigateVertical($input, direction) {
        var subjectId = $input.data('subjectid');
        var $currentRow = $input.closest('tr');
        var $targetRow = direction > 0 ? $currentRow.next('tr') : $currentRow.prev('tr');

        if ($targetRow.length > 0) {
            var $targetInput = $targetRow.find('[data-subjectid="' + subjectId + '"]');
            if ($targetInput.length > 0) {
                $targetInput.focus().select();
            }
        }
    }

    // Mark row as modified
    function markRowAsModified($input) {
        $input.closest('tr').addClass('modified-row');
    }

    // Check if row should remain modified
    function checkRowModification($input) {
        var $row = $input.closest('tr');
        var studentId = $row.data('studentid');
        var hasModifications = false;

        $row.find('.marks-input').each(function() {
            var subjectId = $(this).data('subjectid');
            var key = studentId + '_' + subjectId;
            if (modifiedMarks.hasOwnProperty(key)) {
                hasModifications = true;
                return false; // Break the loop
            }
        });

        if (!hasModifications) {
            $row.removeClass('modified-row');
        }
    }

    // Update summary
    function updateSummary() {
        var entryCount = Object.keys(modifiedMarks).length;
        var modifiedRowCount = $('.modified-row').length;

        $('#modifiedCount').text(modifiedRowCount + ' modified');

        // Enable/disable save button based on modifications
        $('#btnSaveMarks').prop('disabled', entryCount === 0);
    }

    // Save all marks
    $('#btnSaveMarks').click(function() {
        if (isUpdating) return;

        var marksToSave = [];
        var hasErrors = false;

        // Collect all marks data
        $.each(modifiedMarks, function(key, value) {
            var parts = key.split('_');
            var studentId = parts[0];
            var subjectId = parts[1];

            var $input = $('[data-studentid="' + studentId + '"][data-subjectid="' + subjectId + '"]');
            if ($input.hasClass('is-invalid')) {
                hasErrors = true;
            }

            // Handle different value types
            var marksValue = value;
            if (value === null || value === '') {
                // Decide based on your backend requirement
                // Use null for deletion or 0 for zero marks
                marksValue = null; // or use 0
            }

            marksToSave.push({
                StudentID: studentId,
                SubjectID: subjectId,
                MarksObtained: marksValue,
                ExamTypeID: currentExamId
            });
        });

        if (hasErrors) {
            showToast('Please fix validation errors before saving', 'error');
            return;
        }

        if (marksToSave.length === 0) {
            showToast('No changes to save', 'info');
            return;
        }

        if (!confirm('Do you want to save marks for ' + marksToSave.length + ' entries?')) {
            return;
        }

        isUpdating = true;
        showSpinner();
        $('#btnSaveMarks').prop('disabled', true)
            .html('<i class="fas fa-spinner fa-spin me-2"></i>Saving...');

        $.ajax({
            url: '@Url.Action("SaveStudentMarks", "StudentMarks")',
            type: 'POST',
            data: JSON.stringify({
                marks: marksToSave,
                classId: currentClassId,
                sectionId: currentSectionId,
                examTypeId: currentExamId
            }),
            contentType: 'application/json',
            success: function(result) {
                hideSpinner();

                if (result.success) {
                    showToast(result.message || 'Marks saved successfully!', 'success');

                    // Reload the page after 1 second
                    setTimeout(function() {
                        location.reload();
                    }, 1000);

                } else {
                    showToast(result.message || 'Failed to save marks', 'error');
                    isUpdating = false;
                    $('#btnSaveMarks').html('<i class="fas fa-save me-2"></i>Save Marks');
                    $('#btnSaveMarks').prop('disabled', false);
                }
            },
            error: function(xhr, status, error) {
                hideSpinner();
                showToast('An error occurred while saving marks', 'error');
                console.error('Save error:', error);
                isUpdating = false;
                $('#btnSaveMarks').html('<i class="fas fa-save me-2"></i>Save Marks');
                $('#btnSaveMarks').prop('disabled', false);
            }
        });
    });

    // Clear all button (if you have one)
    $('#btnClearAll').click(function() {
        if (confirm('Clear all entered marks? This will reset the form.')) {
            $('.marks-input').val('').removeClass('is-invalid pass-mark fail-mark absent-mark medical-mark');
            $('.marks-input').each(function() {
                $(this).data('original', '');
            });
            modifiedMarks = {};
            originalMarks = {};
            $('.modified-row').removeClass('modified-row');
            updateSummary();
            showToast('All marks cleared', 'info');
        }
    });

    // Export to Excel using DataTable
    $('#btnExportData').click(function() {
        if (dataTable) {
            $('.dt-button.buttons-excel').click();
        } else {
            showToast('Please load data first', 'warning');
        }
    });

    // Hide containers when filters change
    $('#ddlClass, #ddlSection, #ddlExam').change(function() {
        $('#marksEntryContainer').hide();
        $('#quickActions').hide();
        if (dataTable) {
            dataTable.destroy();
            dataTable = null;
        }
        modifiedMarks = {};
        originalMarks = {};
    });
});
</script>