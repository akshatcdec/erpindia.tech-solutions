@model ERPIndia.Controllers.StudentMarksViewModel
@{
    ViewBag.Title = "Grade Entry";
}

<style>
    /* ... [Keep all existing styles as they are] ... */
    .filter-card {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .filter-dropdown {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        padding: 8px 12px;
        width: 100%;
        font-size: 14px;
    }

    .show-button {
        background: #28a745;
        color: white;
        padding: 10px 30px;
        font-size: 14px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        width: 100%;
    }

        .show-button:hover {
            background: #218838;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

    /* DataTable custom styling with NEW BLUE TO PURPLE GRADIENT */
    .product-style-table {
        width: 100%;
        border-collapse: collapse;
    }

        .product-style-table thead th {
            background: linear-gradient(to bottom, #1e3c96, #7b2cbf);
            color: #ffffff !important;
            font-weight: bold;
            text-align: center;
            padding: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2) !important;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .product-style-table tbody tr:nth-child(odd) {
            background-color: #e3e8ed !important;
        }

        .product-style-table tbody tr:nth-child(even) {
            background-color: #ffffff !important;
        }

        .product-style-table tbody tr:hover {
            background-color: #f8f9fa !important;
        }

        .product-style-table tbody tr.selected {
            background-color: #e7f3ff !important;
        }

        .product-style-table tbody tr.modified {
            background-color: #fff3cd !important;
        }

        .product-style-table tbody td {
            padding: 8px 10px;
            border: 1px solid #dee2e6;
            text-align: left;
        }

    .grade-input {
        width: 120px;
        padding: 5px 8px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 13px;
        text-align: center;
        text-transform: uppercase;
    }

        .grade-input:focus {
            border-color: #80bdff;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }

        .grade-input.grade-a-plus {
            background: #28a745;
            color: white;
        }

        .grade-input.grade-a {
            background: #5cb85c;
            color: white;
        }

        .grade-input.grade-b-plus {
            background: #17a2b8;
            color: white;
        }

        .grade-input.grade-b {
            background: #5bc0de;
            color: white;
        }

        .grade-input.grade-c-plus {
            background: #ffc107;
            color: #333;
        }

        .grade-input.grade-c {
            background: #f0ad4e;
            color: white;
        }

        .grade-input.grade-d {
            background: #fd7e14;
            color: white;
        }

        .grade-input.grade-f {
            background: #dc3545;
            color: white;
        }

        .grade-input.grade-ab {
            background: #6c757d;
            color: white;
        }

    .save-btn {
        background: linear-gradient(to right, #28a745, #20c997);
        color: white;
        padding: 12px 40px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        margin: 20px 0;
        transition: all 0.3s ease;
        font-size: 16px;
    }

        .save-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(40,167,69,0.3);
        }

        .save-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            background: #6c757d;
        }

    .subject-badge {
        background: linear-gradient(to right, #dc2626, #764ba2);
        color: white;
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 12px;
        font-weight: 500;
        display: inline-block;
    }

    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 99999;
        max-width: 400px;
    }

    .toast {
        min-width: 300px;
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease;
        font-size: 14px;
        font-weight: 500;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .toast-success {
        background: #d4edda;
        border-left: 4px solid #28a745;
        color: #155724;
    }

    .toast-error {
        background: #f8d7da;
        border-left: 4px solid #dc3545;
        color: #721c24;
    }

    .toast-warning {
        background: #fff3cd;
        border-left: 4px solid #ffc107;
        color: #856404;
    }

    .toast-info {
        background: #d1ecf1;
        border-left: 4px solid #17a2b8;
        color: #0c5460;
    }

    .spinner-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .spinner-box {
        background: white;
        padding: 30px;
        border-radius: 10px;
        text-align: center;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 15px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .form-check {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .form-check-input {
        margin-right: 5px;
    }

    .grade-info {
        display: inline-block;
        padding: 6px 12px;
        margin-top: 6px;
        font-size: 14px;
        font-weight: 500;
        background: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 6px;
    }

        .grade-info b.absent {
            color: orangered;
            font-weight: 700;
        }

    .apply-batch-btn {
        background: #17a2b8;
        color: white;
        padding: 6px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 13px;
    }

        .apply-batch-btn:hover {
            background: #138496;
        }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-edit me-2"></i>Grade Entry
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-2">
                            <label class="form-label">Class <span class="text-danger">*</span></label>
                            @Html.DropDownListFor(x => x.Classes, Model.Classes, "Select Class", new { @class = "filter-dropdown", id = "ddlClass" })
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Section <span class="text-danger">*</span></label>
                            @Html.DropDownListFor(x => x.Sections, Model.Sections, "Select Section", new { @class = "filter-dropdown", id = "ddlSection" })
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Exam <span class="text-danger">*</span></label>
                            @Html.DropDownListFor(x => x.ExamTypes, Model.ExamTypes, "Select Exam", new { @class = "filter-dropdown", id = "ddlExam" })
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Grade Subject <span class="text-danger">*</span></label>
                            <select class="filter-dropdown" id="ddlSubject" disabled>
                                <option value="">First select Class, Section & Exam</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="show-button" id="btnShow">
                                <i class="fas fa-search"></i> Show
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Table Section -->
    <div id="dataTableContainer" style="display:none;">
        <div class="card">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">
                        <i class="fas fa-users me-2"></i>
                        <strong style="color: #1a237e;">Grade Entry List</strong>
                        <span id="maxMarksSpan" style="display:none">100</span>

                        <span style="display:none">
                            <span class="marks-summary badge bg-info" id="studentCount">0 students</span>
                            <span class="marks-summary badge bg-warning" id="modifiedCount">0 modified</span>
                        </span>
                    </h6>
                </div>
            </div>
            <div class="card-body">
                <!-- Data Table -->
                <div class="table-responsive">
                    <table class="table product-style-table mb-0" id="gradesTable">
                        <thead>
                            <tr>
                                <th width="50">
                                    <input type="checkbox" id="selectAll" class="form-check-input">
                                </th>
                                <th align="center">Class</th>
                                <th align="center">Sr.No</th>
                                <th align="center">Roll</th>
                                <th align="center">Grade Subject</th>
                                <th align="center"><b>Student Name</b></th>
                                <th align="center" style="text-align:center">Father Name</th>
                                <th width="150" align="center">Grade</th>
                            </tr>
                        </thead>
                        <tbody id="gradesTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>

                <!-- Save Button -->
                <div class="text-center">
                    <button class="save-btn" id="btnSaveAll">
                        <i class="fas fa-save"></i> Save Grades
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container" id="toastContainer"></div>

<!-- Spinner Overlay -->
<div class="spinner-overlay" id="spinnerOverlay">
    <div class="spinner-box">
        <div class="spinner"></div>
        <div>Processing...</div>
    </div>
</div>

<script>
$(document).ready(function() {
    var dataTable = null;
    var allStudentsData = [];
    var modifiedGrades = {};
    var originalGrades = {};
    var gradeOptions = [];
    var currentSubject = null;

    console.log('Page loaded, initializing Grade Entry system with DataTables...');

    // CORRECTED: Load subjects when class, section AND exam are selected
    $('#ddlClass, #ddlSection, #ddlExam').change(function() {
        var classId = $('#ddlClass').val();
        var sectionId = $('#ddlSection').val();
        var examId = $('#ddlExam').val();

        // Clear subject dropdown first
        $('#ddlSubject').html('<option value="">Select Grade Subject</option>').prop('disabled', true);

        // Only load subjects when all three are selected
        if (classId && sectionId && examId) {
            loadSubjects(classId, sectionId, examId);
        } else {
            // Show appropriate message
            if (!classId || !sectionId || !examId) {
                $('#ddlSubject').html('<option value="">First select Class, Section & Exam</option>').prop('disabled', true);
            }
        }

        // Hide table when filters change
        $('#dataTableContainer').hide();
        if (dataTable) {
            dataTable.destroy();
            dataTable = null;
        }
        allStudentsData = [];
    });

    // Hide table when subject changes
    $('#ddlSubject').change(function() {
        $('#dataTableContainer').hide();
        if (dataTable) {
            dataTable.destroy();
            dataTable = null;
        }
        allStudentsData = [];
    });

    // CORRECTED: Load subjects with exam ID
    function loadSubjects(classId, sectionId, examId) {
        $('#ddlSubject').html('<option value="">Loading grade subjects...</option>').prop('disabled', true);

        $.ajax({
            url: '@Url.Action("GetGradeSubjects", "StudentMarks")',
            type: 'POST',
            data: {
                classId: classId,
                sectionId: sectionId,
                examId: examId  // IMPORTANT: Now passing exam ID
            },
            success: function(data) {
                var $dropdown = $('#ddlSubject');
                $dropdown.empty().append('<option value="">Select Grade Subject</option>');

                if (data && data.success) {
                    if (data.subjects && data.subjects.length > 0) {
                        $.each(data.subjects, function(i, subject) {
                            $dropdown.append('<option value="' + subject.SubjectID + '">' + subject.SubjectName + '</option>');
                        });
                        $dropdown.prop('disabled', false);
                        //showToast('Grade subjects loaded successfully', 'info');
                    } else {
                        $dropdown.html('<option value="">No grade subjects mapped</option>').prop('disabled', true);
                        showToast('No grade subjects found for this combination. Please configure Grade Subject Mapping first.', 'warning');
                    }
                } else {
                    $dropdown.html('<option value="">No grade subjects available</option>').prop('disabled', true);
                    showToast(data.message || 'Failed to load grade subjects', 'error');
                }
            },
            error: function(xhr, status, error) {
                $('#ddlSubject').html('<option value="">Error loading subjects</option>').prop('disabled', true);
                showToast('Error loading grade subjects: ' + (error || 'Unknown error'), 'error');
                console.error('Error loading grade subjects:', error);
            }
        });
    }

    // Show button click
    $('#btnShow').click(function() {
        var classId = $('#ddlClass').val();
        var sectionId = $('#ddlSection').val();
        var examId = $('#ddlExam').val();
        var subjectId = $('#ddlSubject').val();

        // Clear any existing toasts
        $('#toastContainer').empty();

        // Validate fields
        if (!classId || classId === '' || classId === '0') {
            showToast('Please select Class', 'warning');
            $('#ddlClass').focus();
            return false;
        }

        if (!sectionId || sectionId === '' || sectionId === '0') {
            showToast('Please select Section', 'warning');
            $('#ddlSection').focus();
            return false;
        }

        if (!examId || examId === '' || examId === '0') {
            showToast('Please select Exam Type', 'warning');
            $('#ddlExam').focus();
            return false;
        }

        if (!subjectId || subjectId === '' || subjectId === '0') {
            showToast('Please select Grade Subject', 'warning');
            $('#ddlSubject').focus();
            return false;
        }

        loadStudentGrades(classId, sectionId, examId, subjectId);
    });

    // Load student grades
    function loadStudentGrades(classId, sectionId, examId, subjectId) {
        if (!classId || !sectionId || !examId || !subjectId) {
            showToast('All fields are required. Please select all options.', 'error');
            return false;
        }

        showSpinner();

        $.ajax({
            url: '@Url.Action("GetStudentGradesForSubject", "StudentMarks")',
            type: 'POST',
            data: {
                classId: classId,
                sectionId: sectionId,
                examTypeId: examId,
                subjectId: subjectId
            },
            success: function(data) {
                hideSpinner();

                if (data && data.success) {
                    if (data.students && data.students.length > 0) {
                        allStudentsData = data.students;
                        gradeOptions = data.gradeOptions;
                        currentSubject = data.subject;

                        // Reset tracking objects
                        modifiedGrades = {};
                        originalGrades = {};

                        // Store original grades
                        $.each(allStudentsData, function(index, student) {
                            originalGrades[student.StudentID] = student.Grade || '';
                        });

                        // Show table
                        $('#dataTableContainer').show();

                        // Render table
                        renderTable();

                        showToast('Data loaded successfully! Total students: ' + data.students.length, 'success');
                    } else {
                        showToast('No students found for selected criteria', 'warning');
                        $('#dataTableContainer').hide();
                    }
                } else {
                    showToast(data.message || 'Failed to load student data', 'error');
                    $('#dataTableContainer').hide();
                }
            },
            error: function(xhr, status, error) {
                hideSpinner();
                var errorMsg = 'Error loading student data';
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMsg = xhr.responseJSON.message;
                } else if (error) {
                    errorMsg += ': ' + error;
                }
                showToast(errorMsg, 'error');
                console.error('Load error:', xhr, status, error);
                $('#dataTableContainer').hide();
            }
        });
    }

    // Render table with DataTables
    function renderTable() {
        var $tbody = $('#gradesTableBody');
        $tbody.empty();

        // Populate table body
        for (var i = 0; i < allStudentsData.length; i++) {
            var student = allStudentsData[i];
            var gradeValue = student.Grade || '';
            var gradeClass = '';

            if (gradeValue) {
                gradeClass = ' grade-' + gradeValue.toLowerCase().replace('+', '-plus');
            }

            var row = '<tr data-studentid="' + student.StudentID + '">' +
                     '<td class="text-center"><input type="checkbox" class="form-check-input row-checkbox"></td>' +
                     '<td>' + student.ClassName + '-' + student.SectionName + '</td>' +
                     '<td>' + (i + 1) + '</td>' +
                     '<td>' + (student.RollNumber || '-') + '</td>' +
                     '<td><span class="subject-badge">' + currentSubject.SubjectName + '</span></td>' +
                     '<td><b>' + student.StudentName + '</b></td>' +
                     '<td>' + (student.FatherName || '-') + '</td>' +
                     '<td align="center">' +
                        '<input type="text" ' +
                        'class="grade-input' + gradeClass + '" ' +
                        'data-studentid="' + student.StudentID + '" ' +
                        'data-original="' + gradeValue + '" ' +
                        'value="' + gradeValue + '" ' +
                        'maxlength="3" ' +
                        'placeholder="Enter Grade">' +
                     '</td>' +
                     '</tr>';

            $tbody.append(row);
        }

        // Initialize DataTable
        initializeDataTable();
    }

    // Initialize DataTable
    function initializeDataTable() {
        // Destroy existing DataTable if exists
        if (dataTable) {
            dataTable.destroy();
        }

        var exportColumns = [];
        for (var i = 1; i < $('#gradesTable thead th').length; i++) {
            exportColumns.push(i);
        }

        // Initialize new DataTable
        dataTable = $('#gradesTable').DataTable({
            "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
            "pageLength": 25,
            "order": [[2, "asc"]], // Order by Sr.No
            "scrollX": false,
            "responsive": true,
            "dom": 'Blfrtip',
            "buttons": [
                {
                    extend: 'copy',
                    text: 'Copy',
                    className: 'dt-button',
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'csv',
                    text: 'CSV',
                    className: 'dt-button',
                    title: 'StudentGrades_' + new Date().getTime(),
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'excel',
                    text: 'Excel',
                    className: 'dt-button',
                    title: 'StudentGrades_' + new Date().getTime(),
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'pdf',
                    text: 'PDF',
                    className: 'dt-button',
                    title: 'Student Grades Report',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                {
                    extend: 'print',
                    text: 'Print',
                    className: 'dt-button',
                    title: 'Student Grades Report',
                    exportOptions: {
                        columns: exportColumns
                    }
                }
            ],
            "language": {
                "search": "Search:",
                "lengthMenu": "Show _MENU_ entries",
                "info": "Showing _START_ to _END_ of _TOTAL_ entries",
                "paginate": {
                    "first": "First",
                    "last": "Last",
                    "next": "Next",
                    "previous": "Previous"
                }
            },
            "columnDefs": [
                {
                    "orderable": false,
                    "targets": [0, 7] // Disable ordering for checkbox and grade columns
                }
            ],
            "drawCallback": function(settings) {
                // Re-bind events after DataTable redraw
                bindTableEvents();
            }
        });

        // Initial binding
        bindTableEvents();
    }

    // Bind table events
    function bindTableEvents() {
        // Grade input change event
        $('.grade-input').off('input').on('input', function() {
            var $input = $(this);
            var studentId = $input.data('studentid');
            var grade = $input.val().trim().toUpperCase();
            var originalGrade = $input.data('original') || '';
            var $row = $input.closest('tr');

            // Auto convert to uppercase
            if ($input.val() !== grade) {
                $input.val(grade);
            }

            // Update visual style based on grade
            $input.removeClass('grade-a-plus grade-a grade-b-plus grade-b grade-c-plus grade-c grade-d grade-f grade-ab');
            if (grade) {
                var gradeClass = 'grade-' + grade.toLowerCase().replace('+', '-plus');
                $input.addClass(gradeClass);
            }

            // Check if grade has changed from original
            if (grade !== originalGrade) {
                // Grade has been modified (including empty grades)
                modifiedGrades[studentId] = {
                    grade: grade,
                    originalGrade: originalGrade,
                    remarks: ''
                };
                $row.addClass('modified');
            } else {
                // Grade is back to original value
                delete modifiedGrades[studentId];
                $row.removeClass('modified');
            }
        });

        // Enter key navigation
        $('.grade-input').off('keydown').on('keydown', function(e) {
            if (e.key === 'Enter' || e.keyCode === 13) {
                e.preventDefault();
                var $inputs = $('.grade-input:visible');
                var index = $inputs.index(this);
                if (index < $inputs.length - 1) {
                    $inputs.eq(index + 1).focus().select();
                }
            }
        });

        // Focus event
        $('.grade-input').off('focus').on('focus', function() {
            $(this).select();
        });

        // Select all checkbox
        $('#selectAll').off('change').on('change', function() {
            var isChecked = $(this).prop('checked');
            if (dataTable) {
                dataTable.$('.row-checkbox').prop('checked', isChecked);
            } else {
                $('.row-checkbox').prop('checked', isChecked);
            }
        });

        // Individual row checkbox
        $('.row-checkbox').off('change').on('change', function() {
            var $row = $(this).closest('tr');
            if ($(this).is(':checked')) {
                $row.addClass('selected');
            } else {
                $row.removeClass('selected');
            }
        });
    }

    // Apply batch grade to selected students
    window.applyBatchGrade = function() {
        var grade = $('#batchGradeSelect').val();
        if (!grade) {
            showToast('Please select a grade from the dropdown', 'warning');
            return;
        }

        var $checkedBoxes = dataTable ? dataTable.$('.row-checkbox:checked') : $('.row-checkbox:checked');
        var checkedCount = $checkedBoxes.length;

        if (checkedCount === 0) {
            showToast('Please select students first', 'warning');
            return;
        }

        $checkedBoxes.each(function() {
            var $row = $(this).closest('tr');
            var studentId = $row.data('studentid');
            $('.grade-input[data-studentid="' + studentId + '"]').val(grade).trigger('input');
        });

        $('#batchGradeSelect').val('');
        showToast('Grade ' + grade + ' applied to ' + checkedCount + ' selected student(s)', 'success');
    };

    // Save all grades
    $('#btnSaveAll').click(function() {
        var modifiedCount = Object.keys(modifiedGrades).length;

        if (modifiedCount === 0) {
            showToast('No grades to save', 'warning');
            return;
        }

        // Validate grades
        var confirmMessage = 'Do you want to save ' + modifiedCount + ' modified grade(s)?';

        if (confirm(confirmMessage)) {
            performSave();
        }
    });

    // Perform save
    function performSave() {
        var gradesToSave = [];

        $.each(modifiedGrades, function(studentId, data) {
            gradesToSave.push({
                StudentID: studentId,
                SubjectID: currentSubject.SubjectID,
                ExamTypeID: $('#ddlExam').val(),
                Grade: data.grade,
                Remarks: data.remarks || ''
            });
        });

        showSpinner();

        console.log('Sending grades data:', {
            grades: gradesToSave,
            classId: $('#ddlClass').val(),
            sectionId: $('#ddlSection').val(),
            examTypeId: $('#ddlExam').val()
        });

        $.ajax({
            url: '@Url.Action("SaveStudentGrades", "StudentMarks")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                grades: gradesToSave,
                classId: $('#ddlClass').val(),
                sectionId: $('#ddlSection').val(),
                examTypeId: $('#ddlExam').val()
            }),
            success: function(result) {
                hideSpinner();

                if (result && result.success) {
                    showToast('Grades saved successfully!', 'success');
                    setTimeout(function() {
                        location.reload();
                    }, 1000);
                } else {
                    showToast(result.message || 'Failed to save grades', 'error');
                }
            },
            error: function(xhr, status, error) {
                hideSpinner();

                console.error('Save error details:', {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    responseText: xhr.responseText,
                    error: error
                });

                var errorMsg = 'Error saving grades: ';
                if (xhr.status === 0) {
                    errorMsg += 'Network error - Check your connection';
                } else if (xhr.status === 404) {
                    errorMsg += 'Save endpoint not found';
                } else if (xhr.status === 500) {
                    errorMsg += 'Server error - Check server logs';
                } else if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMsg += xhr.responseJSON.message;
                } else if (xhr.responseText) {
                    try {
                        var response = JSON.parse(xhr.responseText);
                        errorMsg += response.message || 'Unknown server error';
                    } catch(e) {
                        errorMsg += 'Server returned invalid response';
                    }
                } else {
                    errorMsg += error || 'Unknown error';
                }

                showToast(errorMsg, 'error');
            }
        });
    }

    // Helper functions
    function showSpinner() {
        $('#spinnerOverlay').css('display', 'flex');
    }

    function hideSpinner() {
        $('#spinnerOverlay').hide();
    }

    function showToast(message, type) {
        var icons = {
            success: 'check',
            error: 'times',
            warning: 'exclamation',
            info: 'info'
        };

        var toastId = 'toast_' + Date.now();

        var toastHtml = '<div class="toast toast-' + type + '" id="' + toastId + '" style="display:none;">' +
                       '<i class="fas fa-' + icons[type] + '-circle me-2"></i>' +
                       message +
                       '</div>';

        var $toast = $(toastHtml);
        $('#toastContainer').append($toast);

        $toast.fadeIn(300);

        setTimeout(function() {
            $('#' + toastId).fadeOut(300, function() {
                $(this).remove();
            });
        }, 4000);
    }

}); // Document ready closing
</script>