@using ERPIndia
@{
    ViewBag.Title = "Holiday Calendar Management";
    string holidayName = "Holiday";
    string sessionId = Convert.ToString(ViewBag.SessionId);
    int sessionYear = ViewBag.SessionYear;
}
<div class="card">
    <div class="card-header bg-light">
        <div class="d-flex align-items-center">
            <h5 class="text-dark">Holiday Calendar</h5>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-xxl-3 col-xl-3">
                <div class="card">
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <h5 class="text-dark">Manage Holiday</h5>
                        </div>
                    </div>
                    <div class="card-body">
                        <form id="holidayForm" class="new-added-form">
                            <div class="row">
                                <input type="hidden" id="holidayId">
                                <input type="hidden" id="sessionId" value="@sessionId">
                                <input type="hidden" id="sessionYear" value="@sessionYear">
                                <div class="col-xl-12 col-lg-12 col-12 form-group">
                                    <label>Holiday Name *</label>
                                    <input type="text" id="holidayName" placeholder="" autocomplete="off" class="form-control required">
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xl-12 col-lg-12 col-12 form-group">
                                    <label>Holiday Date *</label>
                                    <input type="date" id="holidayDate" class="form-control required">
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xl-12 col-lg-12 col-12 form-group">
                                    <label>Holiday Type *</label>
                                    <select id="holidayType" class="form-control required">
                                        <option value="">Select Holiday Type</option>
                                        <option value="National">National Holiday</option>
                                        <option value="Religious">Religious Holiday</option>
                                        <option value="Cultural">Cultural Holiday</option>
                                        <option value="Regional">Regional Holiday</option>
                                        <option value="Academic">Academic Holiday</option>
                                        <option value="Festival">Festival</option>
                                        <option value="Vacation">Vacation</option>
                                        <option value="Other">Other</option>
                                    </select>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xl-12 col-lg-12 col-12 form-group">
                                    <label>Sort Order</label>
                                    <input type="number" id="sortOrder" placeholder="0" value="0" min="0" class="form-control">
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xl-12 col-lg-12 col-12 form-group">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="isActive" checked>
                                        <label class="form-check-label" for="isActive">
                                            Active
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xl-12 col-lg-12 col-12 form-group">
                                    <br />
                                    <div class="btn-group" role="group">
                                        <button type="submit" id="submitBtn" class="btn btn-primary">Save</button>&nbsp;
                                        <button type="button" id="cancelBtn" class="btn btn-secondary">Cancel</button>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-xxl-9 col-xl-9">
                <div class="card">
                    <div class="card-header bg-light">
                        <div class="d-flex align-items-center">
                            <h5 class="text-dark">Holidays List</h5>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-bordered table-striped" id="holidayDatatable">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>Holiday Name</th>
                                        <th>Holiday Date</th>
                                        <th>Holiday Type</th>
                                        <th>Sort Order</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Data will be populated here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js" integrity="sha512-AA1Bzp5Q0K1KanKKmvN/4d3IRKVlv9PYgwFPvm32nPO6QS8yH1HO7LbgB1pgiOxPtfeg5zEn2ba64MUcqJx6CA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<div id="notification-container" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>

<script>
/**
 * Holiday Calendar Management Module
 * A module pattern implementation for better encapsulation and organization
 */
const HolidayManager = (function() {
    // Private properties
    const apiEndpoints = {
        getAll: '@Url.Action("GetAllHolidays", "HolidayCalendar")',
        getById: '@Url.Action("GetHolidayById", "HolidayCalendar")',
        create: '@Url.Action("InsertHoliday", "HolidayCalendar")',
        update: '@Url.Action("UpdateHoliday", "HolidayCalendar")',
        delete: '@Url.Action("DeleteHoliday", "HolidayCalendar")',
        getNextSortOrder: '@Url.Action("GetNextSortOrder", "HolidayCalendar")'
    };

    const elements = {
        form: '#holidayForm',
        idField: '#holidayId',
        submitBtn: '#submitBtn',
        cancelBtn: '#cancelBtn',
        datatable: '#holidayDatatable',
        requiredFields: '.required'
    };

    let dataTable = null;

    // Private methods
    const initializeDataTable = function () {
        const sessionId = $('#sessionId').val();
        const sessionYear = $('#sessionYear').val();

        console.log("Initializing DataTable with SessionId:", sessionId, "SessionYear:", sessionYear);

        dataTable = $(elements.datatable).DataTable({
            "processing": true,
            "serverSide": true,
            "filter": true,
            "ajax": {
                "url": apiEndpoints.getAll,
                "type": "POST",
                "data": function (d) {
                    d.sessionId = sessionId;
                    d.sessionYear = sessionYear;
                    console.log("Sending request with data:", JSON.stringify(d));
                    return d;
                },
                "datatype": "json",
                "error": function (xhr, error, thrown) {
                    console.error("DataTable AJAX error:", error, thrown);
                    console.log("Response:", xhr.responseText);
                    Notification.show("Failed to load holiday data. Please try again.", "error");
                }
            },
            "columnDefs": [{
                "targets": [0],
                "visible": false,
                "searchable": false
            }],
            "columns": [
                { data: 'HolidayID', visible: false },
                { "data": "HolidayName", "name": "HolidayName", "autoWidth": true },
                {
                    "data": "HolidayDate",
                    "name": "HolidayDate",
                    "autoWidth": true,
                    "render": function (data) {
                        if (data) {
                            try {
                                let date;
                                if (data instanceof Date) {
                                    date = data;
                                }
                                else if (typeof data === 'string') {
                                    if (data.indexOf('/Date(') !== -1) {
                                        const timestamp = parseInt(data.replace(/\/Date\((\d+)\)\//, '$1'));
                                        date = new Date(timestamp);
                                    } else {
                                        date = new Date(data);
                                    }
                                }
                                else {
                                    return 'Invalid Date';
                                }

                                if (isNaN(date.getTime())) {
                                    return 'Invalid Date';
                                }

                                const day = date.getDate().toString().padStart(2, '0');
                                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                                const year = date.getFullYear();

                                return `${day}/${month}/${year}`;
                            } catch (error) {
                                console.error('Date parsing error:', error, 'Data:', data);
                                return 'Invalid Date';
                            }
                        }
                        return '';
                    }
                },
                { "data": "HolidayType", "name": "HolidayType", "autoWidth": true },
                { "data": "SortOrder", "name": "SortOrder", "autoWidth": true },
                {
                    "data": "IsActive",
                    "name": "IsActive",
                    "autoWidth": true,
                    "render": function (data) {
                        return data ? '<span class="badge bg-success">Active</span>' : '<span class="badge bg-danger">Inactive</span>';
                    }
                },
                {
                    data: null,
                    orderable: false,
                    className: 'text-center',
                    width: "100px",
                    render: function (data, type, row) {
                        return `
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-primary btn-sm edit-btn" data-id="${row.HolidayID}" title="Edit">
                                    <i class="fa fa-edit"></i>
                                </button>
                                <button type="button" class="btn btn-danger btn-sm delete-btn" data-id="${row.HolidayID}" title="Delete">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        `;
                    }
                },
            ],
            "order": [[2, "asc"]], // Default sort by HolidayDate
            responsive: true,
            dom: 'Bfrtip',
            buttons: [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "language": {
                "emptyTable": "No holidays found for the current session",
                "zeroRecords": "No matching holidays found"
            }
        });
    };

    const checkForDuplicateHoliday = async function (holidayName, currentId = '') {
        const sessionId = $('#sessionId').val();

        return new Promise((resolve, reject) => {
            $.ajax({
                url: apiEndpoints.getAll,
                type: 'GET',
                data: {
                    sessionId: sessionId,
                    checkDuplicate: true,
                    holidayName: holidayName
                },
                success: function (result) {
                    if (result.success) {
                        const isDuplicate = result.data.some(item => {
                            return item.HolidayName.toLowerCase() === holidayName.toLowerCase() &&
                                   item.HolidayID.toString() !== currentId.toString();
                        });
                        resolve(isDuplicate);
                    } else {
                        reject(result.message || 'Error checking for duplicates');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error checking for duplicates:", error);
                    console.log("Response:", xhr.responseText);
                    reject(error);
                }
            });
        });
    };

    const getFormData = function (includeDeleteAttendance = false) {
        const holidayDateValue = $('#holidayDate').val();

        const data = {
            HolidayID: $('#holidayId').val(),
            HolidayName: $('#holidayName').val().trim(),
            HolidayType: $('#holidayType').val(),
            SortOrder: parseInt($('#sortOrder').val()) || 0,
            SessionID: $('#sessionId').val(),
            SessionYear: parseInt($('#sessionYear').val()),
            IsActive: $('#isActive').is(':checked'),
            holidayDateString: holidayDateValue,
            deleteAttendanceIfExists: includeDeleteAttendance
        };

        return data;
    };

    const bindEvents = function() {
        // Form submission
        $(elements.form).on('submit', async function(e) {
            e.preventDefault();

            $(elements.submitBtn).prop('disabled', true);

            try {
                const isValid = await validateForm();

                if (isValid) {
                    saveHoliday(false); // Start with deleteAttendanceIfExists = false
                } else {
                    $(elements.submitBtn).prop('disabled', false);
                }
            } catch (error) {
                console.error("Validation error:", error);
                Notification.show("An error occurred during validation. Please try again.", "error");
                $(elements.submitBtn).prop('disabled', false);
            }
        });

        // Cancel button
        $(elements.cancelBtn).on('click', resetForm);

        // Edit button (delegated event for dynamic elements)
        $(elements.datatable).on('click', '.edit-btn', function() {
            const holidayId = $(this).data('id');
            loadHolidayForEdit(holidayId);
        });

        // Delete button (delegated event for dynamic elements)
        $(elements.datatable).on('click', '.delete-btn', function() {
            const holidayId = $(this).data('id');
            confirmDelete(holidayId);
        });
    };

    const validateForm = async function() {
        let isValid = true;

        // Clear previous validation styling
        $(elements.requiredFields).removeClass('is-invalid').next('.invalid-feedback').remove();

        // Check required fields
        $(elements.requiredFields).each(function() {
            if (!$(this).val().trim()) {
                isValid = false;
                $(this).addClass('is-invalid');
                $(this).after(`<div class="invalid-feedback">This field is required</div>`);
            }
        });

        // Validate date field specifically
        const holidayDate = $('#holidayDate').val();
        if (!holidayDate) {
            isValid = false;
            $('#holidayDate').addClass('is-invalid');
            if (!$('#holidayDate').next('.invalid-feedback').length) {
                $('#holidayDate').after(`<div class="invalid-feedback">Holiday date is required</div>`);
            }
        }

        // If basic validation passes, check for duplicate holiday names
        if (isValid) {
            try {
                const holidayName = $('#holidayName').val().trim();
                const currentId = $(elements.idField).val();

                const isDuplicate = await checkForDuplicateHoliday(holidayName, currentId);

                if (isDuplicate) {
                    isValid = false;
                    $('#holidayName').addClass('is-invalid');
                    $('#holidayName').after(`<div class="invalid-feedback">This holiday name already exists for the current session</div>`);
                }
            } catch (error) {
                console.error("Error checking for duplicates:", error);
            }
        }

        return isValid;
    };

    const resetForm = function() {
        $('#holidayName').val('');
        $('#holidayDate').val('');
        $('#holidayType').val('');
        $('#sortOrder').val('0');
        $('#isActive').prop('checked', true);
        $(elements.idField).val('');
        $(elements.submitBtn).text('Save');
        $(elements.requiredFields).removeClass('is-invalid').next('.invalid-feedback').remove();

        getNextSortOrder();
    };

    const getNextSortOrder = function() {
        const sessionId = $('#sessionId').val();

        $.ajax({
            url: apiEndpoints.getNextSortOrder,
            type: 'GET',
            data: { sessionId: sessionId },
            success: function(result) {
                if (result.success) {
                    $('#sortOrder').val(result.nextSortOrder);
                }
            },
            error: function(xhr, status, error) {
                console.error("Error getting next sort order:", error);
            }
        });
    };

    const saveHoliday = function(deleteAttendanceIfExists = false) {
        const holidayData = getFormData(deleteAttendanceIfExists);
        const isUpdate = holidayData.HolidayID !== '';

        if (isUpdate) {
            performAjaxOperationWithAttendanceCheck(apiEndpoints.update, holidayData, 'updating');
        } else {
            performAjaxOperationWithAttendanceCheck(apiEndpoints.create, holidayData, 'creating');
        }
    };

    const performAjaxOperationWithAttendanceCheck = function(url, data, operationType) {
        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            cache: false,
            beforeSend: function() {
                $(elements.submitBtn).prop('disabled', true);
                $(elements.cancelBtn).prop('disabled', true);
            },
            success: function(result) {
                if (result.attendanceExists) {
                    // Show confirmation dialog for attendance deletion
                    let messageText = result.message;
                    if (result.attendanceCount) {
                        messageText += `\n\nThis will delete ${result.attendanceCount} attendance record(s).`;
                    }
                    messageText += "\n\nThis action cannot be undone.";

                    swal({
                        title: "Attendance Records Found!",
                        text: messageText,
                        icon: "warning",
                        buttons: {
                            cancel: {
                                text: "Cancel",
                                value: false,
                                visible: true,
                                className: "",
                                closeModal: true,
                            },
                            confirm: {
                                text: "Delete Attendance & Continue",
                                value: true,
                                visible: true,
                                className: "swal-button--danger",
                                closeModal: true
                            }
                        },
                        dangerMode: true,
                    })
                    .then((willDelete) => {
                        if (willDelete) {
                            // User confirmed - resend with deleteAttendanceIfExists = true
                            data.deleteAttendanceIfExists = true;
                            performAjaxOperation(url, data, operationType);
                        } else {
                            // User cancelled - re-enable buttons
                            $(elements.submitBtn).prop('disabled', false);
                            $(elements.cancelBtn).prop('disabled', false);
                        }
                    });
                } else if (result.success) {
                    // Success - normal flow
                    if (operationType !== 'deleting') {
                        resetForm();
                    }
                    refreshDataTable();

                    Notification.show(result.message, 'success');
                } else {
                    // Error
                    Notification.show(result.message || `Failed while ${operationType} the holiday.`, 'error');
                    $(elements.submitBtn).prop('disabled', false);
                    $(elements.cancelBtn).prop('disabled', false);
                }
            },
            error: function(xhr, status, error) {
                console.error(`${operationType} error:`, error);
                Notification.show(`An error occurred while ${operationType} the holiday.`, 'error');
                $(elements.submitBtn).prop('disabled', false);
                $(elements.cancelBtn).prop('disabled', false);
            }
        });
    };

    const performAjaxOperation = function(url, data, operationType) {
        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            cache: false,
            beforeSend: function() {
                $(elements.submitBtn).prop('disabled', true);
                $(elements.cancelBtn).prop('disabled', true);
            },
            success: function(result) {
                if (result.success) {
                    if (operationType !== 'deleting') {
                        resetForm();
                    }
                    refreshDataTable();
                    Notification.show(result.message, 'success');
                } else {
                    Notification.show(result.message || `Failed while ${operationType} the holiday.`, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error(`${operationType} error:`, error);
                Notification.show(`An error occurred while ${operationType} the holiday.`, 'error');
            },
            complete: function() {
                $(elements.submitBtn).prop('disabled', false);
                $(elements.cancelBtn).prop('disabled', false);
            }
        });
    };

    const loadHolidayForEdit = function(id) {
        $.ajax({
            url: apiEndpoints.getById,
            type: 'GET',
            data: { id: id },
            success: function(result) {
                if (result.success && result.data) {
                    const holidayData = result.data;

                    $(elements.idField).val(holidayData.HolidayID);
                    $('#holidayName').val(holidayData.HolidayName);
                    $('#holidayType').val(holidayData.HolidayType);
                    $('#sortOrder').val(holidayData.SortOrder);
                    $('#isActive').prop('checked', holidayData.IsActive);

                    if (holidayData.HolidayDate) {
                        $('#holidayDate').val(holidayData.HolidayDate);
                    }

                    $(elements.submitBtn).text('Update');

                    $('html, body').animate({
                        scrollTop: $(elements.form).offset().top - 100
                    }, 500);
                } else {
                    Notification.show('Holiday not found.', 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('Error fetching holiday data:', error);
                Notification.show('An error occurred while fetching holiday data.', 'error');
            }
        });
    };

    const confirmDelete = function(id) {
        swal({
            title: "Are you sure?",
            text: "Once deleted, you will not be able to recover this holiday!",
            icon: "warning",
            buttons: ["Cancel", "Delete"],
            dangerMode: true,
        })
        .then((willDelete) => {
            if (willDelete) {
                deleteHoliday(id);
            }
        });
    };

    const deleteHoliday = function(id) {
        performAjaxOperation(apiEndpoints.delete, { id: id }, 'deleting');
    };

    const refreshDataTable = function() {
        if (dataTable) {
            dataTable.ajax.reload();
            return;
        }

        if ($.fn.DataTable.isDataTable(elements.datatable)) {
            $(elements.datatable).DataTable().ajax.reload();
        }
    };

    // Public methods
    return {
        init: function() {
            initializeDataTable();
            bindEvents();
            getNextSortOrder();
        }
    };
})();

/**
 * Notification Module
 */
const Notification = (function() {
    return {
        show: function(message, type) {
            swal({
                title: type === 'success' ? 'Success!' : 'Error!',
                text: message,
                icon: type,
                button: "OK",
            });
        }
    };
})();

// Initialize the application when the document is ready
$(document).ready(function() {
    const sessionId = $('#sessionId').val();
    const sessionYear = $('#sessionYear').val();

    console.log("Page loaded with SessionId:", sessionId, "SessionYear:", sessionYear);

    if (!sessionId || !sessionYear) {
        console.error("Warning: SessionId or SessionYear value is missing!");
        Notification.show("Session information is missing. Some features may not work correctly.", "warning");
    }

    HolidayManager.init();
});
</script>

<style>
    .invalid-feedback {
        display: block;
        color: #dc3545;
        font-size: 80%;
        margin-top: 0.25rem;
    }

    .is-invalid {
        border-color: #dc3545;
    }

    div.dataTables_wrapper div.dataTables_filter {
        text-align: right;
    }

    div.dt-buttons {
        margin-bottom: 10px;
    }

    .dataTables_length {
        padding-top: 5px;
    }

    .dt-button {
        padding: 5px 10px;
        margin-right: 5px;
        border: 1px solid #ddd;
        background-color: #f8f8f8;
        color: #333;
        border-radius: 4px;
    }

        .dt-button:hover {
            background-color: #e8e8e8;
        }

    @@media (max-width: 767px) {
        div.dataTables_wrapper div.dataTables_filter,
        div.dataTables_wrapper div.dataTables_length,
        div.dt-buttons {
            text-align: center;
            width: 100%;
            margin-bottom: 10px;
        }
    }

    .holiday-type-National {
        background-color: #e3f2fd;
    }

    .holiday-type-Religious {
        background-color: #f3e5f5;
    }

    .holiday-type-Cultural {
        background-color: #e8f5e8;
    }

    .holiday-type-Regional {
        background-color: #fff3e0;
    }

    .holiday-type-Academic {
        background-color: #f1f8e9;
    }

    .holiday-type-Festival {
        background-color: #fce4ec;
    }

    .holiday-type-Vacation {
        background-color: #e0f2f1;
    }

    .holiday-type-Other {
        background-color: #f5f5f5;
    }

    .swal-button--danger {
        background-color: #dc3545 !important;
    }
</style>